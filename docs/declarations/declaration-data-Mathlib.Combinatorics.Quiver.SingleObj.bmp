{"name":"Mathlib.Combinatorics.Quiver.SingleObj","instances":[{"typeNames":["Quiver.SingleObj"],"name":"Quiver.instUniqueSingleObj","className":"Unique"},{"typeNames":["Quiver.SingleObj"],"name":"Quiver.SingleObj.instQuiverSingleObj","className":"Quiver"},{"typeNames":["Quiver.SingleObj"],"name":"Quiver.SingleObj.instInhabitedSingleObj","className":"Inhabited"}],"imports":["Init","Mathlib.Combinatorics.Quiver.Cast","Mathlib.Combinatorics.Quiver.Symmetric"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L172-L174","name":"Quiver.SingleObj.pathEquivList_symm_cons","line":172,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_symm_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_symm_cons\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathEquivList_symm_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.pathEquivList</span>.symm</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">Quiver.Path.cons</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.pathEquivList</span>.symm</span> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L167-L168","name":"Quiver.SingleObj.pathEquivList_symm_nil","line":167,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_symm_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_symm_nil\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathEquivList_symm_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.pathEquivList</span>.symm</span> <span class=\"fn\">[]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Quiver.Path.nil</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L161-L163","name":"Quiver.SingleObj.pathEquivList_cons","line":161,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_cons\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathEquivList_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.pathEquivList</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">Quiver.Path.cons</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList\">Quiver.SingleObj.pathToList</a> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L156-L157","name":"Quiver.SingleObj.pathEquivList_nil","line":156,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_nil\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathEquivList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.pathEquivList</span> <span class=\"fn\">Quiver.Path.nil</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L151-L152","name":"Quiver.SingleObj.pathEquivList","line":151,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList","doc":"Paths in `SingleObj α` quiver correspond to lists of elements of type `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathEquivList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L144-L147","name":"Quiver.SingleObj.pathToList_listToPath","line":144,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList_listToPath","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList_listToPath\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathToList_listToPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList\">Quiver.SingleObj.pathToList</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath\">Quiver.SingleObj.listToPath</a> <span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L137-L141","name":"Quiver.SingleObj.listToPath_pathToList","line":137,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath_pathToList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath_pathToList\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">listToPath_pathToList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath\">Quiver.SingleObj.listToPath</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList\">Quiver.SingleObj.pathToList</a> <span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\">Quiver.Path.cast</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span></span>)</span> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span></span>)</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L132-L134","name":"Quiver.SingleObj.listToPath","line":132,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath","doc":"Auxiliary definition for `quiver.SingleObj.pathEquivList`.\nConverts a list of elements of type `α` into a path in the quiver `SingleObj α`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">listToPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L123-L125","name":"Quiver.SingleObj.pathToList","line":123,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList","doc":"Auxiliary definition for `quiver.SingleObj.pathEquivList`.\nConverts a path in the quiver `single_obj α` into a list of elements of type `a`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathToList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L115-L117","name":"Quiver.SingleObj.toPrefunctor_symm_comp","line":115,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_comp\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_symm_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">⥤q</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">β</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">⥤q</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span>.symm</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.comp\">⋙q</a> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span>.symm</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span>.symm</span> <span class=\"fn\">f</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L109-L111","name":"Quiver.SingleObj.toPrefunctor_comp","line":109,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_comp\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.comp\">⋙q</a> <span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span> <span class=\"fn\">g</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L105-L106","name":"Quiver.SingleObj.toPrefunctor_symm_id","line":105,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_id\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_symm_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span>.symm</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.id\">𝟭q</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">id</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L100-L101","name":"Quiver.SingleObj.toPrefunctor_id","line":100,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_id\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span> <span class=\"fn\">id</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor.id\">𝟭q</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L89-L93","name":"Quiver.SingleObj.toPrefunctor","line":89,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor","doc":"Prefunctors between two `SingleObj` quivers correspond to functions between the corresponding\narrows types.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">⥤q</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">β</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L88-L88","name":"Quiver.SingleObj.toPrefunctor_apply_map","line":88,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_apply_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_apply_map\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_apply_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>} (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span> <span class=\"fn\">f</span></span>)</span>.map <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L88-L88","name":"Quiver.SingleObj.toPrefunctor_apply_obj","line":88,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_apply_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_apply_obj\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_apply_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span> <span class=\"fn\">f</span></span>)</span>.obj <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#id\">id</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L88-L88","name":"Quiver.SingleObj.toPrefunctor_symm_apply","line":88,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_apply\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Prefunctor\">⥤q</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toPrefunctor</span>.symm</span> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.map <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toHom</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L79-L80","name":"Quiver.SingleObj.toHom","line":79,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom","doc":"The type of arrows from `star α` to itself is equivalent to the original type `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">Quiver.SingleObj.star</a> <span class=\"fn\">α</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L78-L78","name":"Quiver.SingleObj.toHom_apply","line":78,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom_apply\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toHom</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L78-L78","name":"Quiver.SingleObj.toHom_symm_apply","line":78,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom_symm_apply\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toHom_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Quiver.SingleObj.toHom</span>.symm</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L71-L74","name":"Quiver.SingleObj.hasInvolutiveReverse","line":71,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.hasInvolutiveReverse","doc":"Equip `SingleObj α` with an involutive reverse operation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.hasInvolutiveReverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">hasInvolutiveReverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rev : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Involutive\">Function.Involutive</a> <span class=\"fn\">rev</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\">Quiver.HasInvolutiveReverse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L65-L65","name":"Quiver.SingleObj.hasReverse","line":65,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.hasReverse","doc":"Equip `SingleObj α` with a reverse operation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.hasReverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">hasReverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(rev : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">Quiver.HasReverse</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L60-L60","name":"Quiver.SingleObj.ext","line":60,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.ext\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L55-L56","name":"Quiver.SingleObj.instInhabitedSingleObj","line":55,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.instInhabitedSingleObj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.instInhabitedSingleObj\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">instInhabitedSingleObj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L51-L52","name":"Quiver.SingleObj.star","line":51,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star","doc":"The single object in `SingleObj α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">star</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L47-L48","name":"Quiver.SingleObj.instQuiverSingleObj","line":47,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.instQuiverSingleObj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.instQuiverSingleObj\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">instQuiverSingleObj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L39-L41","name":"Quiver.instUniqueSingleObj","line":39,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.instUniqueSingleObj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.instUniqueSingleObj\"><span class=\"name\">Quiver</span>.<span class=\"name\">instUniqueSingleObj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">Quiver.SingleObj</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Quiver/SingleObj.lean#L34-L35","name":"Quiver.SingleObj","line":34,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj","doc":"Type tag on `Unit` used to define single-object quivers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a></span></div></div>"}]}