{"name":"Mathlib.Data.Stream.Init","instances":[{"typeNames":["Stream'"],"name":"Stream'.instInhabitedStream'","className":"Inhabited"}],"imports":["Init","Std.Tactic.Ext","Mathlib.Data.Stream.Defs","Mathlib.Logic.Function.Basic","Mathlib.Init.Data.List.Basic","Mathlib.Data.List.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L763-L765","name":"Stream'.nats_eq","line":763,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.nats_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.nats_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">nats_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.nats\">Stream'.nats</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.nats\">Stream'.nats</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L759-L760","name":"Stream'.get_nats","line":759,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_nats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_nats\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_nats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.nats\">Stream'.nats</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L755-L756","name":"Stream'.map_eq_apply","line":755,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_eq_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_eq_apply\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_eq_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.pure\">Stream'.pure</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L750-L752","name":"Stream'.interchange","line":750,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.interchange","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.interchange\"><span class=\"name\">Stream'</span>.<span class=\"name\">interchange</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(fs : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">fs</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.pure\">Stream'.pure</a> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.pure\">Stream'.pure</a> <span class=\"fn\">fun (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span>)</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\">fs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L746-L747","name":"Stream'.homomorphism","line":746,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.homomorphism","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.homomorphism\"><span class=\"name\">Stream'</span>.<span class=\"name\">homomorphism</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.pure\">Stream'.pure</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.pure\">Stream'.pure</a> <span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.pure\">Stream'.pure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L741-L743","name":"Stream'.composition","line":741,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.composition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.composition\"><span class=\"name\">Stream'</span>.<span class=\"name\">composition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.pure\">Stream'.pure</a> <span class=\"fn\">Function.comp</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\">g</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L737-L738","name":"Stream'.identity","line":737,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.identity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.identity\"><span class=\"name\">Stream'</span>.<span class=\"name\">identity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.pure\">Stream'.pure</a> <span class=\"fn\">id</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.apply\">⊛</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L731-L734","name":"Stream'.zip_inits_tails","line":731,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.zip_inits_tails","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.zip_inits_tails\"><span class=\"name\">Stream'</span>.<span class=\"name\">zip_inits_tails</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">Stream'.appendStream'</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.inits\">Stream'.inits</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tails\">Stream'.tails</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L722-L728","name":"Stream'.inits_eq","line":722,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.inits_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.inits_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">inits_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.inits\">Stream'.inits</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span>]</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">List.cons</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.inits\">Stream'.inits</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L714-L719","name":"Stream'.get_inits","line":714,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_inits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_inits\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_inits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.inits\">Stream'.inits</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L701-L710","name":"Stream'.cons_get_inits_core","line":701,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.cons_get_inits_core","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.cons_get_inits_core\"><span class=\"name\">Stream'</span>.<span class=\"name\">cons_get_inits_core</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.initsCore\">Stream'.initsCore</a> <span class=\"fn\">l</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.initsCore\">Stream'.initsCore</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L697-L698","name":"Stream'.inits_tail","line":697,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.inits_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.inits_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">inits_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.inits\">Stream'.inits</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.initsCore\">Stream'.initsCore</a> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>]</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L691-L694","name":"Stream'.tail_inits","line":691,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_inits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_inits\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_inits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.inits\">Stream'.inits</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.initsCore\">Stream'.initsCore</a> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>]</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L685-L688","name":"Stream'.inits_core_eq","line":685,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.inits_core_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.inits_core_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">inits_core_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.initsCore\">Stream'.initsCore</a> <span class=\"fn\">l</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">l</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.initsCore\">Stream'.initsCore</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span>]</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L681-L682","name":"Stream'.tails_eq_iterate","line":681,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tails_eq_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tails_eq_iterate\"><span class=\"name\">Stream'</span>.<span class=\"name\">tails_eq_iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tails\">Stream'.tails</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">Stream'.tail</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L673-L678","name":"Stream'.get_tails","line":673,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_tails","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_tails\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_tails</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tails\">Stream'.tails</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L668-L669","name":"Stream'.tails_eq","line":668,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tails_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tails_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">tails_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tails\">Stream'.tails</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tails\">Stream'.tails</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L664-L665","name":"Stream'.cycle_singleton","line":664,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.cycle_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.cycle_singleton\"><span class=\"name\">Stream'</span>.<span class=\"name\">cycle_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cycle\">Stream'.cycle</a> <span class=\"fn\">[<span class=\"fn\">a</span>]</span> <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">[<span class=\"fn\">a</span>]</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L659-L660","name":"Stream'.mem_cycle","line":659,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_cycle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_cycle\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_cycle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cycle\">Stream'.cycle</a> <span class=\"fn\">l</span> <span class=\"fn\">h</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L643-L656","name":"Stream'.cycle_eq","line":643,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.cycle_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.cycle_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">cycle_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">[]</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cycle\">Stream'.cycle</a> <span class=\"fn\">l</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cycle\">Stream'.cycle</a> <span class=\"fn\">l</span> <span class=\"fn\">h</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L638-L640","name":"Stream'.cycle_g_cons","line":638,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.cycle_g_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.cycle_g_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">cycle_g_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₀ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₀ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cycleG\">Stream'.cycleG</a> <span class=\"fn\">(<span class=\"fn\">a</span>, <span class=\"fn\"><span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l₁</span></span>, <span class=\"fn\">a₀</span>, <span class=\"fn\">l₀</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">a₁</span>, <span class=\"fn\">l₁</span>, <span class=\"fn\">a₀</span>, <span class=\"fn\">l₀</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L626-L635","name":"Stream'.take_theorem","line":626,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.take_theorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.take_theorem\"><span class=\"name\">Stream'</span>.<span class=\"name\">take_theorem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s₂</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L614-L621","name":"Stream'.append_take_drop","line":614,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.append_take_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.append_take_drop\"><span class=\"name\">Stream'</span>.<span class=\"name\">append_take_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L607-L611","name":"Stream'.dropLast_take","line":607,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.dropLast_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.dropLast_take\"><span class=\"name\">Stream'</span>.<span class=\"name\">dropLast_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{xs : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropLast\">List.dropLast</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">xs</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L602-L604","name":"Stream'.get?_take_succ","line":602,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get?_take_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get?_take_succ\"><span class=\"name\">Stream'</span>.<span class=\"name\">get?_take_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.get?\">List.get?</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L598-L600","name":"Stream'.get?_take","line":598,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get?_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get?_take\"><span class=\"name\">Stream'</span>.<span class=\"name\">get?_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{k : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/BasicAux.html#List.get?\">List.get?</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">k</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L595-L596","name":"Stream'.concat_take_get","line":595,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.concat_take_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.concat_take_get\"><span class=\"name\">Stream'</span>.<span class=\"name\">concat_take_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>]</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L590-L593","name":"Stream'.take_take","line":590,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.take_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.take_take\"><span class=\"name\">Stream'</span>.<span class=\"name\">take_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L585-L586","name":"Stream'.length_take","line":585,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.length_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.length_take\"><span class=\"name\">Stream'</span>.<span class=\"name\">length_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L580-L582","name":"Stream'.take_succ'","line":580,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.take_succ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.take_succ'\"><span class=\"name\">Stream'</span>.<span class=\"name\">take_succ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>]</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L578-L578","name":"Stream'.take_succ_cons","line":578,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.take_succ_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.take_succ_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">take_succ_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L574-L575","name":"Stream'.take_succ","line":574,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.take_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.take_succ\"><span class=\"name\">Stream'</span>.<span class=\"name\">take_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L567-L568","name":"Stream'.take_zero","line":567,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.take_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.take_zero\"><span class=\"name\">Stream'</span>.<span class=\"name\">take_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.take\">Stream'.take</a> <span class=\"fn\">0</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">[]</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L559-L563","name":"Stream'.mem_append_stream_left","line":559,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_append_stream_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_append_stream_left\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_append_stream_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L552-L556","name":"Stream'.mem_append_stream_right","line":552,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_append_stream_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_append_stream_right\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_append_stream_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L548-L549","name":"Stream'.append_stream_head_tail","line":548,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.append_stream_head_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.append_stream_head_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">append_stream_head_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span>]</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L542-L545","name":"Stream'.drop_append_stream","line":542,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.drop_append_stream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.drop_append_stream\"><span class=\"name\">Stream'</span>.<span class=\"name\">drop_append_stream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L535-L539","name":"Stream'.map_append_stream","line":535,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_append_stream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_append_stream\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_append_stream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L528-L532","name":"Stream'.append_append_stream","line":528,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.append_append_stream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.append_append_stream\"><span class=\"name\">Stream'</span>.<span class=\"name\">append_append_stream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(l₁ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l₂ : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l₂</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L523-L525","name":"Stream'.cons_append_stream","line":523,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.cons_append_stream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.cons_append_stream\"><span class=\"name\">Stream'</span>.<span class=\"name\">cons_append_stream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L519-L520","name":"Stream'.nil_append_stream","line":519,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.nil_append_stream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.nil_append_stream\"><span class=\"name\">Stream'</span>.<span class=\"name\">nil_append_stream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">[]</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.appendStream'\">++ₛ</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L515-L516","name":"Stream'.mem_of_mem_odd","line":515,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_of_mem_odd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_of_mem_odd\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_of_mem_odd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.odd\">Stream'.odd</a> <span class=\"fn\">s</span></span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L511-L512","name":"Stream'.mem_of_mem_even","line":511,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_of_mem_even","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_of_mem_even\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_of_mem_even</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">s</span></span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L507-L508","name":"Stream'.get_odd","line":507,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_odd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_odd\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_odd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.odd\">Stream'.odd</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L500-L504","name":"Stream'.get_even","line":500,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_even","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_even\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_even</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L491-L497","name":"Stream'.interleave_even_odd","line":491,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.interleave_even_odd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.interleave_even_odd\"><span class=\"name\">Stream'</span>.<span class=\"name\">interleave_even_odd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">s₁</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.odd\">Stream'.odd</a> <span class=\"fn\">s₁</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L481-L488","name":"Stream'.even_interleave","line":481,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.even_interleave","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.even_interleave\"><span class=\"name\">Stream'</span>.<span class=\"name\">even_interleave</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\">s₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L477-L478","name":"Stream'.even_tail","line":477,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.even_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.even_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">even_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.odd\">Stream'.odd</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L472-L474","name":"Stream'.even_cons_cons","line":472,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.even_cons_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.even_cons_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">even_cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a₁ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a₂ : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a₁</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a₂</span> <span class=\"fn\">s</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a₁</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L466-L469","name":"Stream'.tail_even","line":466,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_even","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_even\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_even</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L462-L463","name":"Stream'.head_even","line":462,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.head_even","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.head_even\"><span class=\"name\">Stream'</span>.<span class=\"name\">head_even</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L457-L458","name":"Stream'.odd_eq","line":457,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.odd_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.odd_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">odd_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.odd\">Stream'.odd</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.even\">Stream'.even</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L453-L454","name":"Stream'.mem_interleave_right","line":453,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_interleave_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_interleave_right\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_interleave_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s₂</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\">s₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L449-L450","name":"Stream'.mem_interleave_left","line":449,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_interleave_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_interleave_left\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_interleave_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s₁</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\">s₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L439-L446","name":"Stream'.get_interleave_right","line":439,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_interleave_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_interleave_right\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_interleave_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\">s₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s₂</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L429-L436","name":"Stream'.get_interleave_left","line":429,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_interleave_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_interleave_left\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_interleave_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\">s₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s₁</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L425-L426","name":"Stream'.interleave_tail_tail","line":425,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.interleave_tail_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.interleave_tail_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">interleave_tail_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₁</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₂</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\">s₂</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L421-L422","name":"Stream'.tail_interleave","line":421,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_interleave","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_interleave\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_interleave</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\">s₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₂</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₁</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L415-L418","name":"Stream'.interleave_eq","line":415,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.interleave_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.interleave_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">interleave_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₂</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₁</span></span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.interleave\">⋈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₂</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L411-L412","name":"Stream'.unfolds_head_eq","line":411,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.unfolds_head_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.unfolds_head_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">unfolds_head_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.unfolds\">Stream'.unfolds</a> <span class=\"fn\">Stream'.head</span> <span class=\"fn\">Stream'.tail</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L402-L408","name":"Stream'.get_unfolds_head_tail","line":402,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_unfolds_head_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_unfolds_head_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_unfolds_head_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.unfolds\">Stream'.unfolds</a> <span class=\"fn\">Stream'.head</span> <span class=\"fn\">Stream'.tail</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L398-L399","name":"Stream'.unfolds_eq","line":398,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.unfolds_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.unfolds_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">unfolds_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.unfolds\">Stream'.unfolds</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.unfolds\">Stream'.unfolds</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L392-L393","name":"Stream'.corec'_eq","line":392,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.corec'_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.corec'_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">corec'_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.corec'\">Stream'.corec'</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span>.1</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.corec'\">Stream'.corec'</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span>.2</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L384-L385","name":"Stream'.corec_id_f_eq_iterate","line":384,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.corec_id_f_eq_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.corec_id_f_eq_iterate\"><span class=\"name\">Stream'</span>.<span class=\"name\">corec_id_f_eq_iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.corec\">Stream'.corec</a> <span class=\"fn\">id</span> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L380-L381","name":"Stream'.corec_id_id_eq_const","line":380,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.corec_id_id_eq_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.corec_id_id_eq_const\"><span class=\"name\">Stream'</span>.<span class=\"name\">corec_id_id_eq_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.corec\">Stream'.corec</a> <span class=\"fn\">id</span> <span class=\"fn\">id</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L376-L377","name":"Stream'.corec_eq","line":376,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.corec_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.corec_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">corec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.corec\">Stream'.corec</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.corec\">Stream'.corec</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L372-L373","name":"Stream'.corec_def","line":372,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.corec_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.corec_def\"><span class=\"name\">Stream'</span>.<span class=\"name\">corec_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.corec\">Stream'.corec</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">g</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L360-L367","name":"Stream'.map_iterate","line":360,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_iterate\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L356-L357","name":"Stream'.iterate_id","line":356,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.iterate_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.iterate_id\"><span class=\"name\">Stream'</span>.<span class=\"name\">iterate_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">id</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L335-L352","name":"Stream'.coinduction","line":335,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.coinduction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.coinduction\"><span class=\"name\">Stream'</span>.<span class=\"name\">coinduction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₂</span></span></span> →\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u) (<span class=\"fn\">fr</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">β</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">fr</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">fr</span> <span class=\"fn\">s₂</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">fr</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₁</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">fr</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₂</span></span>)</span></span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L326-L332","name":"Stream'.bisim_simple","line":326,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.bisim_simple","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.bisim_simple\"><span class=\"name\">Stream'</span>.<span class=\"name\">bisim_simple</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₂</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₁</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₂</span></span></span> → <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L320-L321","name":"Stream'.eq_of_bisim","line":320,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.eq_of_bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.eq_of_bisim\"><span class=\"name\">Stream'</span>.<span class=\"name\">eq_of_bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bisim : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Init.html#Stream'.IsBisimulation\">Stream'.IsBisimulation</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span> → <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L311-L316","name":"Stream'.get_of_bisim","line":311,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_of_bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_of_bisim\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_of_bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(bisim : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Init.html#Stream'.IsBisimulation\">Stream'.IsBisimulation</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s₁</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s₂</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">s₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">s₂</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L306-L308","name":"Stream'.IsBisimulation","line":306,"kind":"def","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.IsBisimulation","doc":"Streams `s₁` and `s₂` are defined to be bisimulations if\ntheir heads are equal and tails are bisimulations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.IsBisimulation\"><span class=\"name\">Stream'</span>.<span class=\"name\">IsBisimulation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L293-L294","name":"Stream'.get_succ_iterate","line":293,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_succ_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_succ_iterate\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_succ_iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span>)</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L289-L290","name":"Stream'.get_zero_iterate","line":289,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_zero_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_zero_iterate\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_zero_iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L283-L285","name":"Stream'.iterate_eq","line":283,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.iterate_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.iterate_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">iterate_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L275-L280","name":"Stream'.tail_iterate","line":275,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_iterate\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L272-L273","name":"Stream'.get_succ_iterate'","line":272,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_succ_iterate'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_succ_iterate'\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_succ_iterate'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L268-L269","name":"Stream'.head_iterate","line":268,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.head_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.head_iterate\"><span class=\"name\">Stream'</span>.<span class=\"name\">head_iterate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.iterate\">Stream'.iterate</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L263-L264","name":"Stream'.drop_const","line":263,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.drop_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.drop_const\"><span class=\"name\">Stream'</span>.<span class=\"name\">drop_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L258-L259","name":"Stream'.get_const","line":258,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_const\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L253-L254","name":"Stream'.map_const","line":253,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_const\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L247-L249","name":"Stream'.tail_const","line":247,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_const\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L241-L243","name":"Stream'.const_eq","line":241,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.const_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.const_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">const_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L237-L238","name":"Stream'.mem_const","line":237,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_const\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.const\">Stream'.const</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L230-L231","name":"Stream'.enum_eq_zip","line":230,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.enum_eq_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.enum_eq_zip\"><span class=\"name\">Stream'</span>.<span class=\"name\">enum_eq_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.enum\">Stream'.enum</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">Prod.mk</span> <a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.nats\">Stream'.nats</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L226-L227","name":"Stream'.get_enum","line":226,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_enum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_enum\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_enum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.enum\">Stream'.enum</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">n</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L220-L222","name":"Stream'.zip_eq","line":220,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.zip_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.zip_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">zip_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">f</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₂</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₂</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L215-L217","name":"Stream'.tail_zip","line":215,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_zip\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">f</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L211-L212","name":"Stream'.head_zip","line":211,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.head_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.head_zip\"><span class=\"name\">Stream'</span>.<span class=\"name\">head_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">f</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L206-L208","name":"Stream'.get_zip","line":206,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_zip\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">f</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s₁</span> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s₂</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L200-L202","name":"Stream'.drop_zip","line":200,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.drop_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.drop_zip\"><span class=\"name\">Stream'</span>.<span class=\"name\">drop_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">f</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.zip\">Stream'.zip</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">s₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">s₂</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L190-L191","name":"Stream'.exists_of_mem_map","line":190,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.exists_of_mem_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.exists_of_mem_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">exists_of_mem_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span> → <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L186-L187","name":"Stream'.mem_map","line":186,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L182-L183","name":"Stream'.map_tail","line":182,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L177-L178","name":"Stream'.map_map","line":177,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{δ : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L172-L173","name":"Stream'.map_id","line":172,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_id\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">id</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L167-L168","name":"Stream'.map_cons","line":167,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L163-L164","name":"Stream'.map_eq","line":163,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.map_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.map_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">map_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L159-L160","name":"Stream'.head_map","line":159,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.head_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.head_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">head_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L155-L155","name":"Stream'.tail_map","line":155,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L151-L152","name":"Stream'.get_map","line":151,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L146-L147","name":"Stream'.drop_map","line":146,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.drop_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.drop_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">drop_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.map\">Stream'.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L138-L139","name":"Stream'.mem_of_get_eq","line":138,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_of_get_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_of_get_eq\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_of_get_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L128-L135","name":"Stream'.eq_or_mem_of_mem_cons","line":128,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.eq_or_mem_of_mem_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.eq_or_mem_of_mem_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">eq_or_mem_of_mem_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L124-L125","name":"Stream'.mem_cons_of_mem","line":124,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_cons_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_cons_of_mem\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_cons_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(b : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L120-L121","name":"Stream'.mem_cons","line":120,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.mem_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.mem_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">mem_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L115-L116","name":"Stream'.any_def","line":115,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.any_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.any_def\"><span class=\"name\">Stream'</span>.<span class=\"name\">any_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.Any\">Stream'.Any</a> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L111-L112","name":"Stream'.all_def","line":111,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.all_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.all_def\"><span class=\"name\">Stream'</span>.<span class=\"name\">all_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.All\">Stream'.All</a> <span class=\"fn\">p</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L107-L108","name":"Stream'.cons_injective_right","line":107,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.cons_injective_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.cons_injective_right\"><span class=\"name\">Stream'</span>.<span class=\"name\">cons_injective_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L103-L104","name":"Stream'.cons_injective_left","line":103,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.cons_injective_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.cons_injective_left\"><span class=\"name\">Stream'</span>.<span class=\"name\">cons_injective_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L98-L100","name":"Stream'.cons_injective2","line":98,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.cons_injective2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.cons_injective2\"><span class=\"name\">Stream'</span>.<span class=\"name\">cons_injective2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Injective2\">Function.Injective2</a> <span class=\"fn\">Stream'.cons</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L95-L95","name":"Stream'.head_drop","line":95,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.head_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.head_drop\"><span class=\"name\">Stream'</span>.<span class=\"name\">head_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">a</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L91-L92","name":"Stream'.drop_succ","line":91,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.drop_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.drop_succ\"><span class=\"name\">Stream'</span>.<span class=\"name\">drop_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L89-L89","name":"Stream'.drop_zero","line":89,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.drop_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.drop_zero\"><span class=\"name\">Stream'</span>.<span class=\"name\">drop_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">0</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L85-L86","name":"Stream'.get_succ_cons","line":85,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_succ_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_succ_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_succ_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L80-L81","name":"Stream'.get_succ","line":80,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_succ\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L77-L77","name":"Stream'.tail_drop","line":77,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_drop\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L75-L75","name":"Stream'.drop_tail'","line":75,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.drop_tail'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.drop_tail'\"><span class=\"name\">Stream'</span>.<span class=\"name\">drop_tail'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L72-L73","name":"Stream'.tail_drop'","line":72,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_drop'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_drop'\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_drop'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">i</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L70-L70","name":"Stream'.get_tail","line":70,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L66-L67","name":"Stream'.drop_drop","line":66,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.drop_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.drop_drop\"><span class=\"name\">Stream'</span>.<span class=\"name\">drop_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">m</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span>)</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L61-L62","name":"Stream'.tail_eq_drop","line":61,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_eq_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_eq_drop\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_eq_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">1</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L57-L58","name":"Stream'.get_drop","line":57,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_drop\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(m : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.drop\">Stream'.drop</a> <span class=\"fn\">m</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L52-L53","name":"Stream'.tail_cons","line":52,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.tail_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.tail_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">tail_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L47-L48","name":"Stream'.head_cons","line":47,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.head_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.head_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">head_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L42-L43","name":"Stream'.get_zero_cons","line":42,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.get_zero_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.get_zero_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">get_zero_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L37-L38","name":"Stream'.ext","line":37,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.ext\"><span class=\"name\">Stream'</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₁ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{s₂ : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s₁</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.get\">Stream'.get</a> <span class=\"fn\">s₂</span> <span class=\"fn\">n</span></span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L32-L33","name":"Stream'.eta","line":32,"kind":"theorem","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.eta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.eta\"><span class=\"name\">Stream'</span>.<span class=\"name\">eta</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(s : <span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.cons\">Stream'.cons</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.head\">Stream'.head</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'.tail\">Stream'.tail</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Stream/Init.lean#L29-L30","name":"Stream'.instInhabitedStream'","line":29,"kind":"instance","docLink":"./Mathlib/Data/Stream/Init.html#Stream'.instInhabitedStream'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Stream/Init.html#Stream'.instInhabitedStream'\"><span class=\"name\">Stream'</span>.<span class=\"name\">instInhabitedStream'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"}]}