{"name":"Std.Tactic.Simpa","instances":[{"typeNames":["Lean.Elab.Term.UseImplicitLambdaResult"],"name":"Std.Tactic.Simpa.instReprUseImplicitLambdaResult","className":"Repr"}],"imports":["Init","Lean.Meta.Tactic.Assumption","Lean.Elab.Tactic.Simp","Lean.Linter.Util","Std.Lean.LocalContext","Std.Lean.Parser","Std.Tactic.OpenPrivate","Std.Tactic.TryThis"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Simpa.lean#L114-L114","name":"Std.Tactic.Simpa.instReprUseImplicitLambdaResult","line":114,"kind":"instance","docLink":"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.instReprUseImplicitLambdaResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.instReprUseImplicitLambdaResult\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simpa</span>.<span class=\"name\">instReprUseImplicitLambdaResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.UseImplicitLambdaResult\">Lean.Elab.Term.UseImplicitLambdaResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Simpa.lean#L111-L112","name":"Std.Tactic.Simpa.getLinterUnnecessarySimpa","line":111,"kind":"def","docLink":"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.getLinterUnnecessarySimpa","doc":"Gets the value of the `linter.unnecessarySimpa` option. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.getLinterUnnecessarySimpa\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simpa</span>.<span class=\"name\">getLinterUnnecessarySimpa</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Simpa.lean#L51-L52","name":"Std.Tactic.Simpa.tacticSimpa?!_","line":51,"kind":"def","docLink":"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.tacticSimpa?!_","doc":"This is a \"finishing\" tactic modification of `simp`. It has two forms.\n\n* `simpa [rules, ⋯] using e` will simplify the goal and the type of\n`e` using `rules`, then try to close the goal using `e`.\n\nSimplifying the type of `e` makes it more likely to match the goal\n(which has also been simplified). This construction also tends to be\nmore robust under changes to the simp lemma set.\n\n* `simpa [rules, ⋯]` will simplify the goal and the type of a\nhypothesis `this` if present in the context, then try to close the goal using\nthe `assumption` tactic.\n\n#TODO: implement `?`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.tacticSimpa?!_\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simpa</span>.<span class=\"name\">tacticSimpa?!_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Simpa.lean#L49-L50","name":"Std.Tactic.Simpa.tacticSimpa?_","line":49,"kind":"def","docLink":"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.tacticSimpa?_","doc":"This is a \"finishing\" tactic modification of `simp`. It has two forms.\n\n* `simpa [rules, ⋯] using e` will simplify the goal and the type of\n`e` using `rules`, then try to close the goal using `e`.\n\nSimplifying the type of `e` makes it more likely to match the goal\n(which has also been simplified). This construction also tends to be\nmore robust under changes to the simp lemma set.\n\n* `simpa [rules, ⋯]` will simplify the goal and the type of a\nhypothesis `this` if present in the context, then try to close the goal using\nthe `assumption` tactic.\n\n#TODO: implement `?`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.tacticSimpa?_\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simpa</span>.<span class=\"name\">tacticSimpa?_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Simpa.lean#L47-L48","name":"Std.Tactic.Simpa.tacticSimpa!_","line":47,"kind":"def","docLink":"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.tacticSimpa!_","doc":"This is a \"finishing\" tactic modification of `simp`. It has two forms.\n\n* `simpa [rules, ⋯] using e` will simplify the goal and the type of\n`e` using `rules`, then try to close the goal using `e`.\n\nSimplifying the type of `e` makes it more likely to match the goal\n(which has also been simplified). This construction also tends to be\nmore robust under changes to the simp lemma set.\n\n* `simpa [rules, ⋯]` will simplify the goal and the type of a\nhypothesis `this` if present in the context, then try to close the goal using\nthe `assumption` tactic.\n\n#TODO: implement `?`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.tacticSimpa!_\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simpa</span>.<span class=\"name\">tacticSimpa!_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Simpa.lean#L30-L46","name":"Std.Tactic.Simpa.simpa","line":30,"kind":"def","docLink":"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.simpa","doc":"This is a \"finishing\" tactic modification of `simp`. It has two forms.\n\n* `simpa [rules, ⋯] using e` will simplify the goal and the type of\n`e` using `rules`, then try to close the goal using `e`.\n\nSimplifying the type of `e` makes it more likely to match the goal\n(which has also been simplified). This construction also tends to be\nmore robust under changes to the simp lemma set.\n\n* `simpa [rules, ⋯]` will simplify the goal and the type of a\nhypothesis `this` if present in the context, then try to close the goal using\nthe `assumption` tactic.\n\n#TODO: implement `?`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.simpa\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simpa</span>.<span class=\"name\">simpa</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Simpa.lean#L27-L28","name":"Std.Tactic.Simpa.simpaArgsRest","line":27,"kind":"def","docLink":"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.simpaArgsRest","doc":"The arguments to the `simpa` family tactics. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Simpa.html#Std.Tactic.Simpa.simpaArgsRest\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simpa</span>.<span class=\"name\">simpaArgsRest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Simpa.lean#L14-L21","name":"linter.unnecessarySimpa","line":14,"kind":"opaque","docLink":"./Std/Tactic/Simpa.html#linter.unnecessarySimpa","doc":"Enables the 'unnecessary `simpa`' linter. This will report if a use of\n`simpa` could be proven using `simp` or `simp at h` instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Simpa.html#linter.unnecessarySimpa\"><span class=\"name\">linter</span>.<span class=\"name\">unnecessarySimpa</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}