{"name":"Std.Lean.Name","instances":[],"imports":["Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Name.lean#L28-L35","name":"Lean.Name.isInternalDetail","line":28,"kind":"def","docLink":"./Std/Lean/Name.html#Lean.Name.isInternalDetail","doc":"Returns true if this a part of name that is internal or dynamically\ngenerated so that it may easily be changed.\n\nGenerally, user code should not explicitly use internal names.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Name.html#Lean.Name.isInternalDetail\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isInternalDetail</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Name.lean#L17-L20","name":"Lean.Name.isInternalOrNum","line":17,"kind":"def","docLink":"./Std/Lean/Name.html#Lean.Name.isInternalOrNum","doc":"The frontend does not allow user declarations to start with `_` in any of its parts.\nWe use name parts starting with `_` internally to create auxiliary names (e.g., `_private`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Name.html#Lean.Name.isInternalOrNum\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isInternalOrNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Name.lean#L10-L13","name":"Lean.Name.hasNum","line":10,"kind":"def","docLink":"./Std/Lean/Name.html#Lean.Name.hasNum","doc":"Returns true if the name has any numeric components. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Name.html#Lean.Name.hasNum\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">hasNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}