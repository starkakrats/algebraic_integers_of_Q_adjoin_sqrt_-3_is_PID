{"name":"Mathlib.Lean.Expr.Basic","instances":[],"imports":["Init","Lean.Meta.Tactic.Rewrite","Std.Lean.Expr","Std.Data.Rat.Basic","Std.Data.List.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L490-L492","name":"Lean.getFieldsToParents","line":490,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.getFieldsToParents","doc":"Get the projections that are projections to parent structures. Similar to `getParentStructures`,\nexcept that this returns the (last component of the) projection names instead of the parent names.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.getFieldsToParents\"><span class=\"name\">Lean</span>.<span class=\"name\">getFieldsToParents</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(env : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(structName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L467-L483","name":"Lean.Expr.forallNot_of_notExists.go","line":467,"kind":"opaque","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.forallNot_of_notExists.go","doc":"Given `(hNotEx : Not (@Exists.{lvl} A p))`,\nreturn a `forall x, Not (p x)` and a proof for it.\n\nThis function handles nested existentials. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.forallNot_of_notExists.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">forallNot_of_notExists</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lvl : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hNotEx : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L459-L483","name":"Lean.Expr.forallNot_of_notExists","line":459,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.forallNot_of_notExists","doc":"Given `(hNotEx : Not ex)` where `ex` is of the form `Exists x, p x`,\nreturn a `forall x, Not (p x)` and a proof for it.\n\nThis function handles nested existentials. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.forallNot_of_notExists\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">forallNot_of_notExists</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ex : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hNotEx : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L452-L453","name":"Lean.Expr.rewriteType","line":452,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.rewriteType","doc":"Rewrites the type of `e` via some `eq`, then moves `e` into the new type via `Eq.mp`.\n\nRewrites with a fresh metavariable as the ambient goal.\nFails if the rewrite produces any subgoals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.rewriteType\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">rewriteType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L441-L444","name":"Lean.Expr.rewrite","line":441,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.rewrite","doc":"Rewrites `e` via some `eq`, producing a proof `e = e'` for some `e'`.\n\nRewrites with a fresh metavariable as the ambient goal.\nFails if the rewrite produces any subgoals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.rewrite\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">rewrite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(eq : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L432-L433","name":"Lean.Expr.containsConst","line":432,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.containsConst","doc":"Returns true if `e` contains a name `n` where `p n` is true. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.containsConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">containsConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L410-L429","name":"Lean.Expr.reduceProjStruct?","line":410,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.reduceProjStruct?","doc":"If `e` is a projection of the structure constructor, reduce the projection.\nOtherwise returns `none`. If this function detects that expression is ill-typed, throws an error.\nFor example, given `Prod.fst (x, y)`, returns `some x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.reduceProjStruct?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">reduceProjStruct?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L395-L405","name":"Lean.Expr.mkProjection","line":395,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.mkProjection","doc":"If `e` has a structure as type with field `fieldName` (either directly or in a parent\nstructure), `mkProjection e fieldName` creates the projection expression `e.fieldName` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.mkProjection\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mkProjection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fieldName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L386-L391","name":"Lean.Expr.mkDirectProjection","line":386,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.mkDirectProjection","doc":"If `e` has a structure as type with field `fieldName`, `mkDirectProjection e fieldName` creates\nthe projection expression `e.fieldName` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.mkDirectProjection\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mkDirectProjection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(fieldName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L376-L382","name":"Lean.Expr.addLocalVarInfoForBinderIdent","line":376,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.addLocalVarInfoForBinderIdent","doc":"Annotates a `binderIdent` with the binder information from an `fvar`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.addLocalVarInfoForBinderIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">addLocalVarInfoForBinderIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(fvar : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tk : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.binderIdent</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L369-L372","name":"Lean.Expr.getBinderName","line":369,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getBinderName","doc":"`getBinderName e` returns `some n` if `e` is an expression of the form `∀ n, ...`\nand `none` otherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getBinderName\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getBinderName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L357-L364","name":"Lean.Expr.renameBVar","line":357,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.renameBVar","doc":"Traverses an expression `e` and renames bound variables named `old` to `new`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.renameBVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">renameBVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(old : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(new : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L350-L354","name":"Lean.Expr.modifyArgM","line":350,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyArgM","doc":"Given `f a₀ a₁ ... aₙ₋₁`, runs `modifier` on the `i`th argument.\nAn argument `n` may be provided which says how many arguments we are expecting `e` to have. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyArgM\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">modifyArgM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(modifier : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr.getAppNumArgs\">Lean.Expr.getAppNumArgs</a> <span class=\"fn\">e</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L345-L346","name":"Lean.Expr.getArg?","line":345,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getArg?","doc":"Given `f a₀ a₁ ... aₙ₋₁`, returns the `i`th argument or none if out of bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getArg?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getArg?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr.getAppNumArgs\">Lean.Expr.getAppNumArgs</a> <span class=\"fn\">e</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L339-L342","name":"Lean.Expr.getRevArg?","line":339,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getRevArg?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getRevArg?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getRevArg?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L336-L337","name":"Lean.Expr.modifyArg","line":336,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyArg","doc":"Given `f a₀ a₁ ... aₙ₋₁`, runs `modifier` on the `i`th argument or\nreturns the original expression if out of bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">modifyArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(modifier : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr.getAppNumArgs\">Lean.Expr.getAppNumArgs</a> <span class=\"fn\">e</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L330-L332","name":"Lean.Expr.modifyRevArg","line":330,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyRevArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyRevArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">modifyRevArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(modifier : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L327-L328","name":"Lean.Expr.modifyAppArg","line":327,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyAppArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyAppArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">modifyAppArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(modifier : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L323-L325","name":"Lean.Expr.modifyAppArgM","line":323,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyAppArgM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.modifyAppArgM\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">modifyAppArgM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(modifier : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L313-L319","name":"Lean.Expr.sides?","line":313,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.sides?","doc":"Given a proposition `ty` that is an `Eq`, `Iff`, or `HEq`, returns `(tyLhs, lhs, tyRhs, rhs)`,\nwhere `lhs : tyLhs` and `rhs : tyRhs`,\nand where `lhs` is related to `rhs` by the respective relation.\n\nSee also `Lean.Expr.iff?`, `Lean.Expr.eq?`, and `Lean.Expr.heq?`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.sides?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">sides?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L304-L306","name":"Lean.Expr.le?","line":304,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.le?","doc":"`Lean.Expr.le? e` takes `e : Expr` as input.\nIf `e` represents `a ≤ b`, then it returns `some (t, a, b)`, where `t` is the Type of `a`,\notherwise, it returns `none`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.le?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">le?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L298-L299","name":"Lean.Expr.ne?'","line":298,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ne?'","doc":"Tests is if an expression matches either `x ≠ y` or `¬ (x = y)`.\nIf it matches, returns `some (type, x, y)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ne?'\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ne?'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L291-L294","name":"Lean.Expr.zero?","line":291,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.zero?","doc":"Test if an expression is either `Nat.zero`, or `OfNat.ofNat 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.zero?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">zero?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L278-L288","name":"Lean.Expr.numeral?","line":278,"kind":"opaque","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.numeral?","doc":"Return `some n` if `e` is one of the following\n- A nat literal (numeral)\n- `Nat.zero`\n- `Nat.succ x` where `isNumeral x`\n- `OfNat.ofNat _ x _` where `isNumeral x` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.numeral?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">numeral?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L266-L268","name":"Lean.Expr.ofInt","line":266,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ofInt","doc":"Construct the term of type `α` for a given integer\n(doing typeclass search for the `OfNat` and `Neg` instances required). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ofInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L261-L262","name":"Lean.Expr.ofNat","line":261,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ofNat","doc":"Construct the term of type `α` for a given natural number\n(doing typeclass search for the `OfNat` instance required). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ofNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L254-L257","name":"Lean.Expr.ensureHasNoMVars","line":254,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ensureHasNoMVars","doc":"Check that an expression contains no metavariables (after instantiation). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.ensureHasNoMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ensureHasNoMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L246-L248","name":"Lean.Expr.letDepth","line":246,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.letDepth","doc":"Counts the immediate depth of a nested `let` expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.letDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">letDepth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L240-L243","name":"Lean.Expr.isConstantApplication.aux","line":240,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.isConstantApplication.aux","doc":"`aux depth e n` checks whether the body of the `n`-th lambda of `e` has loose bvar\n`depth - 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.isConstantApplication.aux\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isConstantApplication</span>.<span class=\"name\">aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(depth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L235-L243","name":"Lean.Expr.isConstantApplication","line":235,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.isConstantApplication","doc":"`isConstantApplication e` checks whether `e` is syntactically an application of the form\n`(fun x₁ ⋯ xₙ => H) y₁ ⋯ yₙ` where `H` does not contain the variable `xₙ`. In other words,\nit does a syntactic check that the expression does not depend on `yₙ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.isConstantApplication\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isConstantApplication</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L228-L230","name":"Lean.Expr.type?","line":228,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.type?","doc":"If an `Expr` has the form `Type u`, then return `some u`, otherwise `none`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.type?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">type?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L223-L225","name":"Lean.Expr.fvarId?","line":223,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.fvarId?","doc":"If an `Expr` has form `.fvar n`, then returns `some n`, otherwise `none`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.fvarId?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">fvarId?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L217-L220","name":"Lean.Expr.isExplicitNumber","line":217,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.isExplicitNumber","doc":"Test if an expression represents an explicit number written in normal form:\n* A \"natural number in normal form\" is an expression `OfNat.ofNat n`, even if it is not of type `ℕ`,\n  as long as `n` is a literal.\n* An \"integer in normal form\" is an expression which is either a natural number in number form,\n  or `-n`, where `n` is a natural number in normal form.\n* A \"rational in normal form\" is an expressions which is either an integer in normal form,\n  or `n / d` where `n` is an integer in normal form, `d` is a natural number in normal form,\n  `d ≠ 1`, and `n` and `d` are coprime (in particular, we check that `(mkRat n d).den = d`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.isExplicitNumber\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isExplicitNumber</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L196-L205","name":"Lean.Expr.rat?","line":196,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.rat?","doc":"Check if an expression is a \"rational in normal form\",\ni.e. either an integer number in normal form,\nor `n / d` where `n` is an integer in normal form, `d` is a natural number in normal form,\n`d ≠ 1`, and `n` and `d` are coprime (in particular, we check that `(mkRat n d).den = d`).\nIf so returns the rational number.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.rat?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">rat?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L184-L187","name":"Lean.Expr.getAppApps","line":184,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getAppApps","doc":"Given `f a b c`, return `#[f a, f a b, f a b c]`.\nEach entry in the array is an `Expr.app`,\nand this array has the same length as the one returned by `Lean.Expr.getAppArgs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.getAppApps\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">getAppApps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L171-L173","name":"Lean.Expr.bvarIdx?","line":171,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.bvarIdx?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Expr.bvarIdx?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">bvarIdx?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L164-L165","name":"Lean.mkConst'","line":164,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.mkConst'","doc":"Same as `mkConst`, but with fresh level metavariables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.mkConst'\"><span class=\"name\">Lean</span>.<span class=\"name\">mkConst'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(constName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L149-L157","name":"Lean.ConstantInfo.toDeclaration!","line":149,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.toDeclaration!","doc":"Turn a `ConstantInfo` into a declaration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.toDeclaration!\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">toDeclaration!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <a href=\"./Lean/Declaration.html#Lean.Declaration\">Lean.Declaration</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L142-L146","name":"Lean.ConstantInfo.updateValue","line":142,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateValue","doc":"Update the value of a `ConstantInfo`, if it has one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateValue\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">updateValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L137-L139","name":"Lean.ConstantInfo.updateLevelParams","line":137,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateLevelParams","doc":"Update the level parameters of a `ConstantInfo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateLevelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">updateLevelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(levelParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L133-L134","name":"Lean.ConstantInfo.updateType","line":133,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateType","doc":"Update the type of a `ConstantInfo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateType\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">updateType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(type : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L129-L130","name":"Lean.ConstantInfo.updateName","line":129,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateName","doc":"Update the name of a `ConstantInfo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateName\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">updateName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(name : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L118-L126","name":"Lean.ConstantInfo.updateConstantVal","line":118,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateConstantVal","doc":"Update `ConstantVal` (the data common to all constructors of `ConstantInfo`)\nin a `ConstantInfo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.updateConstantVal\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">updateConstantVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantVal\">Lean.ConstantVal</a> → <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L112-L114","name":"Lean.ConstantInfo.isThm","line":112,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.isThm","doc":"Checks whether this `ConstantInfo` is a theorem, "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.isThm\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">isThm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L107-L109","name":"Lean.ConstantInfo.isDef","line":107,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.isDef","doc":"Checks whether this `ConstantInfo` is a definition, "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.ConstantInfo.isDef\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">isDef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">Lean.ConstantInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L92-L100","name":"Lean.Name.isBlackListed","line":92,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.isBlackListed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Name.isBlackListed\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isBlackListed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L81-L87","name":"Lean.Name.isPrefixOf?","line":81,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.isPrefixOf?","doc":"`isPrefixOf? pre nm` returns `some post` if `nm = pre ++ post`.\nNote that this includes the case where `nm` has multiple more namespaces.\nIf `pre` is not a prefix of `nm`, it returns `none`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Name.isPrefixOf?\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isPrefixOf?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(pre : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(nm : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L74-L76","name":"Lean.Name.splitAt","line":74,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.splitAt","doc":"`nm.splitAt n` splits a name `nm` in two parts, such that the *second* part has depth `n`, i.e.\n`(nm.splitAt n).2.getNumParts = n` (assuming `nm.getNumParts ≥ n`).\nExample: ``splitAt `foo.bar.baz.back.bat 1 = (`foo.bar.baz.back, `bat)``. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Name.splitAt\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">splitAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(nm : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L66-L69","name":"Lean.Name.getString","line":66,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.getString","doc":"Get the last field of a name as a string.\nDoesn't raise an error when the last component is a numeric field. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Name.getString\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">getString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L60-L62","name":"Lean.Name.updateLast","line":60,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.updateLast","doc":"Update the last component of a name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Name.updateLast\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">updateLast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L55-L57","name":"Lean.Name.fromComponents.go","line":55,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.fromComponents.go","doc":"Auxiliary for `Name.fromComponents` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Name.fromComponents.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">fromComponents</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L53-L57","name":"Lean.Name.fromComponents","line":53,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.fromComponents","doc":"Build a name from components. For example ``from_components [`foo, `bar]`` becomes\n``` `foo.bar```.\nIt is the inverse of `Name.components` on list of names that have single components. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Name.fromComponents\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">fromComponents</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L43-L48","name":"Lean.Name.mapPrefix","line":43,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.Name.mapPrefix","doc":"Find the largest prefix `n` of a `Name` such that `f n != none`, then replace this prefix\nwith the value of `f n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.Name.mapPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">mapPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Lean/Expr/Basic.lean#L29-L33","name":"Lean.BinderInfo.brackets","line":29,"kind":"def","docLink":"./Mathlib/Lean/Expr/Basic.html#Lean.BinderInfo.brackets","doc":"The brackets corresponding to a given `BinderInfo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/Basic.html#Lean.BinderInfo.brackets\"><span class=\"name\">Lean</span>.<span class=\"name\">BinderInfo</span>.<span class=\"name\">brackets</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">Lean.BinderInfo</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>"}]}