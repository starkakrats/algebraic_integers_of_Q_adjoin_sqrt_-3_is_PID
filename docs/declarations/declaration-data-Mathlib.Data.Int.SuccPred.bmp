{"name":"Mathlib.Data.Int.SuccPred","instances":[{"typeNames":["Int"],"name":"Int.instSuccOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing","className":"SuccOrder"},{"typeNames":["Int"],"name":"Int.instPredOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing","className":"PredOrder"},{"typeNames":["Int"],"name":"Int.instIsSuccArchimedeanIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRingInstSuccOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing","className":"IsSuccArchimedean"},{"typeNames":["Int"],"name":"Int.instIsPredArchimedeanIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRingInstPredOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing","className":"IsPredArchimedean"}],"imports":["Init","Mathlib.Data.Int.Order.Basic","Mathlib.Data.Nat.SuccPred"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Int/SuccPred.lean#L97-L97","name":"CovBy.cast_int","line":97,"kind":"theorem","docLink":"./Mathlib/Data/Int/SuccPred.html#CovBy.cast_int","doc":"**Alias** of the reverse direction of `Nat.cast_int_covBy_iff`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#CovBy.cast_int\"><span class=\"name\">CovBy</span>.<span class=\"name\">cast_int</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Order/Cover.html#CovBy\">⋖</a> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Order/Cover.html#CovBy\">⋖</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Int/SuccPred.lean#L92-L94","name":"Nat.cast_int_covBy_iff","line":92,"kind":"theorem","docLink":"./Mathlib/Data/Int/SuccPred.html#Nat.cast_int_covBy_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Nat.cast_int_covBy_iff\"><span class=\"name\">Nat</span>.<span class=\"name\">cast_int_covBy_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{b : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Mathlib/Order/Cover.html#CovBy\">⋖</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Mathlib/Order/Cover.html#CovBy\">⋖</a> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Int/SuccPred.lean#L85-L86","name":"Int.covBy_add_one","line":85,"kind":"theorem","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.covBy_add_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.covBy_add_one\"><span class=\"name\">Int</span>.<span class=\"name\">covBy_add_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Mathlib/Order/Cover.html#CovBy\">⋖</a> <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Int/SuccPred.lean#L81-L81","name":"Int.sub_one_covBy","line":81,"kind":"theorem","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.sub_one_covBy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.sub_one_covBy\"><span class=\"name\">Int</span>.<span class=\"name\">sub_one_covBy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(z : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></span> <a href=\"./Mathlib/Order/Cover.html#CovBy\">⋖</a> <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Int/SuccPred.lean#L76-L77","name":"Int.covBy_iff_succ_eq","line":76,"kind":"theorem","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.covBy_iff_succ_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.covBy_iff_succ_eq\"><span class=\"name\">Int</span>.<span class=\"name\">covBy_iff_succ_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Order/Cover.html#CovBy\">⋖</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Int/SuccPred.lean#L69-L71","name":"Int.instIsPredArchimedeanIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRingInstPredOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing","line":69,"kind":"instance","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.instIsPredArchimedeanIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRingInstPredOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.instIsPredArchimedeanIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRingInstPredOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing\"><span class=\"name\">Int</span>.<span class=\"name\">instIsPredArchimedeanIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRingInstPredOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#IsPredArchimedean\">IsPredArchimedean</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Int/SuccPred.lean#L64-L67","name":"Int.instIsSuccArchimedeanIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRingInstSuccOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing","line":64,"kind":"instance","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.instIsSuccArchimedeanIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRingInstSuccOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.instIsSuccArchimedeanIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRingInstSuccOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing\"><span class=\"name\">Int</span>.<span class=\"name\">instIsSuccArchimedeanIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRingInstSuccOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#IsSuccArchimedean\">IsSuccArchimedean</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Int/SuccPred.lean#L57-L61","name":"Int.pred_iterate","line":57,"kind":"theorem","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.pred_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.pred_iterate\"><span class=\"name\">Int</span>.<span class=\"name\">pred_iterate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\"><a href=\"./Mathlib/Data/Int/Defs.html#Int.pred\">Int.pred</a><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">^[</a><span class=\"fn\">n</span><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">]</a></a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Int/SuccPred.lean#L50-L54","name":"Int.succ_iterate","line":50,"kind":"theorem","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.succ_iterate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.succ_iterate\"><span class=\"name\">Int</span>.<span class=\"name\">succ_iterate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\"><a href=\"./Mathlib/Data/Int/Defs.html#Int.succ\">Int.succ</a><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">^[</a><span class=\"fn\">n</span><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">]</a></a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Int/SuccPred.lean#L46-L47","name":"Int.pos_iff_one_le","line":46,"kind":"theorem","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.pos_iff_one_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.pos_iff_one_le\"><span class=\"name\">Int</span>.<span class=\"name\">pos_iff_one_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Int/SuccPred.lean#L42-L43","name":"Int.pred_eq_pred","line":42,"kind":"theorem","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.pred_eq_pred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.pred_eq_pred\"><span class=\"name\">Int</span>.<span class=\"name\">pred_eq_pred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Order.pred</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Int/Defs.html#Int.pred\">Int.pred</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Int/SuccPred.lean#L37-L38","name":"Int.succ_eq_succ","line":37,"kind":"theorem","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.succ_eq_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.succ_eq_succ\"><span class=\"name\">Int</span>.<span class=\"name\">succ_eq_succ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Order.succ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Int/Defs.html#Int.succ\">Int.succ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Int/SuccPred.lean#L29-L34","name":"Int.instPredOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing","line":29,"kind":"instance","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.instPredOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.instPredOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing\"><span class=\"name\">Int</span>.<span class=\"name\">instPredOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#PredOrder\">PredOrder</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/Int/SuccPred.lean#L24-L25","name":"Int.instSuccOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing","line":24,"kind":"instance","docLink":"./Mathlib/Data/Int/SuccPred.html#Int.instSuccOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Int/SuccPred.html#Int.instSuccOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing\"><span class=\"name\">Int</span>.<span class=\"name\">instSuccOrderIntToPreorderToPartialOrderToStrictOrderedRingToLinearOrderedRingLinearOrderedCommRing</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#SuccOrder\">SuccOrder</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"}]}