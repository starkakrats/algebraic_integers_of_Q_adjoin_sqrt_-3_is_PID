{"name":"Std.Lean.Parser","instances":[],"imports":["Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Parser.lean#L35-L37","name":"Lean.Parser.Tactic.getDSimpArgs?","line":35,"kind":"def","docLink":"./Std/Lean/Parser.html#Lean.Parser.Tactic.getDSimpArgs?","doc":"Extract the arguments from a `dsimpArgs` syntax as an array of syntaxes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Parser.html#Lean.Parser.Tactic.getDSimpArgs?\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">getDSimpArgs?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Parser.lean#L31-L32","name":"Lean.Parser.Tactic.dsimpArgs","line":31,"kind":"def","docLink":"./Std/Lean/Parser.html#Lean.Parser.Tactic.dsimpArgs","doc":"A dsimp args list is a list of `dsimpArg`. This is the main argument to `dsimp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Parser.html#Lean.Parser.Tactic.dsimpArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Parser.lean#L29-L29","name":"Lean.Parser.Tactic.dsimpArg","line":29,"kind":"def","docLink":"./Std/Lean/Parser.html#Lean.Parser.Tactic.dsimpArg","doc":"A `dsimpArg` is similar to `simpArg`, but it does not have the `simpStar` form\nbecause it does not make sense to use hypotheses in `dsimp`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Parser.html#Lean.Parser.Tactic.dsimpArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Parser.lean#L20-L22","name":"Lean.Parser.Tactic.getSimpArgs?","line":20,"kind":"def","docLink":"./Std/Lean/Parser.html#Lean.Parser.Tactic.getSimpArgs?","doc":"Extract the arguments from a `simpArgs` syntax as an array of syntaxes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Parser.html#Lean.Parser.Tactic.getSimpArgs?\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">getSimpArgs?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Parser.lean#L16-L17","name":"Lean.Parser.Tactic.simpArgs","line":16,"kind":"def","docLink":"./Std/Lean/Parser.html#Lean.Parser.Tactic.simpArgs","doc":"A simp args list is a list of `simpArg`. This is the main argument to `simp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Parser.html#Lean.Parser.Tactic.simpArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Parser.lean#L14-L14","name":"Lean.Parser.Tactic.simpArg","line":14,"kind":"def","docLink":"./Std/Lean/Parser.html#Lean.Parser.Tactic.simpArg","doc":"A `simpArg` is either a `*`, `-lemma` or a simp lemma specification\n(which includes the `↑` `↓` `←` specifications for pre, post, reverse rewriting).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Parser.html#Lean.Parser.Tactic.simpArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}