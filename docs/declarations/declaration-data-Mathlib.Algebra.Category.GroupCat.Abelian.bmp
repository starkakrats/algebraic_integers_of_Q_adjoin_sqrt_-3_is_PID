{"name":"Mathlib.Algebra.Category.GroupCat.Abelian","instances":[{"typeNames":["AddCommGroupCat"],"name":"AddCommGroupCat.instAbelianAddCommGroupCatInstAddCommGroupCatLargeCategory","className":"CategoryTheory.Abelian"},{"typeNames":["CategoryTheory.Limits.colim"],"name":"AddCommGroupCat.instPreservesFiniteLimitsFunctorAddCommGroupCatInstAddCommGroupCatLargeCategoryCategoryColimHasColimitsOfShapeOfHasColimitsOfSizeInstHasColimitsOfSizeAddCommGroupCatMaxInstAddCommGroupCatLargeCategory_3","className":"CategoryTheory.Limits.PreservesFiniteLimits"}],"imports":["Init","Mathlib.Algebra.Category.GroupCat.Colimits","Mathlib.Algebra.Category.GroupCat.FilteredColimits","Mathlib.Algebra.Category.GroupCat.Kernels","Mathlib.Algebra.Category.GroupCat.Limits","Mathlib.Algebra.Category.GroupCat.ZModuleEquivalence","Mathlib.Algebra.Category.ModuleCat.Abelian","Mathlib.CategoryTheory.Abelian.FunctorCategory","Mathlib.CategoryTheory.Limits.ConcreteCategory"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Abelian.lean#L60-L77","name":"AddCommGroupCat.instPreservesFiniteLimitsFunctorAddCommGroupCatInstAddCommGroupCatLargeCategoryCategoryColimHasColimitsOfShapeOfHasColimitsOfSizeInstHasColimitsOfSizeAddCommGroupCatMaxInstAddCommGroupCatLargeCategory_3","line":60,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Abelian.html#AddCommGroupCat.instPreservesFiniteLimitsFunctorAddCommGroupCatInstAddCommGroupCatLargeCategoryCategoryColimHasColimitsOfShapeOfHasColimitsOfSizeInstHasColimitsOfSizeAddCommGroupCatMaxInstAddCommGroupCatLargeCategory_3","doc":"The category of abelian groups satisfies Grothedieck's Axiom AB5. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Abelian.html#AddCommGroupCat.instPreservesFiniteLimitsFunctorAddCommGroupCatInstAddCommGroupCatLargeCategoryCategoryColimHasColimitsOfShapeOfHasColimitsOfSizeInstHasColimitsOfSizeAddCommGroupCatMaxInstAddCommGroupCatLargeCategory_3\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">instPreservesFiniteLimitsFunctorAddCommGroupCatInstAddCommGroupCatLargeCategoryCategoryColimHasColimitsOfShapeOfHasColimitsOfSizeInstHasColimitsOfSizeAddCommGroupCatMaxInstAddCommGroupCatLargeCategory_3</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Filtered/Basic.html#CategoryTheory.IsFiltered\">CategoryTheory.IsFiltered</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Finite.html#CategoryTheory.Limits.PreservesFiniteLimits\">CategoryTheory.Limits.PreservesFiniteLimits</a> <span class=\"fn\">CategoryTheory.Limits.colim</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Abelian.lean#L51-L57","name":"AddCommGroupCat.exact_iff","line":51,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Abelian.html#AddCommGroupCat.exact_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Abelian.html#AddCommGroupCat.exact_iff\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">exact_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/Exact.html#CategoryTheory.Exact\">CategoryTheory.Exact</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Basic.html#AddMonoidHom.range\">AddMonoidHom.range</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Subgroup/Basic.html#AddMonoidHom.ker\">AddMonoidHom.ker</a> <span class=\"fn\">g</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Abelian.lean#L46-L49","name":"AddCommGroupCat.instAbelianAddCommGroupCatInstAddCommGroupCatLargeCategory","line":46,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Abelian.html#AddCommGroupCat.instAbelianAddCommGroupCatInstAddCommGroupCatLargeCategory","doc":"The category of abelian groups is abelian. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Abelian.html#AddCommGroupCat.instAbelianAddCommGroupCatInstAddCommGroupCatLargeCategory\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">instAbelianAddCommGroupCatInstAddCommGroupCatLargeCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">CategoryTheory.Abelian</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Abelian.lean#L39-L41","name":"AddCommGroupCat.normalEpi","line":39,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Abelian.html#AddCommGroupCat.normalEpi","doc":"In the category of abelian groups, every epimorphism is normal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Abelian.html#AddCommGroupCat.normalEpi\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">normalEpi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/NormalMono/Basic.html#CategoryTheory.NormalEpi\">CategoryTheory.NormalEpi</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Abelian.lean#L32-L34","name":"AddCommGroupCat.normalMono","line":32,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Abelian.html#AddCommGroupCat.normalMono","doc":"In the category of abelian groups, every monomorphism is normal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Abelian.html#AddCommGroupCat.normalMono\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">normalMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/NormalMono/Basic.html#CategoryTheory.NormalMono\">CategoryTheory.NormalMono</a> <span class=\"fn\">f</span></span></span></div></div>"}]}