{"name":"Mathlib.Combinatorics.SimpleGraph.ConcreteColorings","instances":[],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Coloring","Mathlib.Combinatorics.SimpleGraph.Hasse","Mathlib.Data.Nat.Parity","Mathlib.Order.OmegaCompletePartialOrder"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L43-L49","name":"SimpleGraph.chromaticNumber_pathGraph","line":43,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.chromaticNumber_pathGraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.chromaticNumber_pathGraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">chromaticNumber_pathGraph</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Coloring.html#SimpleGraph.chromaticNumber\">SimpleGraph.chromaticNumber</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Hasse.html#SimpleGraph.pathGraph\">SimpleGraph.pathGraph</a> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L33-L41","name":"SimpleGraph.pathGraph_two_embedding","line":33,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.pathGraph_two_embedding","doc":"Embedding of `pathGraph 2` into the first two elements of `pathGraph n` for `2 ≤ n` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.pathGraph_two_embedding\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">pathGraph_two_embedding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Hasse.html#SimpleGraph.pathGraph\">SimpleGraph.pathGraph</a> <span class=\"fn\">2</span></span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Embedding\">↪g</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Hasse.html#SimpleGraph.pathGraph\">SimpleGraph.pathGraph</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.lean#L25-L30","name":"SimpleGraph.pathGraph.bicoloring","line":25,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.pathGraph.bicoloring","doc":"Bicoloring of a path graph "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/ConcreteColorings.html#SimpleGraph.pathGraph.bicoloring\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">pathGraph</span>.<span class=\"name\">bicoloring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Coloring.html#SimpleGraph.Coloring\">SimpleGraph.Coloring</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Hasse.html#SimpleGraph.pathGraph\">SimpleGraph.pathGraph</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}