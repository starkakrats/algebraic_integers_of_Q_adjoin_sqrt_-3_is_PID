{"name":"Mathlib.Algebra.Category.GroupCat.Injective","instances":[{"typeNames":["CategoryTheory.Bundled.mk"],"name":"AddCommGroupCat.injective_of_divisible","className":"CategoryTheory.Injective"},{"typeNames":["AddCommGroupCat.of"],"name":"AddCommGroupCat.injective_ratCircle","className":"CategoryTheory.Injective"},{"typeNames":["AddCommGroupCat.enough_injectives_aux_proofs.next"],"name":"AddCommGroupCat.enough_injectives_aux_proofs.instInjectiveAddCommGroupCatInstAddCommGroupCatLargeCategoryNext","className":"CategoryTheory.Injective"},{"typeNames":["AddCommGroupCat"],"name":"AddCommGroupCat.enoughInjectives","className":"CategoryTheory.EnoughInjectives"},{"typeNames":["CommGroupCat"],"name":"CommGroupCat.enoughInjectives","className":"CategoryTheory.EnoughInjectives"}],"imports":["Init","Mathlib.Algebra.Category.GroupCat.EpiMono","Mathlib.Algebra.Category.GroupCat.ZModuleEquivalence","Mathlib.Algebra.Category.GroupCat.EquivalenceGroupAddGroup","Mathlib.Algebra.Module.Injective","Mathlib.Topology.Instances.AddCircle","Mathlib.Topology.Instances.Rat","Mathlib.LinearAlgebra.Isomorphisms"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L181-L182","name":"CommGroupCat.enoughInjectives","line":181,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#CommGroupCat.enoughInjectives","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#CommGroupCat.enoughInjectives\"><span class=\"name\">CommGroupCat</span>.<span class=\"name\">enoughInjectives</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Injective.html#CategoryTheory.EnoughInjectives\">CategoryTheory.EnoughInjectives</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#CommGroupCat\">CommGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L174-L175","name":"AddCommGroupCat.enoughInjectives","line":174,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enoughInjectives","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enoughInjectives\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enoughInjectives</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Injective.html#CategoryTheory.EnoughInjectives\">CategoryTheory.EnoughInjectives</a> <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L166-L170","name":"AddCommGroupCat.enough_injectives_aux_proofs.presentation","line":166,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.presentation","doc":"An injective presentation of `A`: `A → ∏_{A →+ ℚ/ℤ}, ℚ/ℤ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.presentation\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">presentation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A_ : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Injective.html#CategoryTheory.InjectivePresentation\">CategoryTheory.InjectivePresentation</a> <span class=\"fn\">A_</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L166-L166","name":"AddCommGroupCat.enough_injectives_aux_proofs.presentation_f","line":166,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.presentation_f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.presentation_f\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">presentation_f</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A_ : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.presentation\">AddCommGroupCat.enough_injectives_aux_proofs.presentation</a> <span class=\"fn\">A_</span></span>)</span>.f</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.toNext\">AddCommGroupCat.enough_injectives_aux_proofs.toNext</a> <span class=\"fn\">A_</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L166-L166","name":"AddCommGroupCat.enough_injectives_aux_proofs.presentation_J","line":166,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.presentation_J","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.presentation_J\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">presentation_J</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A_ : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.presentation\">AddCommGroupCat.enough_injectives_aux_proofs.presentation</a> <span class=\"fn\">A_</span></span>)</span>.J</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.next\">AddCommGroupCat.enough_injectives_aux_proofs.next</a> <span class=\"fn\">A_</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L156-L163","name":"AddCommGroupCat.enough_injectives_aux_proofs.toNext_inj","line":156,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.toNext_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.toNext_inj\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">toNext_inj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A_ : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Function.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.toNext\">AddCommGroupCat.enough_injectives_aux_proofs.toNext</a> <span class=\"fn\">A_</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L138-L152","name":"AddCommGroupCat.enough_injectives_aux_proofs.eq_zero_of_toRatCircle_apply_self","line":138,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.eq_zero_of_toRatCircle_apply_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.eq_zero_of_toRatCircle_apply_self\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">eq_zero_of_toRatCircle_apply_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A_ : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">↑<span class=\"fn\">A_</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">AddCommGroupCat.enough_injectives_aux_proofs.toRatCircle</span> <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">a</span>, <span class=\"fn\">property</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">{<span class=\"fn\">a</span>}</span></span></span>)</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L130-L136","name":"AddCommGroupCat.enough_injectives_aux_proofs.toRatCircle","line":130,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.toRatCircle","doc":"The map sending `n • a` to `n / 2` when `a` has infinite order,\nand to `n / addOrderOf a` otherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.toRatCircle\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">toRatCircle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A_ : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">↑<span class=\"fn\">A_</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">{<span class=\"fn\">a</span>}</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Instances/AddCircle.html#AddCircle\">AddCircle</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L130-L130","name":"AddCommGroupCat.enough_injectives_aux_proofs.toRatCircle_apply","line":130,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.toRatCircle_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.toRatCircle_apply\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">toRatCircle_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A_ : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\">↑<span class=\"fn\">A_</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a_1</span> : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">{<span class=\"fn\">a</span>}</span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">AddCommGroupCat.enough_injectives_aux_proofs.toRatCircle</span> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Quotient.html#Submodule.liftQSpanSingleton\">Submodule.liftQSpanSingleton</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span>)</span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.divBy\">AddCommGroupCat.enough_injectives_aux_proofs.divBy</a> <span class=\"fn\">(<span class=\"fn\">if <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> then <span class=\"fn\">2</span> else <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span></span>)</span></span>)</span>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.divBy\">AddCommGroupCat.enough_injectives_aux_proofs.divBy</a> <span class=\"fn\">(<span class=\"fn\">if <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> then <span class=\"fn\">2</span> else <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span></span>)</span></span>)</span>\n              <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span>)</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\">0</span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Quotient.html#Submodule.quotEquivOfEq\">Submodule.quotEquivOfEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearMap.ker\">LinearMap.ker</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#LinearMap.toSpanSingleton\">LinearMap.toSpanSingleton</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span>)</span></span>}</span></span>)</span>\n          <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearMap.ker\">LinearMap.ker</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#LinearMap.toSpanSingleton\">LinearMap.toSpanSingleton</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span>)</span></span>}</span></span></span>)</span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv.symm\">LinearEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Isomorphisms.html#LinearMap.quotKerEquivRange\">LinearMap.quotKerEquivRange</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#LinearMap.toSpanSingleton\">LinearMap.toSpanSingleton</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span>)</span>\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearEquiv.ofEq\">LinearEquiv.ofEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">{<span class=\"fn\">a</span>}</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearMap.range\">LinearMap.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#LinearMap.toSpanSingleton\">LinearMap.toSpanSingleton</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span>)</span>\n              <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">{<span class=\"fn\">a</span>}</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearMap.range\">LinearMap.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#LinearMap.toSpanSingleton\">LinearMap.toSpanSingleton</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span></span>)</span>\n            <span class=\"fn\">a_1</span></span>)</span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L120-L124","name":"AddCommGroupCat.enough_injectives_aux_proofs.divBy_self","line":120,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.divBy_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.divBy_self\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">divBy_self</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.divBy\">AddCommGroupCat.enough_injectives_aux_proofs.divBy</a> <span class=\"fn\">n</span></span>)</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L117-L118","name":"AddCommGroupCat.enough_injectives_aux_proofs.divBy","line":117,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.divBy","doc":"Given `n : ℕ`, the map `m ↦ m / n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.divBy\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">divBy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">→ₗ[</a><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a><a href=\"./Mathlib/Algebra/Module/LinearMap.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Instances/AddCircle.html#AddCircle\">AddCircle</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L112-L114","name":"AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf_apply_self","line":112,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf_apply_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf_apply_self\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">equivZModSpanAddOrderOf_apply_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A_ : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf\">AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf</a> <span class=\"fn\">a</span></span>)</span>\n    <span class=\"fn\">{ <span class=\"fn\">val</span> := <span class=\"fn\">a</span>, <span class=\"fn\">property</span> := <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">{<span class=\"fn\">a</span>}</span></span></span>)</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Quotient.html#Submodule.Quotient.mk\">Submodule.Quotient.mk</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L106-L110","name":"AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf","line":106,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf","doc":"`ℤ ⧸ ⟨ord(a)⟩ ≃ aℤ` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">equivZModSpanAddOrderOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A_ : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">{<span class=\"fn\">a</span>}</span></span>)</span></span> <a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">≃ₗ[</a><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv\">]</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span>)</span></span>}</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L106-L106","name":"AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf_symm_apply_coe","line":106,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf_symm_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf_symm_apply_coe\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">equivZModSpanAddOrderOf_symm_apply_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A_ : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a_1</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Mathlib/Algebra/Quotient.html#HasQuotient.Quotient\">⧸</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span>)</span></span>}</span></span></span>),\n  <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv.symm\">LinearEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf\">AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf</a> <span class=\"fn\">a</span></span>)</span></span>)</span> <span class=\"fn\">a_1</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Isomorphisms.html#LinearMap.quotKerEquivRange\">LinearMap.quotKerEquivRange</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#LinearMap.toSpanSingleton\">LinearMap.toSpanSingleton</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv.symm\">LinearEquiv.symm</a>\n            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Quotient.html#Submodule.quotEquivOfEq\">Submodule.quotEquivOfEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearMap.ker\">LinearMap.ker</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#LinearMap.toSpanSingleton\">LinearMap.toSpanSingleton</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span>)</span>\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span>)</span></span>}</span></span>)</span>\n              <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearMap.ker\">LinearMap.ker</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#LinearMap.toSpanSingleton\">LinearMap.toSpanSingleton</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span>)</span></span>}</span></span></span>)</span></span>)</span></span>)</span>\n          <span class=\"fn\">a_1</span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L106-L106","name":"AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf_apply","line":106,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf_apply\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">equivZModSpanAddOrderOf_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A_ : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">a_1</span> : <span class=\"fn\">↥<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">{<span class=\"fn\">a</span>}</span></span>)</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf\">AddCommGroupCat.enough_injectives_aux_proofs.equivZModSpanAddOrderOf</a> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">a_1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Quotient.html#Submodule.quotEquivOfEq\">Submodule.quotEquivOfEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearMap.ker\">LinearMap.ker</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#LinearMap.toSpanSingleton\">LinearMap.toSpanSingleton</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span>)</span></span>}</span></span>)</span>\n        <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearMap.ker\">LinearMap.ker</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#LinearMap.toSpanSingleton\">LinearMap.toSpanSingleton</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span>)</span></span>}</span></span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Equiv.html#LinearEquiv.symm\">LinearEquiv.symm</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Isomorphisms.html#LinearMap.quotKerEquivRange\">LinearMap.quotKerEquivRange</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#LinearMap.toSpanSingleton\">LinearMap.toSpanSingleton</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearEquiv.ofEq\">LinearEquiv.ofEq</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">{<span class=\"fn\">a</span>}</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearMap.range\">LinearMap.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#LinearMap.toSpanSingleton\">LinearMap.toSpanSingleton</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span>)</span>\n            <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">{<span class=\"fn\">a</span>}</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearMap.range\">LinearMap.range</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#LinearMap.toSpanSingleton\">LinearMap.toSpanSingleton</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span></span>)</span></span>)</span>\n          <span class=\"fn\">a_1</span></span>)</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L99-L103","name":"LinearMap.toSpanSingleton_ker","line":99,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#LinearMap.toSpanSingleton_ker","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#LinearMap.toSpanSingleton_ker\"><span class=\"name\">LinearMap</span>.<span class=\"name\">toSpanSingleton_ker</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A_ : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basic.html#LinearMap.ker\">LinearMap.ker</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span.html#LinearMap.toSpanSingleton\">LinearMap.toSpanSingleton</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span> <span class=\"fn\">a</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Basic.html#Ideal.span\">Ideal.span</a> <span class=\"fn\">{<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/OrderOfElement.html#addOrderOf\">addOrderOf</a> <span class=\"fn\">a</span></span>)</span></span>}</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L92-L95","name":"AddCommGroupCat.enough_injectives_aux_proofs.toNext","line":92,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.toNext","doc":"The map into the next term of `A`'s injective resolution is coordinate-wise evaluation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.toNext\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">toNext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A_ : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">A_</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.next\">AddCommGroupCat.enough_injectives_aux_proofs.next</a> <span class=\"fn\">A_</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L92-L92","name":"AddCommGroupCat.enough_injectives_aux_proofs.toNext_apply","line":92,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.toNext_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.toNext_apply\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">toNext_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A_ : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\">↑<span class=\"fn\">A_</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">A_</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.of\">AddCommGroupCat.of</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u, 0}</a>    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Instances/AddCircle.html#AddCircle\">AddCircle</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.toNext\">AddCommGroupCat.enough_injectives_aux_proofs.toNext</a> <span class=\"fn\">A_</span></span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L87-L89","name":"AddCommGroupCat.enough_injectives_aux_proofs.instInjectiveAddCommGroupCatInstAddCommGroupCatLargeCategoryNext","line":87,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.instInjectiveAddCommGroupCatInstAddCommGroupCatLargeCategoryNext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.instInjectiveAddCommGroupCatInstAddCommGroupCatLargeCategoryNext\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">instInjectiveAddCommGroupCatInstAddCommGroupCatLargeCategoryNext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A_ : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Injective.html#CategoryTheory.Injective\">CategoryTheory.Injective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.next\">AddCommGroupCat.enough_injectives_aux_proofs.next</a> <span class=\"fn\">A_</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L84-L85","name":"AddCommGroupCat.enough_injectives_aux_proofs.next","line":84,"kind":"def","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.next","doc":"The next term of `A`'s injective resolution is `∏_{A →+ ℚ/ℤ}, ℚ/ℤ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.enough_injectives_aux_proofs.next\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">enough_injectives_aux_proofs</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A_ : <a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat\">AddCommGroupCat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L75-L77","name":"AddCommGroupCat.injective_ratCircle","line":75,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.injective_ratCircle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.injective_ratCircle\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">injective_ratCircle</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Injective.html#CategoryTheory.Injective\">CategoryTheory.Injective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/GroupCat/Basic.html#AddCommGroupCat.of\">AddCommGroupCat.of</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#ULift\">ULift.{u, 0}</a>    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Instances/AddCircle.html#AddCircle\">AddCircle</a> <span class=\"fn\">1</span></span>)</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L57-L72","name":"AddCommGroupCat.injective_of_divisible","line":57,"kind":"instance","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.injective_of_divisible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.injective_of_divisible\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">injective_of_divisible</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Divisible.html#DivisibleBy\">DivisibleBy</a> <span class=\"fn\">A</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Injective.html#CategoryTheory.Injective\">CategoryTheory.Injective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Bundled.html#CategoryTheory.Bundled.mk\">CategoryTheory.Bundled.mk</a> <span class=\"fn\">A</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Algebra/Category/GroupCat/Injective.lean#L51-L53","name":"AddCommGroupCat.injective_as_module_iff","line":51,"kind":"theorem","docLink":"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.injective_as_module_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Category/GroupCat/Injective.html#AddCommGroupCat.injective_as_module_iff\"><span class=\"name\">AddCommGroupCat</span>.<span class=\"name\">injective_as_module_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(A : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">A</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Injective.html#CategoryTheory.Injective\">CategoryTheory.Injective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.mk\">ModuleCat.mk</a> <span class=\"fn\">A</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Injective.html#CategoryTheory.Injective\">CategoryTheory.Injective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Bundled.html#CategoryTheory.Bundled.mk\">CategoryTheory.Bundled.mk</a> <span class=\"fn\">A</span></span>)</span></span></span></div></div>"}]}