{"name":"Lean.Meta.CasesOn","instances":[],"imports":["Init","Lean.Meta.KAbstract","Lean.Meta.Check","Lean.Meta.AppBuilder"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L171-L176","name":"Lean.Meta.CasesOnApp.refineThrough?","line":171,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.refineThrough?","doc":"A non-failing version of `CasesOnApp.refineThrough` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.refineThrough?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">refineThrough?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L136-L168","name":"Lean.Meta.CasesOnApp.refineThrough","line":136,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.refineThrough","doc":"Given a `casesOn` application `c` of the form\n```\ncasesOn As (fun is x => motive[is, xs]) is major  (fun ys_1 => (alt_1 : motive (C_1[ys_1])) ... (fun ys_n => (alt_n : motive (C_n[ys_n]) remaining\n```\nand an expression `B[is, major]` (which may not be a type, e.g. `n : Nat`)\nfor every alternative `i`, construct the expression `fun ys_i => B[_, C_i[ys_i]]`\n\nThis is similar to `CasesOnApp.addArg` when you only have an expression to\nrefined, and not a type with a value.\n\nThis is used in in `Lean.Elab.PreDefinition.WF.GuessFix` when constructing the context of recursive\ncalls to refine the functions' paramter, which may mention `major`.\nSee there for how to use this function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.refineThrough\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">refineThrough</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L115-L119","name":"Lean.Meta.CasesOnApp.addArg?","line":115,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.addArg?","doc":"Similar to `CasesOnApp.addArg`, but returns `none` on failure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.addArg?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">addArg?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arg : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(checkIfRefined : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L89-L112","name":"Lean.Meta.CasesOnApp.addArg.updateAlts","line":89,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.addArg.updateAlts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.addArg.updateAlts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">addArg</span>.<span class=\"name\">updateAlts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(checkIfRefined : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(argType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(auxType : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L66-L112","name":"Lean.Meta.CasesOnApp.addArg","line":66,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.addArg","doc":"Given a `casesOn` application `c` of the form\n```\ncasesOn As (fun is x => motive[is, xs]) is major  (fun ys_1 => (alt_1 : motive (C_1[ys_1])) ... (fun ys_n => (alt_n : motive (C_n[ys_n]) remaining\n```\nand an expression `e : B[is, major]`, construct the term\n```\ncasesOn As (fun is x => B[is, x] â†’ motive[i, xs]) is major (fun ys_1 (y : B[_, C_1[ys_1]]) => (alt_1 : motive (C_1[ys_1])) ... (fun ys_n (y : B[_, C_n[ys_n]]) => (alt_n : motive (C_n[ys_n]) e remaining\n```\nWe use `kabstract` to abstract the `is` and `major` from `B[is, major]`.\n\nThis is used in in `Lean.Elab.PreDefinition.WF.Fix` when replacing recursive calls with calls to\nthe argument provided by `fix` to refine the termination argument, which may mention `major`.\nSee there for how to use this function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.addArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">addArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(arg : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(checkIfRefined : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L48-L49","name":"Lean.Meta.CasesOnApp.toExpr","line":48,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.toExpr","doc":"Convert `c` back to `Expr` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.toExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">toExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(c : <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L26-L45","name":"Lean.Meta.toCasesOnApp?","line":26,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.toCasesOnApp?","doc":"Return `some c` if `e` is a `casesOn` application. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.toCasesOnApp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">toCasesOnApp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L23-L23","name":"Lean.Meta.CasesOnApp.propOnly","line":23,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.propOnly","doc":"`true` if the `casesOn` can only eliminate into `Prop` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.propOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">propOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L21-L21","name":"Lean.Meta.CasesOnApp.remaining","line":21,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.remaining","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.remaining\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">remaining</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L20-L20","name":"Lean.Meta.CasesOnApp.altNumParams","line":20,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.altNumParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.altNumParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">altNumParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L19-L19","name":"Lean.Meta.CasesOnApp.alts","line":19,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.alts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.alts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">alts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L18-L18","name":"Lean.Meta.CasesOnApp.major","line":18,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.major","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.major\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">major</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L17-L17","name":"Lean.Meta.CasesOnApp.indices","line":17,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.indices","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.indices\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">indices</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L16-L16","name":"Lean.Meta.CasesOnApp.motive","line":16,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.motive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.motive\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">motive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L15-L15","name":"Lean.Meta.CasesOnApp.params","line":15,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.params","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.params\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">params</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L14-L14","name":"Lean.Meta.CasesOnApp.us","line":14,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.us","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.us\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">us</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L13-L13","name":"Lean.Meta.CasesOnApp.declName","line":13,"kind":"def","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.declName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L12-L12","name":"Lean.Meta.CasesOnApp.mk","line":12,"kind":"ctor","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lake.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(us : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(params : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(motive : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(indices : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(major : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(alts : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(altNumParams : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(remaining : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(propOnly : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\">Lean.Meta.CasesOnApp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/b614ff1d12bc38f39077f9ce9f2d48b42c003ad0/src/Lean/Meta/CasesOn.lean#L12-L23","name":"Lean.Meta.CasesOnApp","line":12,"kind":"structure","docLink":"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CasesOn.html#Lean.Meta.CasesOnApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesOnApp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}