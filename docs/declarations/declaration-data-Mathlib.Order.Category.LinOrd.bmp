{"name":"Mathlib.Order.Category.LinOrd","instances":[{"typeNames":["LinearOrder.toPartialOrder"],"name":"LinOrd.instParentProjectionTypePartialOrderLinearOrderToPartialOrder","className":"CategoryTheory.BundledHom.ParentProjection"},{"typeNames":["LinOrd"],"name":"LinOrd.instConcreteCategoryLinOrdInstLinOrdLargeCategory","className":"CategoryTheory.ConcreteCategory"},{"typeNames":["LinOrd","_builtin_typeu"],"name":"LinOrd.instCoeSortLinOrdType","className":"CoeSort"},{"typeNames":["LinOrd"],"name":"LinOrd.instInhabitedLinOrd","className":"Inhabited"},{"typeNames":["CategoryTheory.Bundled.α"],"name":"LinOrd.instLinearOrderα","className":"LinearOrder"},{"typeNames":["LinOrd","Lat"],"name":"LinOrd.hasForgetToLat","className":"CategoryTheory.HasForget₂"}],"imports":["Init","Mathlib.Order.Category.Lat"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L100-L102","name":"linOrd_dual_comp_forget_to_Lat","line":100,"kind":"theorem","docLink":"./Mathlib/Order/Category/LinOrd.html#linOrd_dual_comp_forget_to_Lat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#linOrd_dual_comp_forget_to_Lat\"><span class=\"name\">linOrd_dual_comp_forget_to_Lat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.dual\">LinOrd.dual</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a> <a href=\"./Mathlib/Order/Category/Lat.html#Lat\">Lat</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a> <a href=\"./Mathlib/Order/Category/Lat.html#Lat\">Lat</a></span>)</span> <a href=\"./Mathlib/Order/Category/Lat.html#Lat.dual\">Lat.dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L90-L94","name":"LinOrd.dualEquiv","line":90,"kind":"def","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.dualEquiv","doc":"The equivalence between `LinOrd` and itself induced by `OrderDual` both ways. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.dualEquiv\"><span class=\"name\">LinOrd</span>.<span class=\"name\">dualEquiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L89-L89","name":"LinOrd.dualEquiv_inverse","line":89,"kind":"theorem","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.dualEquiv_inverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.dualEquiv_inverse\"><span class=\"name\">LinOrd</span>.<span class=\"name\">dualEquiv_inverse</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.dualEquiv\">LinOrd.dualEquiv</a>.inverse</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.dual\">LinOrd.dual</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L89-L89","name":"LinOrd.dualEquiv_functor","line":89,"kind":"theorem","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.dualEquiv_functor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.dualEquiv_functor\"><span class=\"name\">LinOrd</span>.<span class=\"name\">dualEquiv_functor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.dualEquiv\">LinOrd.dualEquiv</a>.functor</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.dual\">LinOrd.dual</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L82-L84","name":"LinOrd.dual","line":82,"kind":"def","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.dual","doc":"`OrderDual` as a functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.dual\"><span class=\"name\">LinOrd</span>.<span class=\"name\">dual</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a> <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L81-L81","name":"LinOrd.dual_obj","line":81,"kind":"theorem","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.dual_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.dual_obj\"><span class=\"name\">LinOrd</span>.<span class=\"name\">dual_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.dual\">LinOrd.dual</a>.obj <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.of\">LinOrd.of</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">X</span></span>)</span><a href=\"./Mathlib/Order/Basic.html#OrderDual\">ᵒᵈ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L81-L81","name":"LinOrd.dual_map","line":81,"kind":"theorem","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.dual_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.dual_map\"><span class=\"name\">LinOrd</span>.<span class=\"name\">dual_map</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X </span>Y : <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a>} (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">X</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderHom\">→o</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.dual\">LinOrd.dual</a>.map <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">OrderHom.dual</span> <span class=\"fn\">a</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L68-L76","name":"LinOrd.Iso.mk","line":68,"kind":"def","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.Iso.mk","doc":"Constructs an equivalence between linear orders from an order isomorphism between them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.Iso.mk\"><span class=\"name\">LinOrd</span>.<span class=\"name\">Iso</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">α</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\">↑<span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L67-L67","name":"LinOrd.Iso.mk_inv","line":67,"kind":"theorem","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.Iso.mk_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.Iso.mk_inv\"><span class=\"name\">LinOrd</span>.<span class=\"name\">Iso</span>.<span class=\"name\">mk_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">α</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\">↑<span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.Iso.mk\">LinOrd.Iso.mk</a> <span class=\"fn\">e</span></span>)</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso.symm\">OrderIso.symm</a> <span class=\"fn\">e</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L67-L67","name":"LinOrd.Iso.mk_hom","line":67,"kind":"theorem","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.Iso.mk_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.Iso.mk_hom\"><span class=\"name\">LinOrd</span>.<span class=\"name\">Iso</span>.<span class=\"name\">mk_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">α</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\">↑<span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.Iso.mk\">LinOrd.Iso.mk</a> <span class=\"fn\">e</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L59-L62","name":"LinOrd.hasForgetToLat","line":59,"kind":"instance","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.hasForgetToLat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.hasForgetToLat\"><span class=\"name\">LinOrd</span>.<span class=\"name\">hasForgetToLat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂\">CategoryTheory.HasForget₂</a> <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a> <a href=\"./Mathlib/Order/Category/Lat.html#Lat\">Lat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L56-L57","name":"LinOrd.instLinearOrderα","line":56,"kind":"instance","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.instLinearOrderα","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.instLinearOrderα\"><span class=\"name\">LinOrd</span>.<span class=\"name\">instLinearOrderα</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">↑<span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L53-L54","name":"LinOrd.instInhabitedLinOrd","line":53,"kind":"instance","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.instInhabitedLinOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.instInhabitedLinOrd\"><span class=\"name\">LinOrd</span>.<span class=\"name\">instInhabitedLinOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L48-L49","name":"LinOrd.coe_of","line":48,"kind":"theorem","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.coe_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.coe_of\"><span class=\"name\">LinOrd</span>.<span class=\"name\">coe_of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.of\">LinOrd.of</a> <span class=\"fn\">α</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L42-L43","name":"LinOrd.of","line":42,"kind":"def","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.of","doc":"Construct a bundled `LinOrd` from the underlying type and typeclass. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.of\"><span class=\"name\">LinOrd</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L38-L39","name":"LinOrd.instCoeSortLinOrdType","line":38,"kind":"instance","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.instCoeSortLinOrdType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.instCoeSortLinOrdType\"><span class=\"name\">LinOrd</span>.<span class=\"name\">instCoeSortLinOrdType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort\">CoeSort</a> <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u_1)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L35-L36","name":"LinOrd.instConcreteCategoryLinOrdInstLinOrdLargeCategory","line":35,"kind":"instance","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.instConcreteCategoryLinOrdInstLinOrdLargeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.instConcreteCategoryLinOrdInstLinOrdLargeCategory\"><span class=\"name\">LinOrd</span>.<span class=\"name\">instConcreteCategoryLinOrdInstLinOrdLargeCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory\">CategoryTheory.ConcreteCategory</a> <a href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\">LinOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L29-L30","name":"LinOrd.instParentProjectionTypePartialOrderLinearOrderToPartialOrder","line":29,"kind":"instance","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd.instParentProjectionTypePartialOrderLinearOrderToPartialOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd.instParentProjectionTypePartialOrderLinearOrderToPartialOrder\"><span class=\"name\">LinOrd</span>.<span class=\"name\">instParentProjectionTypePartialOrderLinearOrderToPartialOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/BundledHom.html#CategoryTheory.BundledHom.ParentProjection\">CategoryTheory.BundledHom.ParentProjection</a> <a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder.toPartialOrder\">@<a href=\"./Mathlib/Init/Order/Defs.html#LinearOrder.toPartialOrder\">LinearOrder.toPartialOrder</a></a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/LinOrd.lean#L22-L23","name":"LinOrd","line":22,"kind":"def","docLink":"./Mathlib/Order/Category/LinOrd.html#LinOrd","doc":"The category of linear orders. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/LinOrd.html#LinOrd\"><span class=\"name\">LinOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_1 + 1)</div></div>"}]}