{"name":"Std.Tactic.HaveI","instances":[],"imports":["Init","Lean.Elab.ElabRules"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/HaveI.lean#L63-L63","name":"Std.Tactic.tacticLetI_","line":63,"kind":"def","docLink":"./Std/Tactic/HaveI.html#Std.Tactic.tacticLetI_","doc":"`letI` behaves like `let`, but inlines the value instead of producing a `let_fun` term. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/HaveI.html#Std.Tactic.tacticLetI_\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticLetI_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/HaveI.lean#L61-L61","name":"Std.Tactic.tacticHaveI_","line":61,"kind":"def","docLink":"./Std/Tactic/HaveI.html#Std.Tactic.tacticHaveI_","doc":"`haveI` behaves like `have`, but inlines the value instead of producing a `let_fun` term. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/HaveI.html#Std.Tactic.tacticHaveI_\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticHaveI_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/HaveI.lean#L23-L24","name":"Std.Tactic.letI","line":23,"kind":"def","docLink":"./Std/Tactic/HaveI.html#Std.Tactic.letI","doc":"`letI` behaves like `let`, but inlines the value instead of producing a `let_fun` term. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/HaveI.html#Std.Tactic.letI\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">letI</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/HaveI.lean#L20-L21","name":"Std.Tactic.haveI","line":20,"kind":"def","docLink":"./Std/Tactic/HaveI.html#Std.Tactic.haveI","doc":"`haveI` behaves like `have`, but inlines the value instead of producing a `let_fun` term. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/HaveI.html#Std.Tactic.haveI\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">haveI</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>"}]}