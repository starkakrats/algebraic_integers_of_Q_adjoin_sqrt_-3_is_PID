{"name":"Std.Linter.UnreachableTactic","instances":[],"imports":["Init","Lean.Elab.Command","Lean.Linter.Util","Std.Lean.Command","Std.Tactic.Unreachable"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnreachableTactic.lean#L91-L114","name":"Std.Linter.UnreachableTactic.unreachableTacticLinter","line":91,"kind":"def","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.unreachableTacticLinter","doc":"The main entry point to the unreachable tactic linter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.unreachableTacticLinter\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">unreachableTacticLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnreachableTactic.lean#L79-L86","name":"Std.Linter.UnreachableTactic.eraseUsedTactics","line":79,"kind":"opaque","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.eraseUsedTactics","doc":"Search for tactic executions in the info tree and remove executed tactic syntaxes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.eraseUsedTactics\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">eraseUsedTactics</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a> → <span class=\"fn\"><a href=\"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.M\">Std.Linter.UnreachableTactic.M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnreachableTactic.lean#L75-L76","name":"Std.Linter.UnreachableTactic.eraseUsedTacticsList","line":75,"kind":"opaque","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.eraseUsedTacticsList","doc":"Search for tactic executions in the info tree and remove executed tactic syntaxes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.eraseUsedTacticsList\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">eraseUsedTacticsList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(trees : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">Lean.PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.M\">Std.Linter.UnreachableTactic.M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnreachableTactic.lean#L64-L70","name":"Std.Linter.UnreachableTactic.getTactics","line":64,"kind":"opaque","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.getTactics","doc":"Accumulates the set of tactic syntaxes that should be evaluated at least once. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.getTactics\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">getTactics</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ignoreTacticKinds : <a href=\"./Lean/Data/NameMap.html#Lean.NameHashSet\">Lean.NameHashSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isTacKind : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.M\">Std.Linter.UnreachableTactic.M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnreachableTactic.lean#L59-L60","name":"Std.Linter.UnreachableTactic.addIgnoreTacticKind","line":59,"kind":"def","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.addIgnoreTacticKind","doc":"Adds a new syntax kind whose children will be ignored by the `unreachableTactic` linter.\nThis should be called from an `initialize` block.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.addIgnoreTacticKind\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">addIgnoreTacticKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(kind : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnreachableTactic.lean#L50-L53","name":"Std.Linter.UnreachableTactic.isIgnoreTacticKind","line":50,"kind":"def","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.isIgnoreTacticKind","doc":"Is this a syntax kind that contains intentionally unevaluated tactic subterms? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.isIgnoreTacticKind\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">isIgnoreTacticKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ignoreTacticKinds : <a href=\"./Lean/Data/NameMap.html#Lean.NameHashSet\">Lean.NameHashSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnreachableTactic.lean#L35-L47","name":"Std.Linter.UnreachableTactic.ignoreTacticKindsRef","line":35,"kind":"opaque","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.ignoreTacticKindsRef","doc":"A list of blacklisted syntax kinds, which are expected to have subterms that contain\nunevaluated tactics.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.ignoreTacticKindsRef\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">ignoreTacticKindsRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Data/NameMap.html#Lean.NameHashSet\">Lean.NameHashSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnreachableTactic.lean#L33-L33","name":"Std.Linter.UnreachableTactic.M","line":33,"kind":"def","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.M","doc":"The monad for collecting used tactic syntaxes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.M\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnreachableTactic.lean#L30-L30","name":"Std.Linter.UnreachableTactic.getLinterUnreachableTactic","line":30,"kind":"def","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.getLinterUnreachableTactic","doc":"Gets the value of the `linter.unreachableTactic` option. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnreachableTactic.html#Std.Linter.UnreachableTactic.getLinterUnreachableTactic\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">getLinterUnreachableTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(o : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Linter/UnreachableTactic.lean#L14-L26","name":"Std.Linter.linter.unreachableTactic","line":14,"kind":"opaque","docLink":"./Std/Linter/UnreachableTactic.html#Std.Linter.linter.unreachableTactic","doc":"Enables the 'unreachable tactic' linter. This will warn on any tactics that are never executed.\nFor example, in `example : True := by trivial <;> done`, the tactic `done` is never executed\nbecause `trivial` produces no subgoals; you could put `sorry` or `apply I_don't_exist`\nor anything else there and no error would result.\n\nA common source of such things is `simp <;> tac` in the case that `simp` improves and\ncloses a subgoal that was previously being closed by `tac`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Linter/UnreachableTactic.html#Std.Linter.linter.unreachableTactic\"><span class=\"name\">Std</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">unreachableTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}