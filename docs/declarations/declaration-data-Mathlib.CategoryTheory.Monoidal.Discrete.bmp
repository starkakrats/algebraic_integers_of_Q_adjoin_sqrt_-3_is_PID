{"name":"Mathlib.CategoryTheory.Monoidal.Discrete","instances":[{"typeNames":["CategoryTheory.Discrete"],"name":"CategoryTheory.Discrete.addMonoidal","className":"CategoryTheory.MonoidalCategory"},{"typeNames":["CategoryTheory.Discrete"],"name":"CategoryTheory.Discrete.monoidal","className":"CategoryTheory.MonoidalCategory"}],"imports":["Init","Mathlib.Algebra.Group.Hom.Defs","Mathlib.CategoryTheory.DiscreteCategory","Mathlib.CategoryTheory.Monoidal.NaturalTransformation"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L70-L74","name":"CategoryTheory.Discrete.monoidalFunctorComp","line":70,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctorComp","doc":"The monoidal natural isomorphism corresponding to composing two multiplicative morphisms.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctorComp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">monoidalFunctorComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">‚Üí*</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">N</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">‚Üí*</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor\">CategoryTheory.Discrete.monoidalFunctor</a> <span class=\"fn\">F</span></span> <a href=\"./Mathlib/CategoryTheory/Monoidal/Functor.html#CategoryTheory.MonoidalFunctor.comp\">‚äó‚ãô</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor\">CategoryTheory.Discrete.monoidalFunctor</a> <span class=\"fn\">G</span></span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor\">CategoryTheory.Discrete.monoidalFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom.comp\">MonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L68-L69","name":"CategoryTheory.Discrete.addMonoidalFunctorComp.proof_5","line":68,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp.proof_5","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp.proof_5\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctorComp</span>.<span class=\"name\">proof_5</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">N</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">0</span></span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n        <span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">K</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n                <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n                  <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n            <span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>)</span></span>)</span></span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>)</span>\n            <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n              <span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>)</span></span>)</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L68-L69","name":"CategoryTheory.Discrete.addMonoidalFunctorComp.proof_3","line":68,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp.proof_3","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp.proof_3\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctorComp</span>.<span class=\"name\">proof_3</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">N</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a>\n              <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n                    <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n                      <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                        <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n                <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">X</span></span>)</span></span>)</span>\n              <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n                    <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n                      <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                        <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n                <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">Y</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n                  <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n                    <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                      <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a>\n                <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">X</span></span>)</span>\n                <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">Y</span></span>)</span></span>)</span></span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>)</span>\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a>\n                <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">X</span></span>)</span>\n                <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">Y</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>)</span>\n              <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n                <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>)</span></span></span>)</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">G</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n          <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorHom\">CategoryTheory.MonoidalCategory.tensorHom</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">G</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">X</span></span>)</span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">G</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">Y</span></span>)</span></span>)</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a>\n      <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span>)</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L68-L69","name":"CategoryTheory.Discrete.addMonoidalFunctorComp.proof_7","line":68,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp.proof_7","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp.proof_7\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctorComp</span>.<span class=\"name\">proof_7</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">N</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/NaturalTransformation.html#CategoryTheory.MonoidalNatTrans.mk\">CategoryTheory.MonoidalNatTrans.mk</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.mk\">CategoryTheory.NatTrans.mk</a> <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt;\n        <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span> <a href=\"./Mathlib/CategoryTheory/Monoidal/Functor.html#CategoryTheory.MonoidalFunctor.comp\">‚äó‚ãô</a>                     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">G</span></span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n            <span class=\"fn\">X</span></span>)</span></span></span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/NaturalTransformation.html#CategoryTheory.MonoidalNatTrans.mk\">CategoryTheory.MonoidalNatTrans.mk</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.mk\">CategoryTheory.NatTrans.mk</a> <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt;\n        <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n            <span class=\"fn\">X</span></span>)</span></span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span> <a href=\"./Mathlib/CategoryTheory/Monoidal/Functor.html#CategoryTheory.MonoidalFunctor.comp\">‚äó‚ãô</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">G</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L68-L69","name":"CategoryTheory.Discrete.addMonoidalFunctorComp","line":68,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp","doc":"The monoidal natural isomorphism corresponding to\ncomposing two additive morphisms."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctorComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">N</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span> <a href=\"./Mathlib/CategoryTheory/Monoidal/Functor.html#CategoryTheory.MonoidalFunctor.comp\">‚äó‚ãô</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">G</span></span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L68-L69","name":"CategoryTheory.Discrete.addMonoidalFunctorComp.proof_2","line":68,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp.proof_2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp.proof_2\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctorComp</span>.<span class=\"name\">proof_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">N</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\"><span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">K</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n                  <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n                    <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                      <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n              <span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>)</span></span>)</span></span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>)</span>\n              <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n                <span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>)</span></span>)</span></span></span>)</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">G</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n          <span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">0</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L68-L69","name":"CategoryTheory.Discrete.addMonoidalFunctorComp.proof_4","line":68,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp.proof_4","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp.proof_4\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctorComp</span>.<span class=\"name\">proof_4</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">N</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶ÉX : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶ÉY : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>‚¶Ñ</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">Y</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">X</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">X</span></span>)</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">Y</span></span>)</span>.as</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L68-L69","name":"CategoryTheory.Discrete.addMonoidalFunctorComp.proof_8","line":68,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp.proof_8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp.proof_8\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctorComp</span>.<span class=\"name\">proof_8</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">N</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/NaturalTransformation.html#CategoryTheory.MonoidalNatTrans.mk\">CategoryTheory.MonoidalNatTrans.mk</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.mk\">CategoryTheory.NatTrans.mk</a> <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt;\n        <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">X</span></span>)</span></span></span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/NaturalTransformation.html#CategoryTheory.MonoidalNatTrans.mk\">CategoryTheory.MonoidalNatTrans.mk</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.mk\">CategoryTheory.NatTrans.mk</a> <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt;\n        <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span> <a href=\"./Mathlib/CategoryTheory/Monoidal/Functor.html#CategoryTheory.MonoidalFunctor.comp\">‚äó‚ãô</a>                     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">G</span></span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n            <span class=\"fn\">X</span></span>)</span></span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L68-L69","name":"CategoryTheory.Discrete.addMonoidalFunctorComp.proof_1","line":68,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp.proof_1\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctorComp</span>.<span class=\"name\">proof_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">N</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶ÉX : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>‚¶Ñ</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶ÉY : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>‚¶Ñ</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">X</span></span>)</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">Y</span></span>)</span>.as</span></span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">G</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">Y</span></span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">G</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">X</span></span>)</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L68-L69","name":"CategoryTheory.Discrete.addMonoidalFunctorComp.proof_6","line":68,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp.proof_6","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctorComp.proof_6\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctorComp</span>.<span class=\"name\">proof_6</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{K : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><span class=\"fn\">N</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a>\n      <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span>)</span></span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorHom\">CategoryTheory.MonoidalCategory.tensorHom</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">X</span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom.comp\">AddMonoidHom.comp</a> <span class=\"fn\">G</span> <span class=\"fn\">F</span></span>)</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">Y</span></span>)</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a>\n              <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n                    <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n                      <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                        <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n                <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">X</span></span>)</span></span>)</span>\n              <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n                    <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n                      <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                        <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n                <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">Y</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n                  <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n                    <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                      <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a>\n                <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">X</span></span>)</span>\n                <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">Y</span></span>)</span></span>)</span></span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>)</span>\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a>\n                <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">X</span></span>)</span>\n                <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">Y</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>)</span>\n              <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj\n                <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>)</span></span></span>)</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L51-L56","name":"CategoryTheory.Discrete.monoidalFunctor","line":51,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor","doc":"A multiplicative morphism between monoids gives a monoidal functor between the corresponding\ndiscrete monoidal categories.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">monoidalFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">‚Üí*</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Functor.html#CategoryTheory.MonoidalFunctor\">CategoryTheory.MonoidalFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.monoidalFunctor_toLaxMonoidalFunctor_Œµ","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor_toLaxMonoidalFunctor_Œµ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor_toLaxMonoidalFunctor_Œµ\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">monoidalFunctor_toLaxMonoidalFunctor_Œµ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">‚Üí*</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor\">CategoryTheory.Discrete.monoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.Œµ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">1</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.addMonoidalFunctor_toLaxMonoidalFunctor_Œº","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor_toLaxMonoidalFunctor_Œº","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor_toLaxMonoidalFunctor_Œº\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctor_toLaxMonoidalFunctor_Œº</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Functor.html#CategoryTheory.LaxMonoidalFunctor.Œº\">CategoryTheory.LaxMonoidalFunctor.Œº</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span>)</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.monoidalFunctor_toLaxMonoidalFunctor_toFunctor_map","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor_toLaxMonoidalFunctor_toFunctor_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor_toLaxMonoidalFunctor_toFunctor_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">monoidalFunctor_toLaxMonoidalFunctor_toFunctor_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">‚Üí*</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÄ {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor\">CategoryTheory.Discrete.monoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.map <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.addMonoidalFunctor_toLaxMonoidalFunctor_Œµ","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor_toLaxMonoidalFunctor_Œµ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor_toLaxMonoidalFunctor_Œµ\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctor_toLaxMonoidalFunctor_Œµ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.Œµ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">0</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.monoidalFunctor_toLaxMonoidalFunctor_toFunctor_obj_as","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor_toLaxMonoidalFunctor_toFunctor_obj_as","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor_toLaxMonoidalFunctor_toFunctor_obj_as\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">monoidalFunctor_toLaxMonoidalFunctor_toFunctor_obj_as</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">‚Üí*</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor\">CategoryTheory.Discrete.monoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">X</span></span>)</span>.as</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.addMonoidalFunctor_toLaxMonoidalFunctor_toFunctor_map","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor_toLaxMonoidalFunctor_toFunctor_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor_toLaxMonoidalFunctor_toFunctor_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctor_toLaxMonoidalFunctor_toFunctor_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÄ {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.map <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.monoidalFunctor_toLaxMonoidalFunctor_Œº","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor_toLaxMonoidalFunctor_Œº","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor_toLaxMonoidalFunctor_Œº\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">monoidalFunctor_toLaxMonoidalFunctor_Œº</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#MonoidHom\">‚Üí*</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Functor.html#CategoryTheory.LaxMonoidalFunctor.Œº\">CategoryTheory.LaxMonoidalFunctor.Œº</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidalFunctor\">CategoryTheory.Discrete.monoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span>)</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.addMonoidalFunctor_toLaxMonoidalFunctor_toFunctor_obj_as","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor_toLaxMonoidalFunctor_toFunctor_obj_as","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor_toLaxMonoidalFunctor_toFunctor_obj_as\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctor_toLaxMonoidalFunctor_toFunctor_obj_as</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\">CategoryTheory.Discrete.addMonoidalFunctor</a> <span class=\"fn\">F</span></span>)</span>.toLaxMonoidalFunctor</span>.toFunctor</span>.obj <span class=\"fn\">X</span></span>)</span>.as</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.addMonoidalFunctor.proof_10","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_10","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_10\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctor</span>.<span class=\"name\">proof_10</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a>\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Functor.html#CategoryTheory.LaxMonoidalFunctor.mk\">CategoryTheory.LaxMonoidalFunctor.mk</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n        <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n          <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n            <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">0</span></span></span>)</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt;\n      <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span>)</span></span></span>)</span></span></span></span>)</span>.Œµ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.addMonoidalFunctor.proof_7","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_7","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_7\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctor</span>.<span class=\"name\">proof_7</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Z : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorHom\">CategoryTheory.MonoidalCategory.tensorHom</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt;\n          <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span>)</span></span></span>)</span></span></span>)</span>\n        <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n              <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n                <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n          <span class=\"fn\">Z</span></span>)</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt;\n          <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span>)</span></span></span>)</span></span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">Z</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n            <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n              <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.map\n        <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.associator\">CategoryTheory.MonoidalCategory.associator</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span> <span class=\"fn\">Z</span></span>)</span>.hom</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.associator\">CategoryTheory.MonoidalCategory.associator</a>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n              <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n                <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n          <span class=\"fn\">X</span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n              <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n                <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n          <span class=\"fn\">Y</span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n              <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n                <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n          <span class=\"fn\">Z</span></span>)</span></span>)</span>.hom</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorHom\">CategoryTheory.MonoidalCategory.tensorHom</a>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n          <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n                <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n                  <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n            <span class=\"fn\">X</span></span>)</span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt;\n            <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span>)</span></span></span>)</span></span></span>)</span>\n          <span class=\"fn\">Y</span> <span class=\"fn\">Z</span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt;\n          <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span>)</span></span></span>)</span></span></span>)</span>\n        <span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">Y</span> <span class=\"fn\">Z</span></span>)</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.addMonoidalFunctor.proof_5","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_5","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_5\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctor</span>.<span class=\"name\">proof_5</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.addMonoidalFunctor.proof_6","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_6","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_6\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctor</span>.<span class=\"name\">proof_6</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X' : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y' : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">X'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorHom\">CategoryTheory.MonoidalCategory.tensorHom</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n            <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n              <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.map\n        <span class=\"fn\">f</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n            <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n              <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.map\n        <span class=\"fn\">g</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span>)</span></span></span>)</span></span></span>)</span>\n      <span class=\"fn\">Y</span> <span class=\"fn\">Y'</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span>)</span></span></span>)</span></span></span>)</span>\n      <span class=\"fn\">X</span> <span class=\"fn\">X'</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n          <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n            <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n              <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.map\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorHom\">CategoryTheory.MonoidalCategory.tensorHom</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.addMonoidalFunctor","line":50,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor","doc":"An additive morphism between add_monoids gives a\nmonoidal functor between the corresponding discrete monoidal categories. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Functor.html#CategoryTheory.MonoidalFunctor\">CategoryTheory.MonoidalFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">N</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.addMonoidalFunctor.proof_4","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_4","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_4\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctor</span>.<span class=\"name\">proof_4</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.addMonoidalFunctor.proof_3","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_3","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_3\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctor</span>.<span class=\"name\">proof_3</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Z</span>.as</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Y</span></span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Z</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.addMonoidalFunctor.proof_1","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_1\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctor</span>.<span class=\"name\">proof_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÄ {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>)</span> ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.addMonoidalFunctor.proof_9","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_9","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_9\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctor</span>.<span class=\"name\">proof_9</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.rightUnitor\">CategoryTheory.MonoidalCategory.rightUnitor</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n            <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n              <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n        <span class=\"fn\">X</span></span>)</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorHom\">CategoryTheory.MonoidalCategory.tensorHom</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n              <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n                <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n          <span class=\"fn\">X</span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">0</span></span></span>)</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt;\n          <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span>)</span></span></span>)</span></span></span>)</span>\n        <span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n            <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n              <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.map\n        <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.rightUnitor\">CategoryTheory.MonoidalCategory.rightUnitor</a> <span class=\"fn\">X</span></span>)</span>.hom</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.addMonoidalFunctor.proof_2","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_2\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctor</span>.<span class=\"name\">proof_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.addMonoidalFunctor.proof_8","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_8\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctor</span>.<span class=\"name\">proof_8</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.leftUnitor\">CategoryTheory.MonoidalCategory.leftUnitor</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n            <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n              <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n        <span class=\"fn\">X</span></span>)</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorHom\">CategoryTheory.MonoidalCategory.tensorHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">0</span></span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a>\n        <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n              <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n                <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.obj\n          <span class=\"fn\">X</span></span>)</span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt;\n          <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span>)</span></span></span>)</span></span></span>)</span>\n        <span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>)</span> <span class=\"fn\">X</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n            <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n              <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n                <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>.map\n        <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.leftUnitor\">CategoryTheory.MonoidalCategory.leftUnitor</a> <span class=\"fn\">X</span></span>)</span>.hom</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L50-L50","name":"CategoryTheory.Discrete.addMonoidalFunctor.proof_11","line":50,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_11","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidalFunctor.proof_11\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidalFunctor</span>.<span class=\"name\">proof_11</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{M : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{N : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Mathlib/Algebra/Group/Hom/Defs.html#AddMonoidHom\">‚Üí+</a> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a>\n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Functor.html#CategoryTheory.LaxMonoidalFunctor.Œº\">CategoryTheory.LaxMonoidalFunctor.Œº</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Functor.html#CategoryTheory.LaxMonoidalFunctor.mk\">CategoryTheory.LaxMonoidalFunctor.mk</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.mk\">CategoryTheory.Functor.mk</a>\n        <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> }</span></span>,\n          <span class=\"fn\">map</span> := <span class=\"fn\">fun {<span class=\"fn\">X </span>Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>) =&gt;\n            <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span>)</span></span></span> }</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">0</span></span></span>)</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt;\n      <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToHom\">CategoryTheory.Discrete.eqToHom</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span>)</span></span></span>)</span></span></span></span>)</span>\n    <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L43-L43","name":"CategoryTheory.Discrete.monoidal_tensorUnit_as","line":43,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidal_tensorUnit_as","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidal_tensorUnit_as\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">monoidal_tensorUnit_as</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>)</span>.as</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L42-L42","name":"CategoryTheory.Discrete.addMonoidal_tensorUnit_as","line":42,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal_tensorUnit_as","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal_tensorUnit_as\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal_tensorUnit_as</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>)</span>.as</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L29-L38","name":"CategoryTheory.Discrete.monoidal","line":29,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidal\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">monoidal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal_associator","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal_associator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal_associator\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal_associator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Z : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.associator\">CategoryTheory.MonoidalCategory.associator</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span> <span class=\"fn\">Z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToIso\">CategoryTheory.Discrete.eqToIso</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Z</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Z</span>.as</span></span>)</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.monoidal_leftUnitor","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidal_leftUnitor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidal_leftUnitor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">monoidal_leftUnitor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.leftUnitor\">CategoryTheory.MonoidalCategory.leftUnitor</a> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToIso\">CategoryTheory.Discrete.eqToIso</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.monoidal_tensorObj_as","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidal_tensorObj_as","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidal_tensorObj_as\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">monoidal_tensorObj_as</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span>.as</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal_tensorObj_as","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal_tensorObj_as","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal_tensorObj_as\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal_tensorObj_as</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span>.as</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.monoidal_associator","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidal_associator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidal_associator\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">monoidal_associator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Z : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.associator\">CategoryTheory.MonoidalCategory.associator</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span> <span class=\"fn\">Z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToIso\">CategoryTheory.Discrete.eqToIso</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">Z</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.as</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">Z</span>.as</span></span>)</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.monoidal_rightUnitor","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidal_rightUnitor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.monoidal_rightUnitor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">monoidal_rightUnitor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.rightUnitor\">CategoryTheory.MonoidalCategory.rightUnitor</a> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToIso\">CategoryTheory.Discrete.eqToIso</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal_leftUnitor","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal_leftUnitor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal_leftUnitor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal_leftUnitor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.leftUnitor\">CategoryTheory.MonoidalCategory.leftUnitor</a> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToIso\">CategoryTheory.Discrete.eqToIso</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal_rightUnitor","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal_rightUnitor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal_rightUnitor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal_rightUnitor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.rightUnitor\">CategoryTheory.MonoidalCategory.rightUnitor</a> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete.eqToIso\">CategoryTheory.Discrete.eqToIso</a> <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal.proof_5","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_5","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_5\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal</span>.<span class=\"name\">proof_5</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal.proof_6","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_6","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_6\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal</span>.<span class=\"name\">proof_6</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">X</span>.as</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal.proof_15","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_15","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_15\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal</span>.<span class=\"name\">proof_15</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span>\n            <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">Y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X</span>\n            <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>)</span> <span class=\"fn\">Y</span></span>)</span></span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X</span>\n            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>)</span> <span class=\"fn\">Y</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n    <span class=\"fn\">(_ :\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span>\n          <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">Y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>         <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal.proof_1","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_1\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal</span>.<span class=\"name\">proof_1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>x_1 : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>),\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">x_1</span></span>)</span> ‚Üí\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X</span> <span class=\"fn\">x_1</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal.proof_12","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_12","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_12\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal</span>.<span class=\"name\">proof_12</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorHom\">CategoryTheory.MonoidalCategory.tensorHom</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>)</span></span>)</span> <span class=\"fn\">f</span></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.leftUnitor\">CategoryTheory.MonoidalCategory.leftUnitor</a> <span class=\"fn\">Y</span></span>)</span>.hom</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.leftUnitor\">CategoryTheory.MonoidalCategory.leftUnitor</a> <span class=\"fn\">X</span></span>)</span>.hom</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal.proof_9","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_9","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_9\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal</span>.<span class=\"name\">proof_9</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f‚ÇÅ : <span class=\"fn\"><span class=\"fn\">X‚ÇÅ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y‚ÇÅ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f‚ÇÇ : <span class=\"fn\"><span class=\"fn\">X‚ÇÇ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y‚ÇÇ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g‚ÇÅ : <span class=\"fn\"><span class=\"fn\">Y‚ÇÅ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Z‚ÇÅ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g‚ÇÇ : <span class=\"fn\"><span class=\"fn\">Y‚ÇÇ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Z‚ÇÇ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n    <span class=\"fn\">(_ :\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X‚ÇÅ</span> <span class=\"fn\">X‚ÇÇ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>         <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Z‚ÇÅ</span> <span class=\"fn\">Z‚ÇÇ</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X‚ÇÅ</span> <span class=\"fn\">X‚ÇÇ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Y‚ÇÅ</span> <span class=\"fn\">Y‚ÇÇ</span></span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Y‚ÇÅ</span> <span class=\"fn\">Y‚ÇÇ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Z‚ÇÅ</span> <span class=\"fn\">Z‚ÇÇ</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal.proof_10","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_10","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_10\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal</span>.<span class=\"name\">proof_10</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal.proof_2","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_2\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal</span>.<span class=\"name\">proof_2</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÄ {<span class=\"fn\">X‚ÇÅ </span>X‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>},\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X‚ÇÅ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">X‚ÇÇ</span></span>)</span> ‚Üí\n    <span class=\"fn\">‚àÄ (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>),\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X‚ÇÅ</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>         <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X‚ÇÇ</span> <span class=\"fn\">X</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal.proof_14","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_14","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_14\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal</span>.<span class=\"name\">proof_14</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(W : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Z : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span>\n            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">W</span> <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">Z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span>\n            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">W</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>)</span> <span class=\"fn\">Z</span></span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span>\n              <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">W</span>\n                <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>)</span>\n              <span class=\"fn\">Z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">W</span>\n              <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span>\n                <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">Z</span></span>)</span></span></span>)</span></span>)</span>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">W</span>\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">Z</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">W</span>\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">X</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">Y</span> <span class=\"fn\">Z</span></span>)</span></span>)</span></span></span>)</span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span>\n            <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span>\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">W</span> <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">Y</span></span>)</span>\n            <span class=\"fn\">Z</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span>\n            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">W</span> <span class=\"fn\">X</span></span>)</span>\n            <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Y</span> <span class=\"fn\">Z</span></span>)</span></span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span>\n            <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">W</span> <span class=\"fn\">X</span></span>)</span>\n            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">Y</span> <span class=\"fn\">Z</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">W</span>\n            <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X</span>\n              <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">Y</span> <span class=\"fn\">Z</span></span>)</span></span>)</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal.proof_4","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_4","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_4\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal</span>.<span class=\"name\">proof_4</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Z : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Z</span>.as</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Z</span>.as</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal.proof_11","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_11","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_11\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal</span>.<span class=\"name\">proof_11</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X‚ÇÉ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y‚ÇÉ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f‚ÇÅ : <span class=\"fn\"><span class=\"fn\">X‚ÇÅ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y‚ÇÅ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f‚ÇÇ : <span class=\"fn\"><span class=\"fn\">X‚ÇÇ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y‚ÇÇ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f‚ÇÉ : <span class=\"fn\"><span class=\"fn\">X‚ÇÉ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y‚ÇÉ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span>\n            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">X‚ÇÅ</span> <span class=\"fn\">X‚ÇÇ</span></span>)</span> <span class=\"fn\">X‚ÇÉ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span>\n            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">Y‚ÇÅ</span> <span class=\"fn\">Y‚ÇÇ</span></span>)</span> <span class=\"fn\">Y‚ÇÉ</span></span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span>\n            <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Y‚ÇÅ</span> <span class=\"fn\">Y‚ÇÇ</span></span>)</span> <span class=\"fn\">Y‚ÇÉ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Y‚ÇÅ</span>\n            <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Y‚ÇÇ</span> <span class=\"fn\">Y‚ÇÉ</span></span>)</span></span></span>)</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span>\n            <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X‚ÇÅ</span> <span class=\"fn\">X‚ÇÇ</span></span>)</span> <span class=\"fn\">X‚ÇÉ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X‚ÇÅ</span>\n            <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X‚ÇÇ</span> <span class=\"fn\">X‚ÇÉ</span></span>)</span></span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X‚ÇÅ</span>\n            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">X‚ÇÇ</span> <span class=\"fn\">X‚ÇÉ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Y‚ÇÅ</span>\n            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategory.tensorObj</a> <span class=\"fn\">Y‚ÇÇ</span> <span class=\"fn\">Y‚ÇÉ</span></span>)</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal.proof_8","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_8\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal</span>.<span class=\"name\">proof_8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(X‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X‚ÇÅ</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">X‚ÇÇ</span>.as</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X‚ÇÅ</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">X‚ÇÇ</span>.as</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal.proof_7","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_7","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_7\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal</span>.<span class=\"name\">proof_7</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y‚ÇÅ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X‚ÇÅ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y‚ÇÅ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">X‚ÇÇ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y‚ÇÇ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n    <span class=\"fn\">(_ :\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X‚ÇÅ</span> <span class=\"fn\">X‚ÇÇ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>         <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Y‚ÇÅ</span> <span class=\"fn\">Y‚ÇÇ</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X‚ÇÅ</span> <span class=\"fn\">X‚ÇÇ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Y‚ÇÅ</span> <span class=\"fn\">X‚ÇÇ</span></span></span>)</span></span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">CategoryTheory.eqToHom</a>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Y‚ÇÅ</span> <span class=\"fn\">X‚ÇÇ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Y‚ÇÅ</span> <span class=\"fn\">Y‚ÇÇ</span></span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal.proof_3","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_3","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_3\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal</span>.<span class=\"name\">proof_3</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÄ {<span class=\"fn\">X‚ÇÅ </span>Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>},\n  <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X‚ÇÅ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y‚ÇÅ</span></span>)</span> ‚Üí\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X‚ÇÇ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y‚ÇÇ</span></span>)</span> ‚Üí\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">X‚ÇÅ</span> <span class=\"fn\">X‚ÇÇ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>         <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">X</span> Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">as</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.as</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">Y</span>.as</span></span> }</span></span>)</span> <span class=\"fn\">Y‚ÇÅ</span> <span class=\"fn\">Y‚ÇÇ</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal","line":28,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Monoidal/Discrete.lean#L28-L28","name":"CategoryTheory.Discrete.addMonoidal.proof_13","line":28,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_13","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monoidal/Discrete.html#CategoryTheory.Discrete.addMonoidal.proof_13\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Discrete</span>.<span class=\"name\">addMonoidal</span>.<span class=\"name\">proof_13</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(M : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddMonoid\">AddMonoid</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorHom\">CategoryTheory.MonoidalCategory.tensorHom</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\">ùüô_ <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/DiscreteCategory.html#CategoryTheory.Discrete\">CategoryTheory.Discrete</a> <span class=\"fn\">M</span></span>)</span></span>)</span></span>)</span></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.rightUnitor\">CategoryTheory.MonoidalCategory.rightUnitor</a> <span class=\"fn\">Y</span></span>)</span>.hom</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.rightUnitor\">CategoryTheory.MonoidalCategory.rightUnitor</a> <span class=\"fn\">X</span></span>)</span>.hom</span> <span class=\"fn\">f</span></span></span></div></div>"}]}