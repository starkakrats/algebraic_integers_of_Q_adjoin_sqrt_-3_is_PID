{"name":"Mathlib.Topology.Metrizable.Uniformity","instances":[{"typeNames":[],"name":"UniformSpace.pseudoMetrizableSpace","className":"TopologicalSpace.PseudoMetrizableSpace"}],"imports":["Init","Mathlib.Topology.Metrizable.Basic","Mathlib.Data.Nat.Lattice"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Metrizable/Uniformity.lean#L279-L282","name":"UniformSpace.metrizableSpace","line":279,"kind":"theorem","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.metrizableSpace","doc":"A T‚ÇÄ uniform space with countably generated `ùì§ X` is metrizable. This is not an instance to\navoid loops. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.metrizableSpace\"><span class=\"name\">UniformSpace</span>.<span class=\"name\">metrizableSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.IsCountablyGenerated\">Filter.IsCountablyGenerated</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">X</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T0Space\">T0Space</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.MetrizableSpace\">TopologicalSpace.MetrizableSpace</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Metrizable/Uniformity.lean#L271-L274","name":"UniformSpace.pseudoMetrizableSpace","line":271,"kind":"instance","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.pseudoMetrizableSpace","doc":"A uniform space with countably generated `ùì§ X` is pseudo metrizable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.pseudoMetrizableSpace\"><span class=\"name\">UniformSpace</span>.<span class=\"name\">pseudoMetrizableSpace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.IsCountablyGenerated\">Filter.IsCountablyGenerated</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">X</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Metrizable/Basic.html#TopologicalSpace.PseudoMetrizableSpace\">TopologicalSpace.PseudoMetrizableSpace</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Metrizable/Uniformity.lean#L265-L267","name":"UniformSpace.metricSpace","line":265,"kind":"def","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.metricSpace","doc":"A `MetricSpace` instance compatible with a given `UniformSpace` structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.metricSpace\"><span class=\"name\">UniformSpace</span>.<span class=\"name\">metricSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.IsCountablyGenerated\">Filter.IsCountablyGenerated</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">X</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation.html#T0Space\">T0Space</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/Basic.html#MetricSpace\">MetricSpace</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Metrizable/Uniformity.lean#L258-L261","name":"UniformSpace.pseudoMetricSpace","line":258,"kind":"def","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.pseudoMetricSpace","doc":"A `PseudoMetricSpace` instance compatible with a given `UniformSpace` structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.pseudoMetricSpace\"><span class=\"name\">UniformSpace</span>.<span class=\"name\">pseudoMetricSpace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.IsCountablyGenerated\">Filter.IsCountablyGenerated</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">X</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Metrizable/Uniformity.lean#L188-L254","name":"UniformSpace.metrizable_uniformity","line":188,"kind":"theorem","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.metrizable_uniformity","doc":"If `X` is a uniform space with countably generated uniformity filter, there exists a\n`PseudoMetricSpace` structure compatible with the `UniformSpace` structure. Use\n`UniformSpace.pseudoMetricSpace` or `UniformSpace.metricSpace` instead. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#UniformSpace.metrizable_uniformity\"><span class=\"name\">UniformSpace</span>.<span class=\"name\">metrizable_uniformity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#UniformSpace\">UniformSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Bases.html#Filter.IsCountablyGenerated\">Filter.IsCountablyGenerated</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/UniformSpace/Basic.html#uniformity\">uniformity</a> <span class=\"fn\">X</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ (I : <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\">PseudoMetricSpace.toUniformSpace</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">inst‚úù¬π</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Metrizable/Uniformity.lean#L109-L179","name":"PseudoMetricSpace.le_two_mul_dist_ofPreNNDist","line":109,"kind":"theorem","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoMetricSpace.le_two_mul_dist_ofPreNNDist","doc":"Consider a function `d : X ‚Üí X ‚Üí ‚Ñù‚â•0` such that `d x x = 0` and `d x y = d y x` for all `x`,\n`y`. Let `dist` be the largest pseudometric distance such that `dist x y ‚â§ d x y`, see\n`PseudoMetricSpace.ofPreNNDist`. Suppose that `d` satisfies the following triangle-like\ninequality: `d x‚ÇÅ x‚ÇÑ ‚â§ 2 * max (d x‚ÇÅ x‚ÇÇ, d x‚ÇÇ x‚ÇÉ, d x‚ÇÉ x‚ÇÑ)`. Then `d x y ‚â§ 2 * dist x y` for all\n`x`, `y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoMetricSpace.le_two_mul_dist_ofPreNNDist\"><span class=\"name\">PseudoMetricSpace</span>.<span class=\"name\">le_two_mul_dist_ofPreNNDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><span class=\"fn\">X</span> ‚Üí <span class=\"fn\">X</span> ‚Üí <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(dist_self : <span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(dist_comm : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hd : <span class=\"fn\">‚àÄ (<span class=\"fn\">x‚ÇÅ </span>x‚ÇÇ x‚ÇÉ x‚ÇÑ : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x‚ÇÅ</span> <span class=\"fn\">x‚ÇÑ</span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x‚ÇÅ</span> <span class=\"fn\">x‚ÇÇ</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x‚ÇÇ</span> <span class=\"fn\">x‚ÇÉ</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x‚ÇÉ</span> <span class=\"fn\">x‚ÇÑ</span></span>)</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Metrizable/Uniformity.lean#L96-L101","name":"PseudoMetricSpace.dist_ofPreNNDist_le","line":96,"kind":"theorem","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoMetricSpace.dist_ofPreNNDist_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoMetricSpace.dist_ofPreNNDist_le\"><span class=\"name\">PseudoMetricSpace</span>.<span class=\"name\">dist_ofPreNNDist_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><span class=\"fn\">X</span> ‚Üí <span class=\"fn\">X</span> ‚Üí <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(dist_self : <span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(dist_comm : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">‚Üë<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Metrizable/Uniformity.lean#L88-L93","name":"PseudoMetricSpace.dist_ofPreNNDist","line":88,"kind":"theorem","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoMetricSpace.dist_ofPreNNDist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoMetricSpace.dist_ofPreNNDist\"><span class=\"name\">PseudoMetricSpace</span>.<span class=\"name\">dist_ofPreNNDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><span class=\"fn\">X</span> ‚Üí <span class=\"fn\">X</span> ‚Üí <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(dist_self : <span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(dist_comm : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#Dist.dist\">dist</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚Üë<span class=\"fn\">(<span class=\"fn\">‚®Ö (l : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">X</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Data/List/BigOperators/Defs.html#List.sum\">List.sum</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.zipWith\">List.zipWith</a> <span class=\"fn\">d</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">[<span class=\"fn\">y</span>]</span></span>)</span></span>)</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Metrizable/Uniformity.lean#L58-L85","name":"PseudoMetricSpace.ofPreNNDist","line":58,"kind":"def","docLink":"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoMetricSpace.ofPreNNDist","doc":"The maximal pseudo metric space structure on `X` such that `dist x y ‚â§ d x y` for all `x y`,\nwhere `d : X ‚Üí X ‚Üí ‚Ñù‚â•0` is a function such that `d x x = 0` and `d x y = d y x` for all `x`, `y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Metrizable/Uniformity.html#PseudoMetricSpace.ofPreNNDist\"><span class=\"name\">PseudoMetricSpace</span>.<span class=\"name\">ofPreNNDist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><span class=\"fn\">X</span> ‚Üí <span class=\"fn\">X</span> ‚Üí <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(dist_self : <span class=\"fn\">‚àÄ (<span class=\"fn\">x</span> : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(dist_comm : <span class=\"fn\">‚àÄ (<span class=\"fn\">x </span>y : <span class=\"fn\">X</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">d</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/MetricSpace/PseudoMetric.html#PseudoMetricSpace\">PseudoMetricSpace</a> <span class=\"fn\">X</span></span></div></div>"}]}