{"name":"Mathlib.Order.Category.BddOrd","instances":[{"typeNames":["BddOrd","_builtin_typeu"],"name":"BddOrd.instCoeSortBddOrdType","className":"CoeSort"},{"typeNames":["CategoryTheory.Bundled.α"],"name":"BddOrd.instPartialOrderαToPartOrd","className":"PartialOrder"},{"typeNames":["BddOrd"],"name":"BddOrd.instInhabitedBddOrd","className":"Inhabited"},{"typeNames":["BddOrd"],"name":"BddOrd.largeCategory","className":"CategoryTheory.Category"},{"typeNames":["Quiver.Hom","CategoryTheory.Bundled.α","CategoryTheory.Bundled.α"],"name":"BddOrd.instFunLike","className":"DFunLike"},{"typeNames":["BddOrd"],"name":"BddOrd.concreteCategory","className":"CategoryTheory.ConcreteCategory"},{"typeNames":["BddOrd","PartOrd"],"name":"BddOrd.hasForgetToPartOrd","className":"CategoryTheory.HasForget₂"},{"typeNames":["BddOrd","Bipointed"],"name":"BddOrd.hasForgetToBipointed","className":"CategoryTheory.HasForget₂"}],"imports":["Init","Mathlib.CategoryTheory.Category.Bipointed","Mathlib.Order.Category.PartOrd","Mathlib.Order.Hom.Bounded"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L122-L125","name":"bddOrd_dual_comp_forget_to_bipointed","line":122,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#bddOrd_dual_comp_forget_to_bipointed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#bddOrd_dual_comp_forget_to_bipointed\"><span class=\"name\">bddOrd_dual_comp_forget_to_bipointed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual\">BddOrd.dual</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./Mathlib/CategoryTheory/Category/Bipointed.html#Bipointed\">Bipointed</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./Mathlib/CategoryTheory/Category/Bipointed.html#Bipointed\">Bipointed</a></span>)</span> <a href=\"./Mathlib/CategoryTheory/Category/Bipointed.html#Bipointed.swap\">Bipointed.swap</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L116-L119","name":"bddOrd_dual_comp_forget_to_partOrd","line":116,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#bddOrd_dual_comp_forget_to_partOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#bddOrd_dual_comp_forget_to_partOrd\"><span class=\"name\">bddOrd_dual_comp_forget_to_partOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual\">BddOrd.dual</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a></span>)</span> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dual\">PartOrd.dual</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L107-L111","name":"BddOrd.dualEquiv","line":107,"kind":"def","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.dualEquiv","doc":"The equivalence between `BddOrd` and itself induced by `OrderDual` both ways. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dualEquiv\"><span class=\"name\">BddOrd</span>.<span class=\"name\">dualEquiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L106-L106","name":"BddOrd.dualEquiv_inverse","line":106,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.dualEquiv_inverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dualEquiv_inverse\"><span class=\"name\">BddOrd</span>.<span class=\"name\">dualEquiv_inverse</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dualEquiv\">BddOrd.dualEquiv</a>.inverse</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual\">BddOrd.dual</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L106-L106","name":"BddOrd.dualEquiv_functor","line":106,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.dualEquiv_functor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dualEquiv_functor\"><span class=\"name\">BddOrd</span>.<span class=\"name\">dualEquiv_functor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dualEquiv\">BddOrd.dualEquiv</a>.functor</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual\">BddOrd.dual</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L98-L102","name":"BddOrd.Iso.mk","line":98,"kind":"def","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.Iso.mk","doc":"Constructs an equivalence between bounded orders from an order isomorphism between them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Iso.mk\"><span class=\"name\">BddOrd</span>.<span class=\"name\">Iso</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">α</span>.toPartOrd</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">β</span>.toPartOrd</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L97-L97","name":"BddOrd.Iso.mk_inv","line":97,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.Iso.mk_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Iso.mk_inv\"><span class=\"name\">BddOrd</span>.<span class=\"name\">Iso</span>.<span class=\"name\">mk_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">α</span>.toPartOrd</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">β</span>.toPartOrd</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Iso.mk\">BddOrd.Iso.mk</a> <span class=\"fn\">e</span></span>)</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso.symm\">OrderIso.symm</a> <span class=\"fn\">e</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L97-L97","name":"BddOrd.Iso.mk_hom","line":97,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.Iso.mk_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Iso.mk_hom\"><span class=\"name\">BddOrd</span>.<span class=\"name\">Iso</span>.<span class=\"name\">mk_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">α</span>.toPartOrd</span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">β</span>.toPartOrd</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Iso.mk\">BddOrd.Iso.mk</a> <span class=\"fn\">e</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L91-L93","name":"BddOrd.dual","line":91,"kind":"def","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual","doc":"`OrderDual` as a functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual\"><span class=\"name\">BddOrd</span>.<span class=\"name\">dual</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L90-L90","name":"BddOrd.dual_obj","line":90,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual_obj\"><span class=\"name\">BddOrd</span>.<span class=\"name\">dual_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual\">BddOrd.dual</a>.obj <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.of\">BddOrd.of</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPartOrd</span></span>)</span><a href=\"./Mathlib/Order/Basic.html#OrderDual\">ᵒᵈ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L90-L90","name":"BddOrd.dual_map","line":90,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual_map\"><span class=\"name\">BddOrd</span>.<span class=\"name\">dual_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(a : <span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Bounded.html#BoundedOrderHom\">BoundedOrderHom</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPartOrd</span></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">Y</span>.toPartOrd</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual\">BddOrd.dual</a>.map <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">BoundedOrderHom.dual</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L82-L86","name":"BddOrd.hasForgetToBipointed","line":82,"kind":"instance","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.hasForgetToBipointed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.hasForgetToBipointed\"><span class=\"name\">BddOrd</span>.<span class=\"name\">hasForgetToBipointed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂\">CategoryTheory.HasForget₂</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./Mathlib/CategoryTheory/Category/Bipointed.html#Bipointed\">Bipointed</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L76-L79","name":"BddOrd.hasForgetToPartOrd","line":76,"kind":"instance","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.hasForgetToPartOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.hasForgetToPartOrd\"><span class=\"name\">BddOrd</span>.<span class=\"name\">hasForgetToPartOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂\">CategoryTheory.HasForget₂</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L69-L73","name":"BddOrd.concreteCategory","line":69,"kind":"instance","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.concreteCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.concreteCategory\"><span class=\"name\">BddOrd</span>.<span class=\"name\">concreteCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory\">CategoryTheory.ConcreteCategory</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L66-L67","name":"BddOrd.instFunLike","line":66,"kind":"instance","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.instFunLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.instFunLike\"><span class=\"name\">BddOrd</span>.<span class=\"name\">instFunLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(Y : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPartOrd</span></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">Y</span>.toPartOrd</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L55-L61","name":"BddOrd.largeCategory","line":55,"kind":"instance","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.largeCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.largeCategory\"><span class=\"name\">BddOrd</span>.<span class=\"name\">largeCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.LargeCategory\">CategoryTheory.LargeCategory</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L52-L53","name":"BddOrd.instInhabitedBddOrd","line":52,"kind":"instance","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.instInhabitedBddOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.instInhabitedBddOrd\"><span class=\"name\">BddOrd</span>.<span class=\"name\">instInhabitedBddOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L48-L49","name":"BddOrd.coe_of","line":48,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.coe_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.coe_of\"><span class=\"name\">BddOrd</span>.<span class=\"name\">coe_of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.of\">BddOrd.of</a> <span class=\"fn\">α</span></span>)</span>.toPartOrd</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L42-L44","name":"BddOrd.of","line":42,"kind":"def","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.of","doc":"Construct a bundled `BddOrd` from a `Fintype` `PartialOrder`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.of\"><span class=\"name\">BddOrd</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(α : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L36-L37","name":"BddOrd.instPartialOrderαToPartOrd","line":36,"kind":"instance","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.instPartialOrderαToPartOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.instPartialOrderαToPartOrd\"><span class=\"name\">BddOrd</span>.<span class=\"name\">instPartialOrderαToPartOrd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(X : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Init/Order/Defs.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.toPartOrd</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L33-L34","name":"BddOrd.instCoeSortBddOrdType","line":33,"kind":"instance","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.instCoeSortBddOrdType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.instCoeSortBddOrdType\"><span class=\"name\">BddOrd</span>.<span class=\"name\">instCoeSortBddOrdType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort\">CoeSort</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./foundational_types.html\">(<a href=\"./foundational_types.html\">Type</a> u_1)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L28-L28","name":"BddOrd.isBoundedOrder","line":28,"kind":"def","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.isBoundedOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.isBoundedOrder\"><span class=\"name\">BddOrd</span>.<span class=\"name\">isBoundedOrder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">self</span>.toPartOrd</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L27-L27","name":"BddOrd.toPartOrd","line":27,"kind":"def","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd","doc":"The underlying object in the category of partial orders. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\"><span class=\"name\">BddOrd</span>.<span class=\"name\">toPartOrd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L25-L25","name":"BddOrd.mk","line":25,"kind":"ctor","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.mk\"><span class=\"name\">BddOrd</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(toPartOrd : <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[isBoundedOrder : <span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">↑<span class=\"fn\">toPartOrd</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Order/Category/BddOrd.lean#L25-L28","name":"BddOrd","line":25,"kind":"structure","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd","doc":"The category of bounded orders with monotone functions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\"><span class=\"name\">BddOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_1 + 1)</div></div>"}]}