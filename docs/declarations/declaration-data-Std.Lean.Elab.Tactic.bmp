{"name":"Std.Lean.Elab.Tactic","instances":[],"imports":["Init","Lean.Elab.Tactic.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Lean/Elab/Tactic.lean#L15-L16","name":"Lean.Elab.Tactic.liftMetaFinishingTactic","line":15,"kind":"def","docLink":"./Std/Lean/Elab/Tactic.html#Lean.Elab.Tactic.liftMetaFinishingTactic","doc":"Analogue of `liftMetaTactic` for tactics that do not return any goals. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Lean/Elab/Tactic.html#Lean.Elab.Tactic.liftMetaFinishingTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">liftMetaFinishingTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(tac : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> â†’ <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"}]}