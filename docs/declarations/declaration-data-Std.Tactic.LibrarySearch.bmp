{"name":"Std.Tactic.LibrarySearch","instances":[{"typeNames":["Eq"],"name":"Std.Tactic.LibrarySearch.instDecidableEqDeclMod","className":"Decidable"},{"typeNames":["Std.Tactic.LibrarySearch.DeclMod"],"name":"Std.Tactic.LibrarySearch.instInhabitedDeclMod","className":"Inhabited"},{"typeNames":["Std.Tactic.LibrarySearch.DeclMod"],"name":"Std.Tactic.LibrarySearch.instOrdDeclMod","className":"Ord"},{"typeNames":["Std.Tactic.LibrarySearch.DeclMod"],"name":"Std.Tactic.LibrarySearch.instToStringDeclMod","className":"ToString"},{"typeNames":["Std.Tactic.LibrarySearch.SubgoalRankType"],"name":"Std.Tactic.LibrarySearch.instOrdSubgoalRankType","className":"Ord"}],"imports":["Init","Std.Lean.CoreM","Std.Lean.Expr","Std.Lean.Meta.DiscrTree","Std.Lean.Meta.LazyDiscrTree","Std.Data.Option.Basic","Std.Tactic.SolveByElim","Std.Util.Pickle"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L513-L528","name":"Std.Tactic.LibrarySearch.«termStd_exact?%»","line":513,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.«termStd_exact?%»","doc":"Term elaborator using the `exact?` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.«termStd_exact?%»\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">«termStd_exact?%»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L467-L497","name":"Std.Tactic.LibrarySearch.exact?","line":467,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.exact?","doc":"Implementation of the `exact?` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.exact?\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">exact?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(tk : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(required : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`term</span></span>)</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(solver : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.tacticSeq</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(requireClose : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L460-L461","name":"Std.Tactic.LibrarySearch.std_apply?'","line":460,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.std_apply?'","doc":"Syntax for `std_apply?` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.std_apply?'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">std_apply?'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L456-L458","name":"Std.Tactic.LibrarySearch.std_exact?'","line":456,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.std_exact?'","doc":"Syntax for `std_exact?` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.std_exact?'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">std_exact?'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L439-L445","name":"Std.Tactic.LibrarySearch.librarySearch","line":439,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.librarySearch","doc":"Try to solve the goal either by:\n* calling `tactic true`\n* or applying a library lemma then calling `tactic false` on the resulting goals.\n\nTypically here `tactic` is `solveByElim`,\nwith the `Bool` flag indicating whether it may retry with `exfalso`.\n\nIf it successfully closes the goal, returns `none`.\nOtherwise, it returns `some a`, where `a : Array (List MVarId × MetavarContext)`,\nwith an entry for each library lemma which was successfully applied,\ncontaining a list of the subsidiary goals, and the metavariable context after the application.\n\n(Always succeeds, and the metavariable context stored in the monad is reverted,\nunless the goal was completely solved.)\n\n(Note that if `solveByElim` solves some but not all subsidiary goals,\nthis is not currently tracked.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.librarySearch\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">librarySearch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(goal : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(tactic : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(allowFailure : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(leavePercentHeartbeats : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">10</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L365-L372","name":"Std.Tactic.LibrarySearch.solveByElim","line":365,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.solveByElim","doc":"Shortcut for calling `solveByElim`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.solveByElim\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">solveByElim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(required : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(exfalso : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goals : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(maxDepth : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L354-L362","name":"Std.Tactic.LibrarySearch.mkHeartbeatCheck","line":354,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.mkHeartbeatCheck","doc":"Return an action that returns true when  the remaining heartbeats is less\nthan the currently remaining heartbeats * leavePercent / 100.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.mkHeartbeatCheck\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">mkHeartbeatCheck</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(leavePercent : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L330-L348","name":"Std.Tactic.LibrarySearch.tryOnEach","line":330,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.tryOnEach","doc":"Sequentially invokes a tactic `act` on each value in candidates on the current state.\n\nThe tactic `act` should return a list of meta-variables that still need to be resolved.\nIf this list is empty, then no variables remain to be solved, and `tryOnEach` returns\n`none` with the environment set so each goal is resolved.\n\nIf the action throws an internal exception with the `abortSpeculationId` id then\nfurther computation is stopped and intermediate results returned. If any other\nexception is thrown, then it is silently discarded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.tryOnEach\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">tryOnEach</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(act : <span class=\"fn\"><a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.Candidate\">Std.Tactic.LibrarySearch.Candidate</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(candidates : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.Candidate\">Std.Tactic.LibrarySearch.Candidate</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L315-L317","name":"Std.Tactic.LibrarySearch.isAbortSpeculation","line":315,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.isAbortSpeculation","doc":"Returns true if this is an abort speculation exception. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.isAbortSpeculation\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">isAbortSpeculation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L311-L312","name":"Std.Tactic.LibrarySearch.abortSpeculation","line":311,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.abortSpeculation","doc":"Called to abort speculative execution in library search.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.abortSpeculation\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">abortSpeculation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept\">MonadExcept</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Lean.Exception</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L298-L299","name":"Std.Tactic.LibrarySearch.subgoalRanking","line":298,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.subgoalRanking","doc":"Returns a tuple:\n* are there no remaining goals?\n* how many local hypotheses were used?\n* how many goals remain, negated?\n\nLarger values (i.e. no remaining goals, more local hypotheses, fewer remaining goals)\nare better.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.subgoalRanking\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">subgoalRanking</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(goal : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(subgoals : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.SubgoalRankType\">Std.Tactic.LibrarySearch.SubgoalRankType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L286-L288","name":"Std.Tactic.LibrarySearch.countLocalHypsUsed","line":286,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.countLocalHypsUsed","doc":"Count how many local hypotheses appear in an expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.countLocalHypsUsed\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">countLocalHypsUsed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{m : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">Lean.MonadLCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">Lean.MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L281-L283","name":"Std.Tactic.LibrarySearch.instOrdSubgoalRankType","line":281,"kind":"instance","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.instOrdSubgoalRankType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.instOrdSubgoalRankType\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">instOrdSubgoalRankType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.SubgoalRankType\">Std.Tactic.LibrarySearch.SubgoalRankType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L278-L279","name":"Std.Tactic.LibrarySearch.SubgoalRankType","line":278,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.SubgoalRankType","doc":"A type synonym for our subgoal ranking algorithm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.SubgoalRankType\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">SubgoalRankType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L262-L275","name":"Std.Tactic.LibrarySearch.librarySearchSymm","line":262,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.librarySearchSymm","doc":"Run `searchFn` on both the goal and `symm` applied to the goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.librarySearchSymm\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">librarySearchSymm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(searchFn : <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.CandidateFinder\">Std.Tactic.LibrarySearch.CandidateFinder</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(goal : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.Candidate\">Std.Tactic.LibrarySearch.Candidate</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L242-L257","name":"Std.Tactic.LibrarySearch.interleaveWith","line":242,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.interleaveWith","doc":"Interleave x y interleaves the elements of x and y until one is empty and then returns\nfinal elements in other list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.interleaveWith\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">interleaveWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">γ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L215-L215","name":"Std.Tactic.LibrarySearch.Candidate","line":215,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.Candidate","doc":"A library search candidate using symmetry includes the goal to solve, the metavar\ncontext for that goal, and the name and orientation of a rule to try using with goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.Candidate\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">Candidate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L203-L208","name":"Std.Tactic.LibrarySearch.mkLibrarySearchLemma","line":203,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.mkLibrarySearchLemma","doc":"Create lemma from name and mod. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.mkLibrarySearchLemma\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">mkLibrarySearchLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lem : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(mod : <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod\">Std.Tactic.LibrarySearch.DeclMod</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L197-L198","name":"Std.Tactic.LibrarySearch.setDefaultCandidateFinder","line":197,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.setDefaultCandidateFinder","doc":"Update the candidate finder used by library search.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.setDefaultCandidateFinder\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">setDefaultCandidateFinder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(cf : <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.CandidateFinder\">Std.Tactic.LibrarySearch.CandidateFinder</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L188-L192","name":"Std.Tactic.LibrarySearch.defaultCandidateFinder","line":188,"kind":"opaque","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.defaultCandidateFinder","doc":"The preferred candidate finding function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.defaultCandidateFinder\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">defaultCandidateFinder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.CandidateFinder\">Std.Tactic.LibrarySearch.CandidateFinder</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L166-L174","name":"Std.Tactic.LibrarySearch.IncDiscrTreeFinder.mkImportFinder","line":166,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.IncDiscrTreeFinder.mkImportFinder","doc":"Candidate finding function that uses strict discrimination tree for resolution.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.IncDiscrTreeFinder.mkImportFinder\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">IncDiscrTreeFinder</span>.<span class=\"name\">mkImportFinder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.CandidateFinder\">Std.Tactic.LibrarySearch.CandidateFinder</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L133-L135","name":"Std.Tactic.LibrarySearch.DiscrTreeFinder.mkImportFinder","line":133,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DiscrTreeFinder.mkImportFinder","doc":"Candidate finding function that uses strict discrimination tree for resolution.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DiscrTreeFinder.mkImportFinder\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DiscrTreeFinder</span>.<span class=\"name\">mkImportFinder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(importTree : <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod\">Std.Tactic.LibrarySearch.DeclMod</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod\">Std.Tactic.LibrarySearch.DeclMod</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L126-L128","name":"Std.Tactic.LibrarySearch.DiscrTreeFinder.localMatches","line":126,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DiscrTreeFinder.localMatches","doc":"Return matches from local constants.\n\nN.B. The efficiency of this could likely be considerably improved by caching in environment\nextension.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DiscrTreeFinder.localMatches\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DiscrTreeFinder</span>.<span class=\"name\">localMatches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod\">Std.Tactic.LibrarySearch.DeclMod</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L112-L118","name":"Std.Tactic.LibrarySearch.DiscrTreeFinder.buildImportCache","line":112,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DiscrTreeFinder.buildImportCache","doc":"Constructs an discriminator tree from the current environment.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DiscrTreeFinder.buildImportCache\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DiscrTreeFinder</span>.<span class=\"name\">buildImportCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(config : <a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod\">Std.Tactic.LibrarySearch.DeclMod</a></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L79-L85","name":"Std.Tactic.LibrarySearch.DiscrTreeFinder.cachePath","line":79,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DiscrTreeFinder.cachePath","doc":"Once we reach Mathlib, and have `cache` available,\nwe may still want to load a precomputed cache for `exact?` from a `.olean` file.\n\nThis makes no sense here in Std, where there is no caching mechanism.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DiscrTreeFinder.cachePath\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DiscrTreeFinder</span>.<span class=\"name\">cachePath</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L64-L64","name":"Std.Tactic.LibrarySearch.CandidateFinder","line":64,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.CandidateFinder","doc":"LibrarySearch has an extension mechanism for replacing the function used\nto find candidate lemmas.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.CandidateFinder\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">CandidateFinder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L56-L57","name":"Std.Tactic.LibrarySearch.instToStringDeclMod","line":56,"kind":"instance","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.instToStringDeclMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.instToStringDeclMod\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">instToStringDeclMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod\">Std.Tactic.LibrarySearch.DeclMod</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L54-L54","name":"Std.Tactic.LibrarySearch.instOrdDeclMod","line":54,"kind":"instance","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.instOrdDeclMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.instOrdDeclMod\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">instOrdDeclMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod\">Std.Tactic.LibrarySearch.DeclMod</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L54-L54","name":"Std.Tactic.LibrarySearch.instInhabitedDeclMod","line":54,"kind":"instance","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.instInhabitedDeclMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.instInhabitedDeclMod\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">instInhabitedDeclMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod\">Std.Tactic.LibrarySearch.DeclMod</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L54-L54","name":"Std.Tactic.LibrarySearch.instDecidableEqDeclMod","line":54,"kind":"instance","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.instDecidableEqDeclMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.instDecidableEqDeclMod\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">instDecidableEqDeclMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod\">Std.Tactic.LibrarySearch.DeclMod</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L53-L53","name":"Std.Tactic.LibrarySearch.DeclMod.mpr","line":53,"kind":"ctor","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod.mpr","doc":"the backward direction of an `iff` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod.mpr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DeclMod</span>.<span class=\"name\">mpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod\">Std.Tactic.LibrarySearch.DeclMod</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L52-L52","name":"Std.Tactic.LibrarySearch.DeclMod.mp","line":52,"kind":"ctor","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod.mp","doc":"the forward direction of an `iff` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod.mp\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DeclMod</span>.<span class=\"name\">mp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod\">Std.Tactic.LibrarySearch.DeclMod</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L51-L51","name":"Std.Tactic.LibrarySearch.DeclMod.none","line":51,"kind":"ctor","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod.none","doc":"the original declaration "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod.none\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DeclMod</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod\">Std.Tactic.LibrarySearch.DeclMod</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L50-L54","name":"Std.Tactic.LibrarySearch.DeclMod","line":50,"kind":"inductive","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod","doc":"A \"modifier\" for a declaration.\n* `none` indicates the original declaration,\n* `mp` indicates that (possibly after binders) the declaration is an `↔`,\n  and we want to consider the forward direction,\n* `mpr` similarly, but for the backward direction.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.DeclMod\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DeclMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/LibrarySearch.lean#L41-L41","name":"Std.Tactic.LibrarySearch.discrTreeConfig","line":41,"kind":"def","docLink":"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.discrTreeConfig","doc":"Configuration for `DiscrTree`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/LibrarySearch.html#Std.Tactic.LibrarySearch.discrTreeConfig\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">discrTreeConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/WHNF.html#Lean.Meta.WhnfCoreConfig\">Lean.Meta.WhnfCoreConfig</a></div></div>"}]}