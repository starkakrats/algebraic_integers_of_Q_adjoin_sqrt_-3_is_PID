{"name":"Std.Tactic.Lint.Simp","instances":[],"imports":["Init","Lean.Meta.Tactic.Simp.Main","Std.Tactic.Lint.Basic","Std.Tactic.OpenPrivate","Std.Util.LibraryNote"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L217-L236","name":"Std.Tactic.Lint.simpComm","line":217,"kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.simpComm","doc":"A linter for commutativity lemmas that are marked simp. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.simpComm\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">simpComm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter\">Std.Tactic.Lint.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L197-L208","name":"Std.Tactic.Lint.simpVarHead","line":197,"kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.simpVarHead","doc":"A linter for simp lemmas whose lhs has a variable as head symbol,\nand which hence never fire.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.simpVarHead\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">simpVarHead</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter\">Std.Tactic.Lint.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L106-L143","name":"Std.Tactic.Lint.simpNF","line":106,"kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.simpNF","doc":"A linter for simp lemmas whose lhs is not in simp-normal form, and which hence never fire. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.simpNF\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">simpNF</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Lint/Basic.html#Std.Tactic.Lint.Linter\">Std.Tactic.Lint.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L96-L103","name":"Std.Tactic.Lint.formatLemmas","line":96,"kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.formatLemmas","doc":"Render the list of simp lemmas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.formatLemmas\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">formatLemmas</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(usedSimps : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L92-L93","name":"Std.Tactic.Lint.decorateError","line":92,"kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.decorateError","doc":"Add message `msg` to any errors thrown inside `k`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.decorateError\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">decorateError</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(msg : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L85-L87","name":"Lean.Meta.DiscrTree.elements.trieElements","line":85,"kind":"opaque","docLink":"./Std/Tactic/Lint/Simp.html#Lean.Meta.DiscrTree.elements.trieElements","doc":"Returns the list of elements in the trie. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Lean.Meta.DiscrTree.elements.trieElements\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">elements</span>.<span class=\"name\">trieElements</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(arr : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Trie\">Lean.Meta.DiscrTree.Trie</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L81-L87","name":"Lean.Meta.DiscrTree.elements","line":81,"kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Lean.Meta.DiscrTree.elements","doc":"Returns the list of elements in the discrimination tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Lean.Meta.DiscrTree.elements\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">elements</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(d : <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">Lean.Meta.DiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L76-L77","name":"Std.Tactic.Lint.isSimpTheorem","line":76,"kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.isSimpTheorem","doc":"Returns true if this is a `@[simp]` declaration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.isSimpTheorem\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">isSimpTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(declName : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L67-L73","name":"Std.Tactic.Lint.checkAllSimpTheoremInfos","line":67,"kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.checkAllSimpTheoremInfos","doc":"Constructs a message from all the simp theorems encoded in the given type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.checkAllSimpTheoremInfos\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">checkAllSimpTheoremInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo\">Std.Tactic.Lint.SimpTheoremInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L60-L64","name":"Std.Tactic.Lint.isSimpEq","line":60,"kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.isSimpEq","doc":"Checks whether two expressions are equal for the simplifier. That is,\nthey are reducibly-definitional equal, and they have the same head symbol. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.isSimpEq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">isSimpEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(a : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(whnfFirst : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L49-L56","name":"Std.Tactic.Lint.withSimpTheoremInfos","line":49,"kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.withSimpTheoremInfos","doc":"Runs the continuation on all the simp theorems encoded in the given type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.withSimpTheoremInfos\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">withSimpTheoremInfos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(ty : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><a href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo\">Std.Tactic.Lint.SimpTheoremInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L36-L45","name":"Std.Tactic.Lint.isConditionalHyps","line":36,"kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.isConditionalHyps","doc":"Given the list of hypotheses, is this a conditional rewrite rule? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.isConditionalHyps\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">isConditionalHyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(lhs : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L33-L33","name":"Std.Tactic.Lint.SimpTheoremInfo.rhs","line":33,"kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo.rhs","doc":"The result of replacement "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo.rhs\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo\">Std.Tactic.Lint.SimpTheoremInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L31-L31","name":"Std.Tactic.Lint.SimpTheoremInfo.lhs","line":31,"kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo.lhs","doc":"The thing to replace "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo.lhs\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span>.<span class=\"name\">lhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo\">Std.Tactic.Lint.SimpTheoremInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L29-L29","name":"Std.Tactic.Lint.SimpTheoremInfo.isConditional","line":29,"kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo.isConditional","doc":"True if this is a conditional rewrite rule "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo.isConditional\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span>.<span class=\"name\">isConditional</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo\">Std.Tactic.Lint.SimpTheoremInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L27-L27","name":"Std.Tactic.Lint.SimpTheoremInfo.hyps","line":27,"kind":"def","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo.hyps","doc":"The hypotheses of the theorem "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo.hyps\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span>.<span class=\"name\">hyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(self : <a href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo\">Std.Tactic.Lint.SimpTheoremInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L25-L25","name":"Std.Tactic.Lint.SimpTheoremInfo.mk","line":25,"kind":"ctor","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(hyps : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(isConditional : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(lhs : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(rhs : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo\">Std.Tactic.Lint.SimpTheoremInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Tactic/Lint/Simp.lean#L25-L33","name":"Std.Tactic.Lint.SimpTheoremInfo","line":25,"kind":"structure","docLink":"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo","doc":"The data associated to a simp theorem. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/Lint/Simp.html#Std.Tactic.Lint.SimpTheoremInfo\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}