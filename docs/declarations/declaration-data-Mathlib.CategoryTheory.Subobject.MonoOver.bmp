{"name":"Mathlib.CategoryTheory.Subobject.MonoOver","instances":[{"typeNames":["CategoryTheory.MonoOver"],"name":"CategoryTheory.instCategoryMonoOver","className":"CategoryTheory.Category"},{"typeNames":["CategoryTheory.MonoOver"],"name":"CategoryTheory.MonoOver.instCoeOutMonoOver","className":"CoeOut"},{"typeNames":["CategoryTheory.MonoOver.forget"],"name":"CategoryTheory.MonoOver.instFullMonoOverInstCategoryMonoOverOverInstCategoryOverForget","className":"CategoryTheory.Full"},{"typeNames":["CategoryTheory.MonoOver.forget"],"name":"CategoryTheory.MonoOver.instFaithfulMonoOverInstCategoryMonoOverOverInstCategoryOverForget","className":"CategoryTheory.Faithful"},{"typeNames":["CategoryTheory.MonoOver.arrow"],"name":"CategoryTheory.MonoOver.mono","className":"CategoryTheory.Mono"},{"typeNames":["Quiver.Hom"],"name":"CategoryTheory.MonoOver.isThin","className":"Subsingleton"},{"typeNames":["CategoryTheory.MonoOver.map"],"name":"CategoryTheory.MonoOver.fullMap","className":"CategoryTheory.Full"},{"typeNames":["CategoryTheory.MonoOver.map"],"name":"CategoryTheory.MonoOver.faithful_map","className":"CategoryTheory.Faithful"},{"typeNames":["CategoryTheory.MonoOver.forget"],"name":"CategoryTheory.MonoOver.instIsRightAdjointOverInstCategoryOverMonoOverInstCategoryMonoOverForget","className":"CategoryTheory.IsRightAdjoint"},{"typeNames":["CategoryTheory.MonoOver.forget"],"name":"CategoryTheory.MonoOver.reflective","className":"CategoryTheory.Reflective"},{"typeNames":["CategoryTheory.MonoOver.exists"],"name":"CategoryTheory.MonoOver.faithful_exists","className":"CategoryTheory.Faithful"}],"imports":["Init","Mathlib.CategoryTheory.Limits.Over","Mathlib.CategoryTheory.Limits.Shapes.Images","Mathlib.CategoryTheory.Adjunction.Reflective"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L449-L451","name":"CategoryTheory.MonoOver.existsPullbackAdj","line":449,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.existsPullbackAdj","doc":"`exists` is adjoint to `pullback` when images exist "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.existsPullbackAdj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">existsPullbackAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.HasImages\">CategoryTheory.Limits.HasImages</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullbacks.html#CategoryTheory.Limits.HasPullbacks\">CategoryTheory.Limits.HasPullbacks</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.exists\">CategoryTheory.MonoOver.exists</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullback\">CategoryTheory.MonoOver.pullback</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L438-L445","name":"CategoryTheory.MonoOver.existsIsoMap","line":438,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.existsIsoMap","doc":"When `f : X ⟶ Y` is a monomorphism, `exists f` agrees with `map f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.existsIsoMap\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">existsIsoMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.HasImages\">CategoryTheory.Limits.HasImages</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.exists\">CategoryTheory.MonoOver.exists</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L433-L433","name":"CategoryTheory.MonoOver.faithful_exists","line":433,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.faithful_exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.faithful_exists\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">faithful_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.HasImages\">CategoryTheory.Limits.HasImages</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Faithful\">CategoryTheory.Faithful</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.exists\">CategoryTheory.MonoOver.exists</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L429-L430","name":"CategoryTheory.MonoOver.exists","line":429,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.exists","doc":"In the case where `f` is not a monomorphism but `C` has images,\nwe can still take the \"forward map\" under it, which agrees with `MonoOver.map f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.exists\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.HasImages\">CategoryTheory.Limits.HasImages</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L416-L417","name":"CategoryTheory.MonoOver.forgetImage","line":416,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forgetImage","doc":"Forgetting that a monomorphism over `X` is a monomorphism, then taking its image,\nis the identity functor.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forgetImage\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">forgetImage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.HasImages\">CategoryTheory.Limits.HasImages</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">CategoryTheory.MonoOver.image</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L410-L410","name":"CategoryTheory.MonoOver.reflective","line":410,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.reflective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.reflective\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">reflective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.HasImages\">CategoryTheory.Limits.HasImages</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Adjunction/Reflective.html#CategoryTheory.Reflective\">CategoryTheory.Reflective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L406-L408","name":"CategoryTheory.MonoOver.instIsRightAdjointOverInstCategoryOverMonoOverInstCategoryMonoOverForget","line":406,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.instIsRightAdjointOverInstCategoryOverMonoOverInstCategoryMonoOverForget","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.instIsRightAdjointOverInstCategoryOverMonoOverInstCategoryMonoOverForget\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">instIsRightAdjointOverInstCategoryOverMonoOverInstCategoryMonoOverForget</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.HasImages\">CategoryTheory.Limits.HasImages</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.IsRightAdjoint\">CategoryTheory.IsRightAdjoint</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L381-L403","name":"CategoryTheory.MonoOver.imageForgetAdj","line":381,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.imageForgetAdj","doc":"`MonoOver.image : Over X ⥤ MonoOver X` is left adjoint to\n`MonoOver.forget : MonoOver X ⥤ Over X`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.imageForgetAdj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">imageForgetAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.HasImages\">CategoryTheory.Limits.HasImages</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.MonoOver.image</span> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L365-L375","name":"CategoryTheory.MonoOver.image","line":365,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.image","doc":"Taking the image of a morphism gives a functor `Over X ⥤ MonoOver X`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.image\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.HasImages\">CategoryTheory.Limits.HasImages</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L364-L364","name":"CategoryTheory.MonoOver.image_map","line":364,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.image_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.image_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">image_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.HasImages\">CategoryTheory.Limits.HasImages</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.MonoOver.image</span>.map <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">X</span></span>)</span>.preimage\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over.homMk\">CategoryTheory.Over.homMk</a>\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.image.lift\">CategoryTheory.Limits.image.lift</a>\n        <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.MonoFactorisation.mk\">CategoryTheory.Limits.MonoFactorisation.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.image\">CategoryTheory.Limits.image</a> <span class=\"fn\"><span class=\"fn\">g</span>.hom</span></span>)</span>\n          <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.image.ι\">CategoryTheory.Limits.image.ι</a> <span class=\"fn\"><span class=\"fn\">g</span>.hom</span></span>)</span>\n          <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">k</span>.left</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.factorThruImage\">CategoryTheory.Limits.factorThruImage</a> <span class=\"fn\"><span class=\"fn\">g</span>.hom</span></span>)</span></span>)</span></span>)</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L364-L364","name":"CategoryTheory.MonoOver.image_obj","line":364,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.image_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.image_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">image_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.HasImages\">CategoryTheory.Limits.HasImages</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">CategoryTheory.MonoOver.image</span>.obj <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.imageMonoOver\">CategoryTheory.MonoOver.imageMonoOver</a> <span class=\"fn\"><span class=\"fn\">f</span>.hom</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L352-L353","name":"CategoryTheory.MonoOver.imageMonoOver_arrow","line":352,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.imageMonoOver_arrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.imageMonoOver_arrow\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">imageMonoOver_arrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.HasImage\">CategoryTheory.Limits.HasImage</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.imageMonoOver\">CategoryTheory.MonoOver.imageMonoOver</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.image.ι\">CategoryTheory.Limits.image.ι</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L347-L348","name":"CategoryTheory.MonoOver.imageMonoOver","line":347,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.imageMonoOver","doc":"The `MonoOver Y` for the image inclusion for a morphism `f : X ⟶ Y`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.imageMonoOver\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">imageMonoOver</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Images.html#CategoryTheory.Limits.HasImage\">CategoryTheory.Limits.HasImage</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L333-L334","name":"CategoryTheory.MonoOver.pullbackMapSelf","line":333,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullbackMapSelf","doc":"`MonoOver.map f` followed by `MonoOver.pullback f` is the identity. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullbackMapSelf\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">pullbackMapSelf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullbacks.html#CategoryTheory.Limits.HasPullbacks\">CategoryTheory.Limits.HasPullbacks</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullback\">CategoryTheory.MonoOver.pullback</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L327-L329","name":"CategoryTheory.MonoOver.mapPullbackAdj","line":327,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapPullbackAdj","doc":"`map f` is left adjoint to `pullback f` when `f` is a monomorphism "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapPullbackAdj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">mapPullbackAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullbacks.html#CategoryTheory.Limits.HasPullbacks\">CategoryTheory.Limits.HasPullbacks</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullback\">CategoryTheory.MonoOver.pullback</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L306-L317","name":"CategoryTheory.MonoOver.congr","line":306,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.congr","doc":"An equivalence of categories `e` between `C` and `D` induces an equivalence between\n`MonoOver X` and `MonoOver (e.functor.obj X)` whenever `X` is an object of `C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.congr\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₂, u₂}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.functor</span>.obj <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L305-L305","name":"CategoryTheory.MonoOver.congr_counitIso","line":305,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.congr_counitIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.congr_counitIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">congr_counitIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₂, u₂}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.congr\">CategoryTheory.MonoOver.congr</a> <span class=\"fn\">X</span> <span class=\"fn\">e</span></span>)</span>.counitIso</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.NatIso.ofComponents\">CategoryTheory.NatIso.ofComponents</a> <span class=\"fn\">fun (<span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.functor</span>.obj <span class=\"fn\">X</span></span>)</span></span>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.isoMk\">CategoryTheory.MonoOver.isoMk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.counitIso</span>.app <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.obj</span>.left</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L305-L305","name":"CategoryTheory.MonoOver.congr_unitIso","line":305,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.congr_unitIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.congr_unitIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">congr_unitIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₂, u₂}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.congr\">CategoryTheory.MonoOver.congr</a> <span class=\"fn\">X</span> <span class=\"fn\">e</span></span>)</span>.unitIso</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.NatIso.ofComponents\">CategoryTheory.NatIso.ofComponents</a> <span class=\"fn\">fun (<span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.isoMk\">CategoryTheory.MonoOver.isoMk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.unitIso</span>.app <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.obj</span>.left</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L305-L305","name":"CategoryTheory.MonoOver.congr_functor","line":305,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.congr_functor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.congr_functor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">congr_functor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₂, u₂}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.congr\">CategoryTheory.MonoOver.congr</a> <span class=\"fn\">X</span> <span class=\"fn\">e</span></span>)</span>.functor</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift\">CategoryTheory.MonoOver.lift</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over.post\">CategoryTheory.Over.post</a> <span class=\"fn\"><span class=\"fn\">e</span>.functor</span></span>)</span>\n    <span class=\"fn\">(_ :\n      <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>),\n        <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over.post\">CategoryTheory.Over.post</a> <span class=\"fn\"><span class=\"fn\">e</span>.functor</span></span>)</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">X</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span></span>)</span>.hom</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L305-L305","name":"CategoryTheory.MonoOver.congr_inverse","line":305,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.congr_inverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.congr_inverse\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">congr_inverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₂, u₂}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.congr\">CategoryTheory.MonoOver.congr</a> <span class=\"fn\">X</span> <span class=\"fn\">e</span></span>)</span>.inverse</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift\">CategoryTheory.MonoOver.lift</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over.post\">CategoryTheory.Over.post</a> <span class=\"fn\"><span class=\"fn\">e</span>.inverse</span></span>)</span>\n      <span class=\"fn\">(_ :\n        <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.functor</span>.obj <span class=\"fn\">X</span></span>)</span></span>),\n          <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a>\n            <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over.post\">CategoryTheory.Over.post</a> <span class=\"fn\"><span class=\"fn\">e</span>.inverse</span></span>)</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.functor</span>.obj <span class=\"fn\">X</span></span>)</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span></span>)</span>.hom</span></span></span>)</span></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapIso\">CategoryTheory.MonoOver.mapIso</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.unitIso</span>.symm</span>.app <span class=\"fn\">X</span></span>)</span></span>)</span>.functor</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L292-L296","name":"CategoryTheory.MonoOver.mapIso","line":292,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapIso","doc":"Isomorphic objects have equivalent `MonoOver` categories.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">mapIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">A</span></span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">B</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L291-L291","name":"CategoryTheory.MonoOver.mapIso_functor","line":291,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapIso_functor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapIso_functor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">mapIso_functor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapIso\">CategoryTheory.MonoOver.mapIso</a> <span class=\"fn\">e</span></span>)</span>.functor</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\"><span class=\"fn\">e</span>.hom</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L291-L291","name":"CategoryTheory.MonoOver.mapIso_counitIso","line":291,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapIso_counitIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapIso_counitIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">mapIso_counitIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapIso\">CategoryTheory.MonoOver.mapIso</a> <span class=\"fn\">e</span></span>)</span>.counitIso</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapComp\">CategoryTheory.MonoOver.mapComp</a> <span class=\"fn\"><span class=\"fn\">e</span>.inv</span> <span class=\"fn\"><span class=\"fn\">e</span>.hom</span></span>)</span>.symm</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.trans\">≪≫</a>     <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToIso\">CategoryTheory.eqToIso</a>\n        <span class=\"fn\">(_ :\n          <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">e</span>.inv</span> <span class=\"fn\"><span class=\"fn\">e</span>.hom</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>             <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">B</span></span>)</span></span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.trans\">≪≫</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapId\">CategoryTheory.MonoOver.mapId</a> <span class=\"fn\">B</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L291-L291","name":"CategoryTheory.MonoOver.mapIso_unitIso","line":291,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapIso_unitIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapIso_unitIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">mapIso_unitIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapIso\">CategoryTheory.MonoOver.mapIso</a> <span class=\"fn\">e</span></span>)</span>.unitIso</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapComp\">CategoryTheory.MonoOver.mapComp</a> <span class=\"fn\"><span class=\"fn\">e</span>.hom</span> <span class=\"fn\"><span class=\"fn\">e</span>.inv</span></span>)</span>.symm</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.trans\">≪≫</a>       <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToIso\">CategoryTheory.eqToIso</a>\n          <span class=\"fn\">(_ :\n            <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">e</span>.hom</span> <span class=\"fn\"><span class=\"fn\">e</span>.inv</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>               <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">A</span></span>)</span></span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.trans\">≪≫</a>         <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapId\">CategoryTheory.MonoOver.mapId</a> <span class=\"fn\">A</span></span></span></span>)</span>.symm</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L291-L291","name":"CategoryTheory.MonoOver.mapIso_inverse","line":291,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapIso_inverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapIso_inverse\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">mapIso_inverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{B : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapIso\">CategoryTheory.MonoOver.mapIso</a> <span class=\"fn\">e</span></span>)</span>.inverse</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\"><span class=\"fn\">e</span>.inv</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L286-L286","name":"CategoryTheory.MonoOver.faithful_map","line":286,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.faithful_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.faithful_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">faithful_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Faithful\">CategoryTheory.Faithful</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L279-L283","name":"CategoryTheory.MonoOver.fullMap","line":279,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.fullMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.fullMap\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">fullMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Full\">CategoryTheory.Full</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L275-L276","name":"CategoryTheory.MonoOver.map_obj_arrow","line":275,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map_obj_arrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map_obj_arrow\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">map_obj_arrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\">f</span></span>)</span>.obj <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L270-L271","name":"CategoryTheory.MonoOver.map_obj_left","line":270,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map_obj_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map_obj_left\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">map_obj_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\">f</span></span>)</span>.obj <span class=\"fn\">g</span></span>)</span>.obj</span>.left</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.obj</span>.left</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L263-L264","name":"CategoryTheory.MonoOver.mapId","line":263,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapId","doc":"`MonoOver.map` preserves the identity (up to a natural isomorphism). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapId\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">mapId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L256-L257","name":"CategoryTheory.MonoOver.mapComp","line":256,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapComp","doc":"`MonoOver.map` commutes with composition (up to a natural isomorphism). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mapComp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">mapComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\">CategoryTheory.MonoOver.map</a> <span class=\"fn\">g</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L251-L252","name":"CategoryTheory.MonoOver.map","line":251,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map","doc":"We can map monomorphisms over `X` to monomorphisms over `Y`\nby post-composition with a monomorphism `f : X ⟶ Y`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L237-L239","name":"CategoryTheory.MonoOver.pullback_obj_arrow","line":237,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullback_obj_arrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullback_obj_arrow\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">pullback_obj_arrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullbacks.html#CategoryTheory.Limits.HasPullbacks\">CategoryTheory.Limits.HasPullbacks</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullback\">CategoryTheory.MonoOver.pullback</a> <span class=\"fn\">f</span></span>)</span>.obj <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">CategoryTheory.Limits.pullback.snd</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L231-L233","name":"CategoryTheory.MonoOver.pullback_obj_left","line":231,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullback_obj_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullback_obj_left\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">pullback_obj_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullbacks.html#CategoryTheory.Limits.HasPullbacks\">CategoryTheory.Limits.HasPullbacks</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullback\">CategoryTheory.MonoOver.pullback</a> <span class=\"fn\">f</span></span>)</span>.obj <span class=\"fn\">g</span></span>)</span>.obj</span>.left</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullbacks.html#CategoryTheory.Limits.pullback\">CategoryTheory.Limits.pullback</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L226-L227","name":"CategoryTheory.MonoOver.pullbackId","line":226,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullbackId","doc":"pullback preserves the identity (up to a natural isomorphism) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullbackId\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">pullbackId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullbacks.html#CategoryTheory.Limits.HasPullbacks\">CategoryTheory.Limits.HasPullbacks</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullback\">CategoryTheory.MonoOver.pullback</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L221-L222","name":"CategoryTheory.MonoOver.pullbackComp","line":221,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullbackComp","doc":"pullback commutes with composition (up to a natural isomorphism) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullbackComp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">pullbackComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullbacks.html#CategoryTheory.Limits.HasPullbacks\">CategoryTheory.Limits.HasPullbacks</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullback\">CategoryTheory.MonoOver.pullback</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullback\">CategoryTheory.MonoOver.pullback</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullback\">CategoryTheory.MonoOver.pullback</a> <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L214-L217","name":"CategoryTheory.MonoOver.pullback","line":214,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullback","doc":"When `C` has pullbacks, a morphism `f : X ⟶ Y` induces a functor `MonoOver Y ⥤ MonoOver X`,\nby pulling back a monomorphism along `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.pullback\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">pullback</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullbacks.html#CategoryTheory.Limits.HasPullbacks\">CategoryTheory.Limits.HasPullbacks</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L192-L205","name":"CategoryTheory.MonoOver.slice","line":192,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.slice","doc":"Monomorphisms over an object `f : Over A` in an over category\nare equivalent to monomorphisms over the source of `f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.slice\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">slice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">A</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">f</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over.iteratedSliceEquiv\">CategoryTheory.Over.iteratedSliceEquiv</a> <span class=\"fn\">f</span></span>)</span>.functor</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">f</span></span>)</span>.obj <span class=\"fn\">g</span></span>)</span></span>)</span>.hom</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\">∀ (<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>),\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over.iteratedSliceEquiv\">CategoryTheory.Over.iteratedSliceEquiv</a> <span class=\"fn\">f</span></span>)</span>.inverse</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span>)</span>.obj <span class=\"fn\">g</span></span>)</span></span>)</span>.hom</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\"><span class=\"fn\">f</span>.left</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L183-L186","name":"CategoryTheory.MonoOver.lift_obj_arrow","line":183,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift_obj_arrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift_obj_arrow\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">lift_obj_arrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₂, u₂}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">X</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">Y</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span></span>)</span>.hom</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift\">CategoryTheory.MonoOver.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">h</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">Y</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span></span>)</span>.hom</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L176-L179","name":"CategoryTheory.MonoOver.lift_comm","line":176,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift_comm\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">lift_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">X</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">Y</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span></span>)</span>.hom</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift\">CategoryTheory.MonoOver.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">h</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">X</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">F</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L171-L172","name":"CategoryTheory.MonoOver.liftId","line":171,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.liftId","doc":"`MonoOver.lift` preserves the identity functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.liftId\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">liftId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift\">CategoryTheory.MonoOver.lift</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">X</span></span>)</span></span>)</span>\n    <span class=\"fn\">(_ : <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.obj</span>.hom</span></span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L165-L167","name":"CategoryTheory.MonoOver.liftComp","line":165,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.liftComp","doc":"`MonoOver.lift` commutes with composition of functors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.liftComp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">liftComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₂, u₂}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">Y</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">Z</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">X</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span></span>)</span>.hom</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">Y</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span></span>)</span>.hom</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift\">CategoryTheory.MonoOver.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">h₁</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift\">CategoryTheory.MonoOver.lift</a> <span class=\"fn\">G</span> <span class=\"fn\">h₂</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift\">CategoryTheory.MonoOver.lift</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span>)</span>\n    <span class=\"fn\">(_ :\n      <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>),\n        <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a>\n          <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.obj\n              <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">Y</span></span>)</span>.obj\n                <span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">X</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span></span>,\n                  <span class=\"fn\">property</span> := <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">X</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span></span>)</span>.hom</span></span>)</span> }</span></span>)</span></span>)</span>.hom</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L160-L161","name":"CategoryTheory.MonoOver.liftIso","line":160,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.liftIso","doc":"Isomorphic functors `Over Y ⥤ Over X` lift to isomorphic functors `MonoOver Y ⥤ MonoOver X`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.liftIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">liftIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₂, u₂}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₁ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">X</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F₂ : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">X</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F₁</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">Y</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span></span>)</span>.hom</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F₂</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">Y</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span></span>)</span>.hom</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(i : <span class=\"fn\"><span class=\"fn\">F₁</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">F₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift\">CategoryTheory.MonoOver.lift</a> <span class=\"fn\">F₁</span> <span class=\"fn\">h₁</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift\">CategoryTheory.MonoOver.lift</a> <span class=\"fn\">F₂</span> <span class=\"fn\">h₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L151-L155","name":"CategoryTheory.MonoOver.lift","line":151,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift","doc":"Lift a functor between over categories to a functor between `MonoOver` categories,\ngiven suitable evidence that morphisms are taken to monomorphisms.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₂, u₂}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">X</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">Y</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span></span>)</span>.hom</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L150-L150","name":"CategoryTheory.MonoOver.lift_obj_obj","line":150,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift_obj_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift_obj_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">lift_obj_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₂, u₂}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">X</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">Y</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span></span>)</span>.hom</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift\">CategoryTheory.MonoOver.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">h</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span>.obj</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">Y</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L150-L150","name":"CategoryTheory.MonoOver.lift_map","line":150,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">lift_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{D : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₂, u₂}</a>     <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <span class=\"fn\">D</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">X</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.obj <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">Y</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span></span>)</span>.hom</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">X_1 </span>Y_1 : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">Y</span></span>} (<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">X_1</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y_1</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.lift\">CategoryTheory.MonoOver.lift</a> <span class=\"fn\">F</span> <span class=\"fn\">h</span></span>)</span>.map <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">X</span></span>)</span>.preimage\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">Y</span></span>)</span> <span class=\"fn\">F</span></span>)</span>.map <span class=\"fn\">k</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L143-L144","name":"CategoryTheory.MonoOver.mk'ArrowIso","line":143,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'ArrowIso","doc":"If `f : MonoOver X`, then `mk' f.arrow` is of course just `f`, but not definitionally, so we\npackage it as an isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'ArrowIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">mk'ArrowIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'\">CategoryTheory.MonoOver.mk'</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L134-L137","name":"CategoryTheory.MonoOver.isoMk","line":134,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.isoMk","doc":"Convenience constructor for an isomorphism in monomorphisms over `X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.isoMk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">isoMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.obj</span>.left</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.obj</span>.left</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">h</span>.hom</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">f</span></span></span>)</span>\n  <a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#_auto._@.Mathlib.CategoryTheory.Subobject.MonoOver._hyg.567\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L133-L133","name":"CategoryTheory.MonoOver.isoMk_hom","line":133,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.isoMk_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.isoMk_hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">isoMk_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.obj</span>.left</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.obj</span>.left</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">h</span>.hom</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">f</span></span></span>)</span>\n  <a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#_auto._@.Mathlib.CategoryTheory.Subobject.MonoOver._hyg.567\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.isoMk\">CategoryTheory.MonoOver.isoMk</a> <span class=\"fn\">h</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.homMk\">CategoryTheory.MonoOver.homMk</a> <span class=\"fn\"><span class=\"fn\">h</span>.hom</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L133-L133","name":"CategoryTheory.MonoOver.isoMk_inv","line":133,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.isoMk_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.isoMk_inv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">isoMk_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.obj</span>.left</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.obj</span>.left</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">h</span>.hom</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">f</span></span></span>)</span>\n  <a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#_auto._@.Mathlib.CategoryTheory.Subobject.MonoOver._hyg.567\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.isoMk\">CategoryTheory.MonoOver.isoMk</a> <span class=\"fn\">h</span></span>)</span>.inv</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.homMk\">CategoryTheory.MonoOver.homMk</a> <span class=\"fn\"><span class=\"fn\">h</span>.inv</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L127-L129","name":"CategoryTheory.MonoOver.homMk","line":127,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.homMk","doc":"Convenience constructor for a morphism in monomorphisms over `X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.homMk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">homMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.obj</span>.left</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.obj</span>.left</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(w : <span class=\"fn\"><a href=\"./Init/Meta.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">f</span></span></span>)</span>\n  <a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#_auto._@.Mathlib.CategoryTheory.Subobject.MonoOver._hyg.499\">_auto✝</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L122-L123","name":"CategoryTheory.MonoOver.w","line":122,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.w","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.w\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">w</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">k</span>.left</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">g</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L121-L121","name":"CategoryTheory.MonoOver.w_assoc","line":121,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.w_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.w_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">w_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{g : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(k : <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Z : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">k</span>.left</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">h</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L114-L118","name":"CategoryTheory.MonoOver.isThin","line":114,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.isThin","doc":"The category of monomorphisms over X is a thin category,\nwhich makes defining its skeleton easy. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.isThin\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">isThin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.IsThin\">Quiver.IsThin</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L108-L109","name":"CategoryTheory.MonoOver.mono","line":108,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mono\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L105-L106","name":"CategoryTheory.MonoOver.instFaithfulMonoOverInstCategoryMonoOverOverInstCategoryOverForget","line":105,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.instFaithfulMonoOverInstCategoryMonoOverOverInstCategoryOverForget","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.instFaithfulMonoOverInstCategoryMonoOverOverInstCategoryOverForget\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">instFaithfulMonoOverInstCategoryMonoOverOverInstCategoryOverForget</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Faithful\">CategoryTheory.Faithful</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L102-L103","name":"CategoryTheory.MonoOver.instFullMonoOverInstCategoryMonoOverOverInstCategoryOverForget","line":102,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.instFullMonoOverInstCategoryMonoOverOverInstCategoryOverForget","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.instFullMonoOverInstCategoryMonoOverOverInstCategoryOverForget\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">instFullMonoOverInstCategoryMonoOverOverInstCategoryOverForget</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Full\">CategoryTheory.Full</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L98-L99","name":"CategoryTheory.MonoOver.forget_obj_hom","line":98,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget_obj_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget_obj_hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">forget_obj_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">X</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span>.hom</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L93-L94","name":"CategoryTheory.MonoOver.mk'_arrow","line":93,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'_arrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'_arrow\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">mk'_arrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\">CategoryTheory.MonoOver.arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'\">CategoryTheory.MonoOver.mk'</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L88-L89","name":"CategoryTheory.MonoOver.arrow","line":88,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow","doc":"Convenience notation for the underlying arrow of a monomorphism over X. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.arrow\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">arrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.obj</span>.left</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L83-L84","name":"CategoryTheory.MonoOver.mk'_coe'","line":83,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'_coe'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'_coe'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">mk'_coe'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'\">CategoryTheory.MonoOver.mk'</a> <span class=\"fn\">f</span></span>)</span>.obj</span>.left</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">A</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L78-L79","name":"CategoryTheory.MonoOver.forget_obj_left","line":78,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget_obj_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget_obj_left\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">forget_obj_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\">CategoryTheory.MonoOver.forget</a> <span class=\"fn\">X</span></span>)</span>.obj <span class=\"fn\">f</span></span>)</span>.left</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.obj</span>.left</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L75-L75","name":"CategoryTheory.MonoOver.instCoeOutMonoOver","line":75,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.instCoeOutMonoOver","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.instCoeOutMonoOver\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">instCoeOutMonoOver</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L71-L72","name":"CategoryTheory.MonoOver.forget","line":71,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget","doc":"The inclusion from monomorphisms over X to morphisms over X. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.forget\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">forget</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over\">CategoryTheory.Over</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L65-L67","name":"CategoryTheory.MonoOver.mk'","line":65,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'","doc":"Construct a `MonoOver X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hf : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L64-L64","name":"CategoryTheory.MonoOver.mk'_obj","line":64,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span>.<span class=\"name\">mk'_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{A : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">A</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[hf : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver.mk'\">CategoryTheory.MonoOver.mk'</a> <span class=\"fn\">f</span></span>)</span>.obj</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Over.html#CategoryTheory.Over.mk\">CategoryTheory.Over.mk</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L58-L59","name":"CategoryTheory.instCategoryMonoOver","line":58,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.instCategoryMonoOver","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.instCategoryMonoOver\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">instCategoryMonoOver</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, max u₁ v₁}</a>            <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\">CategoryTheory.MonoOver</a> <span class=\"fn\">X</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/CategoryTheory/Subobject/MonoOver.lean#L54-L55","name":"CategoryTheory.MonoOver","line":54,"kind":"def","docLink":"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver","doc":"The category of monomorphisms into `X` as a full subcategory of the over category.\nThis isn't skeletal, so it's not a partial order.\n\nLater we define `Subobject X` as the quotient of this by isomorphisms.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Subobject/MonoOver.html#CategoryTheory.MonoOver\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">MonoOver</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{C : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v₁, u₁}</a>     <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(X : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u₁ v₁)</div></div>"}]}