{"name":"Mathlib.Combinatorics.Young.SemistandardTableau","instances":[{"typeNames":["Ssyt","Nat"],"name":"Ssyt.instFunLike","className":"DFunLike"},{"typeNames":["Ssyt"],"name":"Ssyt.instCoeFunSsytForAllNat","className":"CoeFun"},{"typeNames":["Ssyt"],"name":"Ssyt.instInhabitedSsyt","className":"Inhabited"}],"imports":["Init","Mathlib.Combinatorics.Young.YoungDiagram"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L157-L158","name":"Ssyt.instInhabitedSsyt","line":157,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.instInhabitedSsyt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.instInhabitedSsyt\"><span class=\"name\">Ssyt</span>.<span class=\"name\">instInhabitedSsyt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L152-L154","name":"Ssyt.highestWeight_apply","line":152,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.highestWeight_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.highestWeight_apply\"><span class=\"name\">Ssyt</span>.<span class=\"name\">highestWeight_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.highestWeight\">Ssyt.highestWeight</a> <span class=\"fn\">μ</span></span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> then <span class=\"fn\">i</span> else <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L140-L148","name":"Ssyt.highestWeight","line":140,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.highestWeight","doc":"The \"highest weight\" SSYT of a given shape has all i's in row i, for each i. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.highestWeight\"><span class=\"name\">Ssyt</span>.<span class=\"name\">highestWeight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L132-L136","name":"Ssyt.col_weak","line":132,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.col_weak","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.col_weak\"><span class=\"name\">Ssyt</span>.<span class=\"name\">col_weak</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i2 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cell : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i2</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i1</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i2</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L125-L129","name":"Ssyt.row_weak_of_le","line":125,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.row_weak_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.row_weak_of_le\"><span class=\"name\">Ssyt</span>.<span class=\"name\">row_weak_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j2 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hj : <span class=\"fn\"><span class=\"fn\">j1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cell : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j2</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i</span> <span class=\"fn\">j1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i</span> <span class=\"fn\">j2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L121-L122","name":"Ssyt.zeros","line":121,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.zeros","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.zeros\"><span class=\"name\">Ssyt</span>.<span class=\"name\">zeros</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(not_cell : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> ∉ <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L116-L118","name":"Ssyt.col_strict","line":116,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.col_strict","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.col_strict\"><span class=\"name\">Ssyt</span>.<span class=\"name\">col_strict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i2 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hi : <span class=\"fn\"><span class=\"fn\">i1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcell : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i2</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i1</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i2</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L111-L113","name":"Ssyt.row_weak","line":111,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.row_weak","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.row_weak\"><span class=\"name\">Ssyt</span>.<span class=\"name\">row_weak</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j2 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hj : <span class=\"fn\"><span class=\"fn\">j1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hcell : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j2</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i</span> <span class=\"fn\">j1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i</span> <span class=\"fn\">j2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L106-L108","name":"Ssyt.copy_eq","line":106,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.copy_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.copy_eq\"><span class=\"name\">Ssyt</span>.<span class=\"name\">copy_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(entry' : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">entry'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">T</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.copy\">Ssyt.copy</a> <span class=\"fn\">T</span> <span class=\"fn\">entry'</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">T</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L101-L103","name":"Ssyt.coe_copy","line":101,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.coe_copy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.coe_copy\"><span class=\"name\">Ssyt</span>.<span class=\"name\">coe_copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(entry' : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">entry'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">T</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.copy\">Ssyt.copy</a> <span class=\"fn\">T</span> <span class=\"fn\">entry'</span> <span class=\"fn\">h</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">entry'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L92-L97","name":"Ssyt.copy","line":92,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.copy","doc":"Copy of an `Ssyt μ` with a new `entry` equal to the old one. Useful to fix definitional\nequalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.copy\"><span class=\"name\">Ssyt</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(entry' : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">entry'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">T</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L84-L87","name":"Ssyt.ext","line":84,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.ext\"><span class=\"name\">Ssyt</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">i </span>j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">T'</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">T</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">T'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L79-L80","name":"Ssyt.to_fun_eq_coe","line":79,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.to_fun_eq_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.to_fun_eq_coe\"><span class=\"name\">Ssyt</span>.<span class=\"name\">to_fun_eq_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{T : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.entry</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">T</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L75-L76","name":"Ssyt.instCoeFunSsytForAllNat","line":75,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.instCoeFunSsytForAllNat","doc":"Helper instance for when there's too many metavariables to apply `CoeFun.coe` directly. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.instCoeFunSsytForAllNat\"><span class=\"name\">Ssyt</span>.<span class=\"name\">instCoeFunSsytForAllNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L66-L71","name":"Ssyt.instFunLike","line":66,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.instFunLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.instFunLike\"><span class=\"name\">Ssyt</span>.<span class=\"name\">instFunLike</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>)</span> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L61-L61","name":"Ssyt.zeros'","line":61,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.zeros'","doc":"`entry` is required to be zero for all pairs `(i, j) ∉ μ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.zeros'\"><span class=\"name\">Ssyt</span>.<span class=\"name\">zeros'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> ∉ <span class=\"fn\">μ</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.entry\">Ssyt.entry</a> <span class=\"fn\">self</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L59-L59","name":"Ssyt.col_strict'","line":59,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.col_strict'","doc":"The entries in each column are strictly increasing (top to bottom). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.col_strict'\"><span class=\"name\">Ssyt</span>.<span class=\"name\">col_strict'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i2 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i2</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i2</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.entry\">Ssyt.entry</a> <span class=\"fn\">self</span> <span class=\"fn\">i1</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.entry\">Ssyt.entry</a> <span class=\"fn\">self</span> <span class=\"fn\">i2</span> <span class=\"fn\">j</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L57-L57","name":"Ssyt.row_weak'","line":57,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.row_weak'","doc":"The entries in each row are weakly increasing (left to right). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.row_weak'\"><span class=\"name\">Ssyt</span>.<span class=\"name\">row_weak'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{i : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j1 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{j2 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j2</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j2</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.entry\">Ssyt.entry</a> <span class=\"fn\">self</span> <span class=\"fn\">i</span> <span class=\"fn\">j1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.entry\">Ssyt.entry</a> <span class=\"fn\">self</span> <span class=\"fn\">i</span> <span class=\"fn\">j2</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L55-L55","name":"Ssyt.entry","line":55,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.entry","doc":"`entry i j` is value of the `(i, j)` entry of the SSYT `μ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.entry\"><span class=\"name\">Ssyt</span>.<span class=\"name\">entry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(self : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L53-L53","name":"Ssyt.mk","line":53,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt.mk\"><span class=\"name\">Ssyt</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(entry : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(row_weak' : <span class=\"fn\">∀ {<span class=\"fn\">i </span>j1 j2 : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">j1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j2</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j2</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">entry</span> <span class=\"fn\">i</span> <span class=\"fn\">j1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">entry</span> <span class=\"fn\">i</span> <span class=\"fn\">j2</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(col_strict' : <span class=\"fn\">∀ {<span class=\"fn\">i1 </span>i2 j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i2</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i2</span>, <span class=\"fn\">j</span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">entry</span> <span class=\"fn\">i1</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">entry</span> <span class=\"fn\">i2</span> <span class=\"fn\">j</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(zeros' : <span class=\"fn\">∀ {<span class=\"fn\">i </span>j : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span>, <span class=\"fn\">j</span>)</span> ∉ <span class=\"fn\">μ</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">entry</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\">Ssyt</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L53-L61","name":"Ssyt","line":53,"kind":"structure","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt","doc":"A semistandard Young tableau (SSYT) is a filling of the cells of a Young diagram by natural\nnumbers, such that the entries in each row are weakly increasing (left to right), and the entries\nin each column are strictly increasing (top to bottom).\n\nHere, an SSYT is represented as an unrestricted function `ℕ → ℕ → ℕ` that, for reasons\nof extensionality, is required to vanish outside `μ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#Ssyt\"><span class=\"name\">Ssyt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}