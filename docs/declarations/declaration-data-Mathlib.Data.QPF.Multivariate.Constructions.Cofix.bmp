{"name":"Mathlib.Data.QPF.Multivariate.Constructions.Cofix","instances":[{"typeNames":["MvQPF.Cofix"],"name":"MvQPF.instInhabitedCofix","className":"Inhabited"},{"typeNames":["MvQPF.Cofix"],"name":"MvQPF.Cofix.mvfunctor","className":"MvFunctor"},{"typeNames":["MvQPF.Cofix"],"name":"MvQPF.mvqpfCofix","className":"MvQPF"}],"imports":["Init","Mathlib.Control.Functor.Multivariate","Mathlib.Data.PFunctor.Multivariate.Basic","Mathlib.Data.PFunctor.Multivariate.M","Mathlib.Data.QPF.Multivariate.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L556-L561","name":"MvQPF.mvqpfCofix","line":556,"kind":"instance","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.mvqpfCofix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.mvqpfCofix\"><span class=\"name\">MvQPF</span>.<span class=\"name\">mvqpfCofix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L548-L553","name":"MvQPF.Cofix.dest_corec₁","line":548,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest_corec₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest_corec₁\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">dest_corec₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">X</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">X</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">X</span></span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">X </span>Y : <a href=\"./foundational_types.html\">Type</a> u) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">X</span></span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">X</span></span>) (<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">Y</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f'</span></span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">TypeVec.id</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\">k</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">f</span> <span class=\"fn\">f'</span> <span class=\"fn\">x</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">MvQPF.Cofix.dest</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec₁\">MvQPF.Cofix.corec₁</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">id</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec₁\">MvQPF.Cofix.corec₁</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L529-L545","name":"MvQPF.Cofix.dest_corec'","line":529,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest_corec'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest_corec'\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">dest_corec'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">MvQPF.Cofix.dest</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec'\">MvQPF.Cofix.corec'</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">TypeVec.id</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><a href=\"./Std/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">id</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec'\">MvQPF.Cofix.corec'</a> <span class=\"fn\">g</span></span>)</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L520-L526","name":"MvQPF.corec_roll","line":520,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.corec_roll","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.corec_roll\"><span class=\"name\">MvQPF</span>.<span class=\"name\">corec_roll</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{X : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Y : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x₀ : <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">Y</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">X</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec\">MvQPF.Cofix.corec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x₀</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec\">MvQPF.Cofix.corec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">TypeVec.id</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\">f</span></span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x₀</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L457-L458","name":"Mathlib.Tactic.MvBisim.tacticMv_bisim___With___","line":457,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#Mathlib.Tactic.MvBisim.tacticMv_bisim___With___","doc":"tactic for proof by bisimulation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#Mathlib.Tactic.MvBisim.tacticMv_bisim___With___\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MvBisim</span>.<span class=\"name\">tacticMv_bisim___With___</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L432-L448","name":"MvQPF.Cofix.abs_repr","line":432,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.abs_repr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.abs_repr\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">abs_repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">MvQPF.Mcongr</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.repr\">MvQPF.Cofix.repr</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L422-L425","name":"MvQPF.liftR_map_last'","line":422,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.liftR_map_last'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.liftR_map_last'\"><span class=\"name\">MvQPF</span>.<span class=\"name\">liftR_map_last'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#LawfulMvFunctor\">LawfulMvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">ι</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">ι</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hh : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.LiftR'\">MvFunctor.LiftR'</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.RelLast'\">TypeVec.RelLast'</a> <span class=\"fn\">α</span> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">TypeVec.id</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L390-L419","name":"MvQPF.liftR_map_last","line":390,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.liftR_map_last","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.liftR_map_last\"><span class=\"name\">MvQPF</span>.<span class=\"name\">liftR_map_last</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[lawful : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#LawfulMvFunctor\">LawfulMvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{ι' : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><span class=\"fn\">ι'</span> → <span class=\"fn\">ι'</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">ι</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">ι'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hh : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.LiftR'\">MvFunctor.LiftR'</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.RelLast'\">TypeVec.RelLast'</a> <span class=\"fn\">α</span> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">TypeVec.id</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">TypeVec.id</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L378-L385","name":"MvQPF.liftR_map","line":378,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.liftR_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.liftR_map\"><span class=\"name\">MvQPF</span>.<span class=\"name\">liftR_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F' : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#LawfulMvFunctor\">LawfulMvFunctor</a> <span class=\"fn\">F'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(R : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.prod\">TypeVec.prod</a> <span class=\"fn\">β</span> <span class=\"fn\">β</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.repeat\">TypeVec.repeat</a> <span class=\"fn\">n</span> <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F'</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Subtype_\">TypeVec.Subtype_</a> <span class=\"fn\">R</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hh : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.comp\">TypeVec.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.subtypeVal\">TypeVec.subtypeVal</a> <span class=\"fn\">R</span></span>)</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.comp\">TypeVec.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.prod.map\">TypeVec.prod.map</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span> <span class=\"fn\">TypeVec.prod.diag</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.LiftR'\">MvFunctor.LiftR'</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L366-L367","name":"MvQPF.Cofix.ext_mk","line":366,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.ext_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.ext_mk\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">ext_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mk\">MvQPF.Cofix.mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mk\">MvQPF.Cofix.mk</a> <span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L362-L363","name":"MvQPF.Cofix.ext","line":362,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.ext\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">MvQPF.Cofix.dest</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">MvQPF.Cofix.dest</a> <span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L355-L359","name":"MvQPF.Cofix.dest_mk","line":355,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest_mk\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">dest_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">MvQPF.Cofix.dest</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mk\">MvQPF.Cofix.mk</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L335-L352","name":"MvQPF.Cofix.mk_dest","line":335,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mk_dest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mk_dest\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">mk_dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mk\">MvQPF.Cofix.mk</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">MvQPF.Cofix.dest</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L314-L332","name":"MvQPF.Cofix.bisim'","line":314,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.bisim'","doc":"Bisimulation principle the values `⟨a,f⟩` of the polynomial functor representing\n`Cofix F α` as well as an invariant `Q : β → Prop` and a state `β` generating the\nleft-hand side and right-hand side of the equality through functions `u v : β → Cofix F α` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.bisim'\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">bisim'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(Q : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(u : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span></span> →\n    <span class=\"fn\">∃ (a : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span>) (f' : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">MvPFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">MvPFunctor.drop</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">α</span></span>) (f₀ :\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>) (f₁ :\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>),\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">MvQPF.Cofix.dest</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs\">MvQPF.abs</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.appendContents\">MvPFunctor.appendContents</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">f'</span> <span class=\"fn\">f₀</span></span> }</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a>         <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">MvQPF.Cofix.dest</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.abs\">MvQPF.abs</a> <span class=\"fn\">{ <span class=\"fn\">fst</span> := <span class=\"fn\">a</span>, <span class=\"fn\">snd</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.appendContents\">MvPFunctor.appendContents</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">f'</span> <span class=\"fn\">f₁</span></span> }</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a>           <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">PFunctor.B</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">MvPFunctor.last</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span></span>)</span> <span class=\"fn\">a</span></span>), <span class=\"fn\">∃ (x' : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f₀</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">x'</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">x'</span></span></span></span></span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L305-L308","name":"MvQPF.Cofix.bisim₂","line":305,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.bisim₂","doc":"Bisimulation principle using `LiftR'` to match and relate children of two trees. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.bisim₂\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">bisim₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x </span>y : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.LiftR'\">MvFunctor.LiftR'</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.RelLast'\">TypeVec.RelLast'</a> <span class=\"fn\">α</span> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">MvQPF.Cofix.dest</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">MvQPF.Cofix.dest</a> <span class=\"fn\">y</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L284-L299","name":"MvQPF.Cofix.bisim","line":284,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.bisim","doc":"Bisimulation principle using `LiftR` to match and relate children of two trees. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.bisim\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x </span>y : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.LiftR\">MvFunctor.LiftR</a> <span class=\"fn\">(<span class=\"fn\">fun {<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span>} =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.RelLast\">TypeVec.RelLast</a> <span class=\"fn\">α</span> <span class=\"fn\">r</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">MvQPF.Cofix.dest</a> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">MvQPF.Cofix.dest</a> <span class=\"fn\">y</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L258-L280","name":"MvQPF.Cofix.bisim_rel","line":258,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.bisim_rel","doc":"Bisimulation principle using `map` and `Quot.mk` to match and relate children of two trees. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.bisim_rel\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">bisim_rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">∀ (<span class=\"fn\">x </span>y : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>),\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">TypeVec.id</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">r</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">MvQPF.Cofix.dest</a> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">TypeVec.id</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">r</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">MvQPF.Cofix.dest</a> <span class=\"fn\">y</span></span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L194-L195","name":"MvQPF.Cofix.mk","line":194,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mk","doc":"constructor for `Cofix F` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mk\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L184-L190","name":"MvQPF.Cofix.dest_corec","line":184,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest_corec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest_corec\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">dest_corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">β</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\">MvQPF.Cofix.dest</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec\">MvQPF.Cofix.corec</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">TypeVec.id</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec\">MvQPF.Cofix.corec</a> <span class=\"fn\">g</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L179-L181","name":"MvQPF.Cofix.corec₁","line":179,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec₁","doc":"Corecursor for `Cofix F`. The shape allows recursive calls to\nlook like recursive calls. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec₁\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">corec₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">X</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">X</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">X</span></span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L171-L174","name":"MvQPF.Cofix.corec'","line":171,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec'","doc":"More flexible corecursor for `Cofix F`. Allows the return of a fully formed\nvalue instead of making a recursive call "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec'\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">corec'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span></span>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L164-L166","name":"MvQPF.Cofix.corec'₁","line":164,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec'₁","doc":"Corecursor for `Cofix F` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec'₁\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">corec'₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">X</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">X</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L159-L160","name":"MvQPF.Cofix.repr","line":159,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.repr","doc":"Representation function for `Cofix F α` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.repr\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">MvPFunctor.M</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L154-L155","name":"MvQPF.Cofix.abs","line":154,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.abs","doc":"Abstraction function for `cofix F α` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.abs\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">MvPFunctor.M</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L138-L150","name":"MvQPF.Cofix.dest","line":138,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest","doc":"Destructor for `Cofix F` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.dest\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L133-L134","name":"MvQPF.Cofix.corec","line":133,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec","doc":"Corecursor for `Cofix F` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.corec\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">β</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L129-L129","name":"MvQPF.Cofix.mvfunctor","line":129,"kind":"instance","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mvfunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.mvfunctor\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">mvfunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L106-L126","name":"MvQPF.Cofix.map","line":106,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.map","doc":"the map function for the functor `Cofix F` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix.map\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L100-L101","name":"MvQPF.mRepr","line":100,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.mRepr","doc":"maps every element of the W type to a canonical representative "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.mRepr\"><span class=\"name\">MvQPF</span>.<span class=\"name\">mRepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">MvPFunctor.M</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">MvPFunctor.M</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L95-L97","name":"MvQPF.instInhabitedCofix","line":95,"kind":"instance","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.instInhabitedCofix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.instInhabitedCofix\"><span class=\"name\">MvQPF</span>.<span class=\"name\">instInhabitedCofix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span>.A</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <span class=\"fn\">i</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\">MvQPF.Cofix</a> <span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L91-L92","name":"MvQPF.Cofix","line":91,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix","doc":"Greatest fixed point of functor F. The result is a functor with one fewer parameters\nthan the input. For `F a b c` a ternary functor, fix F is a binary functor such that\n\n```lean\nCofix F a b = F a b (Cofix F a b)\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Cofix\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Cofix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L79-L80","name":"MvQPF.Mcongr","line":79,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Mcongr","doc":"Equivalence relation on M-types representing a value of type `Cofix F` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.Mcongr\"><span class=\"name\">MvQPF</span>.<span class=\"name\">Mcongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">MvPFunctor.M</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(y : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">MvPFunctor.M</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L71-L75","name":"MvQPF.IsPrecongr","line":71,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.IsPrecongr","doc":"Characterization of desirable equivalence relations on M-types "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.IsPrecongr\"><span class=\"name\">MvQPF</span>.<span class=\"name\">IsPrecongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(r : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">MvPFunctor.M</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">MvPFunctor.M</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L64-L66","name":"MvQPF.corecF_eq","line":64,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.corecF_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.corecF_eq\"><span class=\"name\">MvQPF</span>.<span class=\"name\">corecF_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">β</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(x : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M.dest\">MvPFunctor.M.dest</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.corecF\">MvQPF.corecF</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">TypeVec.id</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.corecF\">MvQPF.corecF</a> <span class=\"fn\">g</span></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.repr\">MvQPF.repr</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Data/QPF/Multivariate/Constructions/Cofix.lean#L59-L60","name":"MvQPF.corecF","line":59,"kind":"def","docLink":"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.corecF","doc":"`corecF` is used as a basis for defining the corecursor of `Cofix F α`. `corecF`\nuses corecursion to construct the M-type generated by `q.P` and uses function on `F`\nas a corecursive step "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Multivariate/Constructions/Cofix.html#MvQPF.corecF\"><span class=\"name\">MvQPF</span>.<span class=\"name\">corecF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{F : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[mvf : <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[q : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF\">MvQPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">β</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/M.html#MvPFunctor.M\">MvPFunctor.M</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Multivariate/Basic.html#MvQPF.P\">MvQPF.P</a> <span class=\"fn\">F</span></span>)</span> <span class=\"fn\">α</span></span></span></div></div>"}]}