{"name":"Mathlib.Tactic.Hint","instances":[],"imports":["Init","Std.Tactic.TryThis","Std.Linter.UnreachableTactic","Std.Control.Nondet.Basic","Mathlib.Tactic.FailIfNoProgress","Mathlib.Mathport.Rename"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Hint.lean#L120-L124","name":"Mathlib.Tactic.Hint.hintStx","line":120,"kind":"def","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.hintStx","doc":"The `hint` tactic tries every tactic registered using `register_hint tac`,\nand reports any that succeed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.hintStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">hintStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Hint.lean#L104-L118","name":"Mathlib.Tactic.Hint.hint","line":104,"kind":"def","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.hint","doc":"Run all tactics registered using `register_hint`.\nPrint a \"Try these:\" suggestion for each of the successful tactics.\n\nIf one tactic succeeds and closes the goal, we don't look at subsequent tactics.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.hint\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">hint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Hint.lean#L90-L93","name":"Mathlib.Tactic.Hint.withoutInfoTrees","line":90,"kind":"def","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.withoutInfoTrees","doc":"Run a tactic, but revert any changes to info trees.\nWe use this to inhibit the creation of widgets by subsidiary tactics.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.withoutInfoTrees\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">withoutInfoTrees</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Hint.lean#L81-L84","name":"Mathlib.Tactic.Hint.withMessageLog","line":81,"kind":"def","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.withMessageLog","doc":"Run a tactic, returning any new messages rather than adding them to the message log. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.withMessageLog\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">withMessageLog</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Hint.lean#L62-L78","name":"Mathlib.Tactic.Hint.suggestion","line":62,"kind":"def","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.suggestion","doc":"Construct a suggestion for a tactic.\n* Check the passed `MessageLog` for an info message beginning with \"Try this: \".\n* If found, use that as the suggestion.\n* Otherwise use the provided syntax.\n* Also, look for remaining goals and pretty print them after the suggestion.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.suggestion\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">suggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(tac : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(msgs : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Lean/Message.html#Lean.MessageLog\">Lean.MessageLog</a>\n  <span class=\"fn\">{\n    <span class=\"fn\">msgs</span> :=\n      <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArrayNode.node\">Lean.PersistentArrayNode.node</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Array.mkEmpty\">Array.mkEmpty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.toNat\">USize.toNat</a> <a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray.branching\">Lean.PersistentArray.branching</a></span>)</span></span>)</span></span>,\n        <span class=\"fn\">tail</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Array.mkEmpty\">Array.mkEmpty</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.toNat\">USize.toNat</a> <a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray.branching\">Lean.PersistentArray.branching</a></span>)</span></span>, <span class=\"fn\">size</span> := <span class=\"fn\">0</span>,\n        <span class=\"fn\">shift</span> := <a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray.initShift\">Lean.PersistentArray.initShift</a>, <span class=\"fn\">tailOff</span> := <span class=\"fn\">0</span> }</span> }</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Std/Tactic/TryThis.html#Std.Tactic.TryThis.Suggestion\">Std.Tactic.TryThis.Suggestion</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Hint.lean#L44-L50","name":"Mathlib.Tactic.Hint.registerHintStx","line":44,"kind":"def","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.registerHintStx","doc":"Register a tactic for use with the `hint` tactic, e.g. `register_hint simp_all`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.registerHintStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">registerHintStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Hint.lean#L41-L41","name":"Mathlib.Tactic.Hint.getHints","line":41,"kind":"def","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.getHints","doc":"Return the list of registered hint tactics. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.getHints\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">getHints</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span></span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Hint.lean#L37-L38","name":"Mathlib.Tactic.Hint.addHint","line":37,"kind":"def","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.addHint","doc":"Register a new hint tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.addHint\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">addHint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(stx : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Tactic/Hint.lean#L29-L34","name":"Mathlib.Tactic.Hint.hintExtension","line":29,"kind":"opaque","docLink":"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.hintExtension","doc":"An environment extension for registering hint tactics. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Hint.html#Mathlib.Tactic.Hint.hintExtension\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Hint</span>.<span class=\"name\">hintExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.SimplePersistentEnvExtension\">Lean.SimplePersistentEnvExtension</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`tactic</span></span>)</span></span>)</span></span></div></div>"}]}