{"name":"Std.Data.RBMap.WF","instances":[{"typeNames":["Ordering.byKey","Ordering.byKey","Std.RBMap.Imp.mapSnd"],"name":"Std.RBMap.Imp.instIsMonotoneProdProdByKeyFstByKeyFstMapSnd","className":"Std.RBNode.IsMonotone"}],"imports":["Init","Std.Logic","Std.Data.RBMap.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L544-L544","name":"Std.RBMap.mapVal","line":544,"kind":"def","docLink":"./Std/Data/RBMap/WF.html#Std.RBMap.mapVal","doc":"`O(n)`. Map a function on the values in the map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBMap.mapVal\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">mapVal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBMap\">Std.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">cmp</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L531-L539","name":"Std.RBMap.Imp.instIsMonotoneProdProdByKeyFstByKeyFstMapSnd","line":531,"kind":"instance","docLink":"./Std/Data/RBMap/WF.html#Std.RBMap.Imp.instIsMonotoneProdProdByKeyFstByKeyFstMapSnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBMap.Imp.instIsMonotoneProdProdByKeyFstByKeyFstMapSnd\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">instIsMonotoneProdProdByKeyFstByKeyFstMapSnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.IsMonotone\">Std.RBSet.IsMonotone</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Ordering.byKey\">Ordering.byKey</a> <span class=\"fn\">Prod.fst</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Classes/Order.html#Ordering.byKey\">Ordering.byKey</a> <span class=\"fn\">Prod.fst</span> <span class=\"fn\">cmp</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBMap.Imp.mapSnd\">Std.RBMap.Imp.mapSnd</a> <span class=\"fn\">f</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L527-L527","name":"Std.RBMap.Imp.mapSnd","line":527,"kind":"def","docLink":"./Std/Data/RBMap/WF.html#Std.RBMap.Imp.mapSnd","doc":"Applies `f` to the second component.\nWe extract this as a function so that `IsMonotone (mapSnd f)` can be an instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBMap.Imp.mapSnd\"><span class=\"name\">Std</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">mapSnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">γ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L513-L514","name":"Std.RBSet.mapMonotone","line":513,"kind":"def","docLink":"./Std/Data/RBMap/WF.html#Std.RBSet.mapMonotone","doc":"`O(n)`. Map a function on every value in the set.\nThis requires `IsMonotone` on the function in order to preserve the order invariant.\nIf the function is not monotone, use `RBSet.map` instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBSet.mapMonotone\"><span class=\"name\">Std</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">mapMonotone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.IsMonotone\">Std.RBSet.IsMonotone</a> <span class=\"fn\">cmpα</span> <span class=\"fn\">cmpβ</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmpα</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBSet\">Std.RBSet</a> <span class=\"fn\">β</span> <span class=\"fn\">cmpβ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L497-L501","name":"Std.RBNode.Ordered.map","line":497,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.map","doc":"The `map` function preserves the order invariants if `f` is monotone. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.map\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.IsMonotone\">Std.RBSet.IsMonotone</a> <span class=\"fn\">cmpα</span> <span class=\"fn\">cmpβ</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmpα</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmpβ</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.map\">Std.RBNode.map</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L491-L494","name":"Std.RBNode.All.map","line":491,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All.map","doc":"Sufficient condition for `map` to preserve an `All` quantifier. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.All.map\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">q</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.map\">Std.RBNode.map</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L488-L488","name":"Std.RBNode.IsMonotone.lt_mono","line":488,"kind":"def","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.IsMonotone.lt_mono","doc":"If `x < y` then `f x < f y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.IsMonotone.lt_mono\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsMonotone</span>.<span class=\"name\">lt_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[self : <span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.IsMonotone\">Std.RBSet.IsMonotone</a> <span class=\"fn\">cmpα</span> <span class=\"fn\">cmpβ</span> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmpα</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmpβ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L486-L486","name":"Std.RBNode.IsMonotone.mk","line":486,"kind":"ctor","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.IsMonotone.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.IsMonotone.mk\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsMonotone</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmpβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(lt_mono : <span class=\"fn\">∀ {<span class=\"fn\">x </span>y : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmpα</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmpβ</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.IsMonotone\">Std.RBSet.IsMonotone</a> <span class=\"fn\">cmpα</span> <span class=\"fn\">cmpβ</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L486-L488","name":"Std.RBNode.IsMonotone","line":486,"kind":"class","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.IsMonotone","doc":"The property of a map function `f` which ensures the `map` operation is valid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.IsMonotone\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">IsMonotone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmpα : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(cmpβ : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L480-L483","name":"Std.RBNode.Balanced.map","line":480,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.map","doc":"The `map` function preserves the balance invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.map\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α_1</span> : <a href=\"./foundational_types.html\">Type</a> u_2} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α_1</span></span>} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.map\">Std.RBNode.map</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L476-L477","name":"Std.RBNode.WF_iff","line":476,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.WF_iff","doc":"The well-formedness invariant for a red-black tree is exactly the `mk` constructor,\nbecause the other constructors of `WF` are redundant.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.WF_iff\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\">Std.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>), <span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L466-L470","name":"Std.RBNode.WF.out","line":466,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.WF.out","doc":"The well-formedness invariant implies the ordering and balance properties. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.WF.out\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.WF\">Std.RBNode.WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>), <span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L461-L463","name":"Std.RBNode.Balanced.erase","line":461,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.erase","doc":"The `erase` function preserves the balance invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.erase\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.erase\">Std.RBNode.erase</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span>)</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L457-L458","name":"Std.RBNode.Ordered.erase","line":457,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.erase","doc":"The `erase` function preserves the ordering invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.erase\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.erase\">Std.RBNode.erase</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L432-L454","name":"Std.RBNode.Balanced.del","line":432,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.del","doc":"The `del` function has the `DelProp` property. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.del\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">del</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.DelProp\">Std.RBNode.DelProp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.isBlack\">Std.RBNode.isBlack</a> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.del\">Std.RBNode.del</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L419-L429","name":"Std.RBNode.Ordered.del","line":419,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.del","doc":"The `del` function preserves the ordering invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.del\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">del</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.del\">Std.RBNode.del</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L406-L416","name":"Std.RBNode.All.del","line":406,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All.del","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.All.del\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">del</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cut : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.del\">Std.RBNode.del</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L400-L404","name":"Std.RBNode.DelProp.redred","line":400,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.DelProp.redred","doc":"The `DelProp` property is a strengthened version of the red-red invariant. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.DelProp.redred\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">DelProp</span>.<span class=\"name\">redred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.DelProp\">Std.RBNode.DelProp</a> <span class=\"fn\">c</span> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span> → <span class=\"fn\">∃ (<span class=\"fn\">n'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">n'</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L394-L397","name":"Std.RBNode.DelProp","line":394,"kind":"def","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.DelProp","doc":"The invariant of the `del` function.\n* If the input tree is black, then the result of deletion is a red-red tree with\n  black-height lowered by 1.\n* If the input tree is red or nil, then the result of deletion is a balanced tree with\n  some color and the same black-height.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.DelProp\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">DelProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L347-L383","name":"Std.RBNode.Balanced.append","line":347,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.append","doc":"The balance properties of the `append` function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.append\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₁ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c₂ : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">l</span> <span class=\"fn\">c₁</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">r</span> <span class=\"fn\">c₂</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a></span> → <span class=\"fn\"><span class=\"fn\">c₂</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.append\">Std.RBNode.append</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L314-L344","name":"Std.RBNode.Ordered.append","line":314,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.append","doc":"The `append` function preserves the ordering invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.append\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(lv : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(vr : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.append\">Std.RBNode.append</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L303-L311","name":"Std.RBNode.All.append","line":303,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All.append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.All.append\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">l </span>r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.append\">Std.RBNode.append</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L287-L301","name":"Std.RBNode.Balanced.balRight","line":287,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.balRight","doc":"The balancing properties of the `balRight` function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.balRight\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">balRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">v</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">cl</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>} {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">l</span> <span class=\"fn\">cl</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <a href=\"./Init/Prelude.html#True\">True</a> <span class=\"fn\">r</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cl</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.red\">Std.RBColor.red</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balRight\">Std.RBNode.balRight</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L274-L284","name":"Std.RBNode.Ordered.balRight","line":274,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.balRight","doc":"The `balRight` function preserves the ordering invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.balRight\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">balRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(lv : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(vr : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balRight\">Std.RBNode.balRight</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L269-L271","name":"Std.RBNode.All.balRight","line":269,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All.balRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.All.balRight\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">balRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>} {<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">v</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">v</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balRight\">Std.RBNode.balRight</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L253-L267","name":"Std.RBNode.Balanced.balLeft","line":253,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.balLeft","doc":"The balancing properties of the `balLeft` function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.balLeft\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">balLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">v</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">cr</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>} {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <a href=\"./Init/Prelude.html#True\">True</a> <span class=\"fn\">l</span> <span class=\"fn\">n</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">r</span> <span class=\"fn\">cr</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cr</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.red\">Std.RBColor.red</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balLeft\">Std.RBNode.balLeft</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L240-L250","name":"Std.RBNode.Ordered.balLeft","line":240,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.balLeft","doc":"The `balLeft` function preserves the ordering invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.balLeft\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">balLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(lv : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(vr : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balLeft\">Std.RBNode.balLeft</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L235-L237","name":"Std.RBNode.All.balLeft","line":235,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All.balLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.All.balLeft\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">balLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>} {<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">v</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">v</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balLeft\">Std.RBNode.balLeft</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L232-L233","name":"Std.RBNode.Ordered.setRed","line":232,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.setRed","doc":"The `setRed` function preserves the ordering invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.setRed\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">setRed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setRed\">Std.RBNode.setRed</a> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L228-L229","name":"Std.RBNode.All.setRed","line":228,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All.setRed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.All.setRed\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">setRed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setRed\">Std.RBNode.setRed</a> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L222-L226","name":"Std.RBNode.Balanced.insert","line":222,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.insert","doc":"The `insert` function is balanced if the input is balanced.\n(We lose track of both the color and the black-height of the result,\nso this is only suitable for use on the root of the tree.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.insert\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">c'</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>), <span class=\"fn\">∃ (<span class=\"fn\">n'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\">Std.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span> <span class=\"fn\">c'</span> <span class=\"fn\">n'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L194-L215","name":"Std.RBNode.Balanced.ins","line":194,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.ins","doc":"The balance invariant of the `ins` function.\nThe result of inserting into the tree either yields a balanced tree,\nor a tree which is almost balanced except that it has a red-red violation at the root.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.ins\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(v : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.isRed\">Std.RBNode.isRed</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.red\">Std.RBColor.red</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.ins\">Std.RBNode.ins</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">t</span></span>)</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L183-L185","name":"Std.RBNode.balance2_eq","line":183,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.balance2_eq","doc":"The `balance2` function does nothing if the second argument is already balanced. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.balance2_eq\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balance2_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">r</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balance2\">Std.RBNode.balance2</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.node\">Std.RBNode.node</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L178-L180","name":"Std.RBNode.balance1_eq","line":178,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.balance1_eq","doc":"The `balance1` function does nothing if the first argument is already balanced. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.balance1_eq\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balance1_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">l</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balance1\">Std.RBNode.balance1</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.node\">Std.RBNode.node</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L166-L175","name":"Std.RBNode.RedRed.balance2","line":166,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.balance2","doc":"The `balance2` function repairs the balance invariant when the second argument is red-red. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.balance2\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">balance2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">l</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>), <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balance2\">Std.RBNode.balance2</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">c</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L154-L163","name":"Std.RBNode.RedRed.balance1","line":154,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.balance1","doc":"The `balance1` function repairs the balance invariant when the first argument is red-red. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.balance1\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">balance1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{n : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{c : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">r</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>), <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balance1\">Std.RBNode.balance1</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">c</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L149-L151","name":"Std.RBNode.RedRed.setBlack","line":149,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.setBlack","doc":"If `t` has the red-red invariant, then setting the root to black yields a balanced tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.setBlack\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">setBlack</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>} {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span> → <span class=\"fn\">∃ (<span class=\"fn\">n'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setBlack\">Std.RBNode.setBlack</a> <span class=\"fn\">t</span></span>)</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">n'</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L144-L146","name":"Std.RBNode.RedRed.imp","line":144,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.imp","doc":"The red-red invariant is monotonic in `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.imp\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> → <span class=\"fn\">q</span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <span class=\"fn\">q</span> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L139-L141","name":"Std.RBNode.RedRed.of_red","line":139,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.of_red","doc":"A `red` node with the red-red invariant has balanced children. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.of_red\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">of_red</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.node\">Std.RBNode.node</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.red\">Std.RBColor.red</a> <span class=\"fn\">a</span> <span class=\"fn\">x</span> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">n</span></span> →\n    <span class=\"fn\">∃ (<span class=\"fn\">c₁</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>), <span class=\"fn\">∃ (<span class=\"fn\">c₂</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">a</span> <span class=\"fn\">c₁</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">b</span> <span class=\"fn\">c₂</span> <span class=\"fn\">n</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L134-L136","name":"Std.RBNode.RedRed.of_false","line":134,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.of_false","doc":"When `p` is false, the red-red case is impossible so the tree is balanced. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.of_false\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">of_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span> → <span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>), <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L130-L131","name":"Std.RBNode.RedRed.redred","line":130,"kind":"ctor","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.redred","doc":"A red node with balanced red children has the red-red invariant (if `p` is true). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.redred\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">redred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">x</span></span>} {<span class=\"fn\">c₁</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>} {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} {<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">x</span></span>} {<span class=\"fn\">c₂</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>} {<span class=\"fn\">x_1</span> : <span class=\"fn\">x</span>},\n  <span class=\"fn\"><span class=\"fn\">p</span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">a</span> <span class=\"fn\">c₁</span> <span class=\"fn\">n</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">b</span> <span class=\"fn\">c₂</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.node\">Std.RBNode.node</a> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.red\">Std.RBColor.red</a> <span class=\"fn\">a</span> <span class=\"fn\">x_1</span> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">n</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L128-L129","name":"Std.RBNode.RedRed.balanced","line":128,"kind":"ctor","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.balanced","doc":"A balanced tree has the red-red invariant. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed.balanced\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span>.<span class=\"name\">balanced</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">x</span></span>} {<span class=\"fn\">c</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>} {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\">Std.RBNode.RedRed</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L127-L131","name":"Std.RBNode.RedRed","line":127,"kind":"inductive","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed","doc":"The red-red invariant is a weakening of the red-black balance invariant which allows\nthe root to be red with red children, but does not allow any other violations.\nIt occurs as a temporary condition in the `insert` and `erase` functions.\n\nThe `p` parameter allows the `.redred` case to be dependent on an additional condition.\nIf it is false, then this is equivalent to the usual red-black invariant.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.RedRed\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">RedRed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L116-L117","name":"Std.RBNode.Ordered.insert","line":116,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.insert","doc":"The `insert` function preserves the ordering invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.insert\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">v</span> : <span class=\"fn\">α</span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\">Std.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L98-L113","name":"Std.RBNode.Ordered.ins","line":98,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.ins","doc":"The `ins` function preserves the ordering invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.ins\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.ins\">Std.RBNode.ins</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L92-L95","name":"Std.RBNode.All.ins","line":92,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All.ins","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.All.ins\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁ : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂ : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.ins\">Std.RBNode.ins</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">t</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L88-L90","name":"Std.RBNode.insert_setBlack","line":88,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.insert_setBlack","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.insert_setBlack\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">insert_setBlack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setBlack\">Std.RBNode.setBlack</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.insert\">Std.RBNode.insert</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">v</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setBlack\">Std.RBNode.setBlack</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.ins\">Std.RBNode.ins</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">t</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L86-L86","name":"Std.RBNode.setBlack_idem","line":86,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.setBlack_idem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.setBlack_idem\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">setBlack_idem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setBlack\">Std.RBNode.setBlack</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setBlack\">Std.RBNode.setBlack</a> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setBlack\">Std.RBNode.setBlack</a> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L82-L84","name":"Std.RBNode.Balanced.setBlack","line":82,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.setBlack","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Balanced.setBlack\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">setBlack</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1} {<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">c</span> : <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor\">Std.RBColor</a>} {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\">∃ (<span class=\"fn\">n'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Balanced\">Std.RBNode.Balanced</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setBlack\">Std.RBNode.setBlack</a> <span class=\"fn\">t</span></span>)</span> <a href=\"./Std/Data/RBMap/Basic.html#Std.RBColor.black\">Std.RBColor.black</a> <span class=\"fn\">n'</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L79-L80","name":"Std.RBNode.Ordered.setBlack","line":79,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.setBlack","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.setBlack\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">setBlack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.setBlack\">Std.RBNode.setBlack</a> <span class=\"fn\">t</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L75-L77","name":"Std.RBNode.balance2_All","line":75,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.balance2_All","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.balance2_All\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balance2_All</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balance2\">Std.RBNode.balance2</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L63-L73","name":"Std.RBNode.Ordered.balance2","line":63,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.balance2","doc":"The `balance2` function preserves the ordering invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.balance2\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">balance2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(lv : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(vr : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balance2\">Std.RBNode.balance2</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L58-L60","name":"Std.RBNode.balance1_All","line":58,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.balance1_All","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.balance1_All\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">balance1_All</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balance1\">Std.RBNode.balance1</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L46-L56","name":"Std.RBNode.Ordered.balance1","line":46,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.balance1","doc":"The `balance1` function preserves the ordering invariants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.Ordered.balance1\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">balance1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{l : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{v : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{r : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(lv : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(vr : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">v</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hl : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hr : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.Ordered\">Std.RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.balance1\">Std.RBNode.balance1</a> <span class=\"fn\">l</span> <span class=\"fn\">v</span> <span class=\"fn\">r</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L42-L43","name":"Std.RBNode.cmpEq.lt_congr_right","line":42,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.cmpEq.lt_congr_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.cmpEq.lt_congr_right\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpEq</span>.<span class=\"name\">lt_congr_right</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">y </span>z x : <span class=\"fn\">α</span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpEq\">Std.RBNode.cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">z</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L39-L40","name":"Std.RBNode.cmpEq.lt_congr_left","line":39,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.cmpEq.lt_congr_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.cmpEq.lt_congr_left\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpEq</span>.<span class=\"name\">lt_congr_left</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">x </span>y z : <span class=\"fn\">α</span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpEq\">Std.RBNode.cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L36-L37","name":"Std.RBNode.cmpLT.trans_r","line":36,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.cmpLT.trans_r","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.cmpLT.trans_r\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpLT</span>.<span class=\"name\">trans_r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{a : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x_1</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span>)</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L33-L34","name":"Std.RBNode.cmpLT.trans_l","line":33,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.cmpLT.trans_l","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.cmpLT.trans_l\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpLT</span>.<span class=\"name\">trans_l</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{cmp : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{x : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{y : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span>)</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">x_1</span></span></span>)</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L30-L31","name":"Std.RBNode.cmpLT.trans","line":30,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.cmpLT.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.cmpLT.trans\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpLT</span>.<span class=\"name\">trans</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1} {<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>} {<span class=\"fn\">x </span>y z : <span class=\"fn\">α</span>},\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> → <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.cmpLT\">Std.RBNode.cmpLT</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">z</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L27-L28","name":"Std.RBNode.All_and","line":27,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.All_and\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{q : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">(<span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">a</span></span></span></span>)</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">q</span> <span class=\"fn\">t</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/std4/blob/0d0ac1c43e1ec1965e0806af9e7a32999ea31096/Std/Data/RBMap/WF.lean#L23-L25","name":"Std.RBNode.All.trivial","line":23,"kind":"theorem","docLink":"./Std/Data/RBMap/WF.html#Std.RBNode.All.trivial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/RBMap/WF.html#Std.RBNode.All.trivial\"><span class=\"name\">Std</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">All</span>.<span class=\"name\">trivial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{t : <span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode\">Std.RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/RBMap/Basic.html#Std.RBNode.All\">Std.RBNode.All</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span></span></div></div>"}]}