{"name":"Mathlib.Topology.Category.TopCat.Limits.Basic","instances":[{"typeNames":["TopCatMax"],"name":"TopCat.topCat_hasLimitsOfSize","className":"CategoryTheory.Limits.HasLimitsOfSize"},{"typeNames":["TopCat"],"name":"TopCat.topCat_hasLimits","className":"CategoryTheory.Limits.HasLimitsOfSize"},{"typeNames":["CategoryTheory.forget"],"name":"TopCat.forgetPreservesLimitsOfSize","className":"CategoryTheory.Limits.PreservesLimitsOfSize"},{"typeNames":["CategoryTheory.forget"],"name":"TopCat.forgetPreservesLimits","className":"CategoryTheory.Limits.PreservesLimitsOfSize"},{"typeNames":["TopCatMax"],"name":"TopCat.topCat_hasColimitsOfSize","className":"CategoryTheory.Limits.HasColimitsOfSize"},{"typeNames":["TopCat"],"name":"TopCat.topCat_hasColimits","className":"CategoryTheory.Limits.HasColimitsOfSize"},{"typeNames":["CategoryTheory.forget"],"name":"TopCat.forgetPreservesColimitsOfSize","className":"CategoryTheory.Limits.PreservesColimitsOfSize"},{"typeNames":["CategoryTheory.forget"],"name":"TopCat.forgetPreservesColimits","className":"CategoryTheory.Limits.PreservesColimitsOfSize"}],"imports":["Init","Mathlib.Topology.Category.TopCat.Basic","Mathlib.CategoryTheory.Limits.Types"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L233-L234","name":"TopCat.initialIsoPEmpty","line":233,"kind":"def","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.initialIsoPEmpty","doc":"The initial object of `Top` is `PEmpty`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.initialIsoPEmpty\"><span class=\"name\">TopCat</span>.<span class=\"name\">initialIsoPEmpty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.initial\">⊥_</a> <a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat.of\">TopCat.of</a> <a href=\"./Init/Prelude.html#PEmpty\">PEmpty.{u + 1}</a>     </span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L226-L229","name":"TopCat.isInitialPEmpty","line":226,"kind":"def","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.isInitialPEmpty","doc":"The initial object of `Top` is `PEmpty`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.isInitialPEmpty\"><span class=\"name\">TopCat</span>.<span class=\"name\">isInitialPEmpty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsInitial\">CategoryTheory.Limits.IsInitial</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat.of\">TopCat.of</a> <a href=\"./Init/Prelude.html#PEmpty\">PEmpty.{u + 1}</a>     </span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L221-L222","name":"TopCat.terminalIsoPUnit","line":221,"kind":"def","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.terminalIsoPUnit","doc":"The terminal object of `Top` is `PUnit`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.terminalIsoPUnit\"><span class=\"name\">TopCat</span>.<span class=\"name\">terminalIsoPUnit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.terminal\">⊤_</a> <a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat.of\">TopCat.of</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L214-L217","name":"TopCat.isTerminalPUnit","line":214,"kind":"def","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.isTerminalPUnit","doc":"The terminal object of `Top` is `PUnit`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.isTerminalPUnit\"><span class=\"name\">TopCat</span>.<span class=\"name\">isTerminalPUnit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.IsTerminal\">CategoryTheory.Limits.IsTerminal</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat.of\">TopCat.of</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>     </span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L209-L210","name":"TopCat.forgetPreservesColimits","line":209,"kind":"instance","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.forgetPreservesColimits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.forgetPreservesColimits\"><span class=\"name\">TopCat</span>.<span class=\"name\">forgetPreservesColimits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Basic.html#CategoryTheory.Limits.PreservesColimits\">CategoryTheory.Limits.PreservesColimits</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L201-L206","name":"TopCat.forgetPreservesColimitsOfSize","line":201,"kind":"instance","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.forgetPreservesColimitsOfSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.forgetPreservesColimitsOfSize\"><span class=\"name\">TopCat</span>.<span class=\"name\">forgetPreservesColimitsOfSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Basic.html#CategoryTheory.Limits.PreservesColimitsOfSize\">CategoryTheory.Limits.PreservesColimitsOfSize.{v, v, max v u_1, max v u_1, (max v u_1) + 1, (max v u_1) + 1}</a>                                                           \n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L197-L198","name":"TopCat.topCat_hasColimits","line":197,"kind":"instance","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.topCat_hasColimits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.topCat_hasColimits\"><span class=\"name\">TopCat</span>.<span class=\"name\">topCat_hasColimits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.HasColimits\">CategoryTheory.Limits.HasColimits</a> <a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L189-L194","name":"TopCat.topCat_hasColimitsOfSize","line":189,"kind":"instance","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.topCat_hasColimitsOfSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.topCat_hasColimitsOfSize\"><span class=\"name\">TopCat</span>.<span class=\"name\">topCat_hasColimitsOfSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.HasColimitsOfSize\">CategoryTheory.Limits.HasColimitsOfSize.{v, v, max u v, max (u + 1) (v + 1)}</a>                                  <a href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCatMax\">TopCatMax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L170-L186","name":"TopCat.colimitCoconeIsColimit","line":170,"kind":"def","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.colimitCoconeIsColimit","doc":"The chosen cocone `TopCat.colimitCocone F` for a functor `F : J ⥤ TopCat` is a colimit cocone.\nGenerally you should just use `colimit.isColimit F`, unless you need the actual definition\n(which is in terms of `Types.colimitCoconeIsColimit`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.colimitCoconeIsColimit\"><span class=\"name\">TopCat</span>.<span class=\"name\">colimitCoconeIsColimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">J</span> <a href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCatMax\">TopCatMax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsColimit\">CategoryTheory.Limits.IsColimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.colimitCocone\">TopCat.colimitCocone</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L153-L163","name":"TopCat.colimitCocone","line":153,"kind":"def","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.colimitCocone","doc":"A choice of colimit cocone for a functor `F : J ⥤ TopCat`.\nGenerally you should just use `colimit.cocone F`, unless you need the actual definition\n(which is in terms of `Types.colimitCocone`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.colimitCocone\"><span class=\"name\">TopCat</span>.<span class=\"name\">colimitCocone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">J</span> <a href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCatMax\">TopCatMax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cocone\">CategoryTheory.Limits.Cocone</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L145-L146","name":"TopCat.forgetPreservesLimits","line":145,"kind":"instance","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.forgetPreservesLimits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.forgetPreservesLimits\"><span class=\"name\">TopCat</span>.<span class=\"name\">forgetPreservesLimits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Basic.html#CategoryTheory.Limits.PreservesLimits\">CategoryTheory.Limits.PreservesLimits</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L138-L142","name":"TopCat.forgetPreservesLimitsOfSize","line":138,"kind":"instance","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.forgetPreservesLimitsOfSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.forgetPreservesLimitsOfSize\"><span class=\"name\">TopCat</span>.<span class=\"name\">forgetPreservesLimitsOfSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Basic.html#CategoryTheory.Limits.PreservesLimitsOfSize\">CategoryTheory.Limits.PreservesLimitsOfSize.{v, v, max u v, max u v, (max u v) + 1, (max u v) + 1}</a>                                                   \n  <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L134-L135","name":"TopCat.topCat_hasLimits","line":134,"kind":"instance","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.topCat_hasLimits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.topCat_hasLimits\"><span class=\"name\">TopCat</span>.<span class=\"name\">topCat_hasLimits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.HasLimits\">CategoryTheory.Limits.HasLimits</a> <a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L126-L131","name":"TopCat.topCat_hasLimitsOfSize","line":126,"kind":"instance","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.topCat_hasLimitsOfSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.topCat_hasLimitsOfSize\"><span class=\"name\">TopCat</span>.<span class=\"name\">topCat_hasLimitsOfSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/HasLimits.html#CategoryTheory.Limits.HasLimitsOfSize\">CategoryTheory.Limits.HasLimitsOfSize.{v, v, max u v, max (u + 1) (v + 1)}</a>                                  <a href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCatMax\">TopCatMax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L109-L123","name":"TopCat.limitConeInfiIsLimit","line":109,"kind":"def","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.limitConeInfiIsLimit","doc":"The chosen cone `TopCat.limitConeInfi F` for a functor `F : J ⥤ TopCat` is a limit cone.\nGenerally you should just use `limit.isLimit F`, unless you need the actual definition\n(which is in terms of `Types.limitConeIsLimit`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.limitConeInfiIsLimit\"><span class=\"name\">TopCat</span>.<span class=\"name\">limitConeInfiIsLimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">J</span> <a href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCatMax\">TopCatMax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.limitConeInfi\">TopCat.limitConeInfi</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L86-L102","name":"TopCat.limitConeIsLimit","line":86,"kind":"def","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.limitConeIsLimit","doc":"The chosen cone `TopCat.limitCone F` for a functor `F : J ⥤ TopCat` is a limit cone.\nGenerally you should just use `limit.isLimit F`, unless you need the actual definition\n(which is in terms of `Types.limitConeIsLimit`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.limitConeIsLimit\"><span class=\"name\">TopCat</span>.<span class=\"name\">limitConeIsLimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">J</span> <a href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCatMax\">TopCatMax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.limitCone\">TopCat.limitCone</a> <span class=\"fn\">F</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L71-L79","name":"TopCat.limitConeInfi","line":71,"kind":"def","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.limitConeInfi","doc":"A choice of limit cone for a functor `F : J ⥤ TopCat` whose topology is defined as an\ninfimum of topologies infimum.\nGenerally you should just use `limit.cone F`, unless you need the actual definition\n(which is in terms of `Types.limitCone`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.limitConeInfi\"><span class=\"name\">TopCat</span>.<span class=\"name\">limitConeInfi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">J</span> <a href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCatMax\">TopCatMax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L50-L63","name":"TopCat.limitCone","line":50,"kind":"def","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.limitCone","doc":"A choice of limit cone for a functor `F : J ⥤ TopCat`.\nGenerally you should just use `limit.cone F`, unless you need the actual definition\n(which is in terms of `Types.limitCone`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCat.limitCone\"><span class=\"name\">TopCat</span>.<span class=\"name\">limitCone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{J : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(F : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">J</span> <a href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCatMax\">TopCatMax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/8c661e5492d1852ac9a417cfc675b6545d77c4b7/Mathlib/Topology/Category/TopCat/Limits/Basic.lean#L34-L34","name":"TopCatMax","line":34,"kind":"def","docLink":"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCatMax","doc":"Universe inequalities in Mathlib 3 are expressed through use of `max u v`. Unfortunately,\nthis leads to unbound universes which cannot be solved for during unification, eg\n`max u v =?= max v ?`.\nThe current solution is to wrap `Type max u v` in `TypeMax.{u,v}`\nto expose both universe parameters directly.\n\nSimilarly, for other concrete categories for which we need to refer to the maximum of two universes\n(e.g. any category for which we are constructing limits), we need an analogous abbreviation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/TopCat/Limits/Basic.html#TopCatMax\"><span class=\"name\">TopCatMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> ((max u v) + 1)</div></div>"}]}